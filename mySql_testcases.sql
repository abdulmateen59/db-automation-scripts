/*
SQLyog Ultimate v12.09 (64 bit)
MySQL - 5.6.36-log : Database - test_cases_2
*********************************************************************
*/

/*!40101 SET NAMES utf8 */;

/*!40101 SET SQL_MODE=''*/;

/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;
CREATE DATABASE /*!32312 IF NOT EXISTS*/`test_cases_2` /*!40100 DEFAULT CHARACTER SET latin1 */;

/*Table structure for table `t_global_reasons_ratio` */

DROP TABLE IF EXISTS `t_global_reasons_ratio`;

CREATE TABLE `t_global_reasons_ratio` (
  `id` bigint(20) NOT NULL AUTO_INCREMENT,
  `algo_id` int(11) NOT NULL,
  `algo_name` varchar(100) NOT NULL,
  `reason_level` int(2) DEFAULT NULL,
  `ryg_status` varchar(30) DEFAULT NULL,
  `reason_weight` decimal(4,2) NOT NULL,
  PRIMARY KEY (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=84 DEFAULT CHARSET=latin1;

/*Data for the table `t_global_reasons_ratio` */

insert  into `t_global_reasons_ratio`(`id`,`algo_id`,`algo_name`,`reason_level`,`ryg_status`,`reason_weight`) values (1,14,'Periodontal Maintenance vs. Prophy',1,NULL,'1.00'),(2,14,'Periodontal Maintenance vs. Prophy',2,NULL,'1.00'),(3,14,'Periodontal Maintenance vs. Prophy',3,NULL,'1.00'),(4,14,'Periodontal Maintenance vs. Prophy',4,NULL,'1.00'),(5,12,'Third Molar',1,NULL,'1.00'),(6,12,'Third Molar',2,NULL,'1.00'),(7,11,'Primary Tooth Extraction Coded as Adult Extraction',1,NULL,'1.00'),(8,11,'Primary Tooth Extraction Coded as Adult Extraction',2,NULL,'1.00'),(9,7,'multidoctor',1,NULL,'1.00'),(10,7,'multidoctor',2,NULL,'1.00'),(11,7,'multidoctor',3,NULL,'1.00'),(12,7,'multidoctor',4,NULL,'1.00'),(13,15,'Unjustified Full Mouth X-rays',1,NULL,'1.00'),(14,15,'Unjustified Full Mouth X-rays',2,NULL,'1.00'),(15,15,'Unjustified Full Mouth X-rays',3,NULL,'1.00');
insert  into `t_global_reasons_ratio`(`id`,`algo_id`,`algo_name`,`reason_level`,`ryg_status`,`reason_weight`) values (16,15,'Unjustified Full Mouth X-rays',4,NULL,'1.00'),(17,15,'Unjustified Full Mouth X-rays',5,NULL,'1.00'),(18,16,'Complex periodontal',1,NULL,'1.00'),(19,16,'Complex periodontal',2,NULL,'1.00'),(20,16,'Complex periodontal',3,NULL,'1.00'),(21,16,'Complex periodontal',4,NULL,'1.00'),(22,16,'Complex periodontal',5,NULL,'1.00'),(23,13,'Periodontal Scaling vs. Prophy',1,NULL,'1.00'),(24,13,'Periodontal Scaling vs. Prophy',2,NULL,'1.00'),(25,13,'Periodontal Scaling vs. Prophy',3,NULL,'1.00'),(26,13,'Periodontal Scaling vs. Prophy',4,NULL,'1.00'),(27,13,'Periodontal Scaling vs. Prophy',5,NULL,'1.00'),(28,13,'Periodontal Scaling vs. Prophy',6,NULL,'1.00'),(29,13,'Periodontal Scaling vs. Prophy',7,NULL,'1.00'),(30,13,'Periodontal Scaling vs. Prophy',8,NULL,'1.00');
insert  into `t_global_reasons_ratio`(`id`,`algo_id`,`algo_name`,`reason_level`,`ryg_status`,`reason_weight`) values (31,13,'Periodontal Scaling vs. Prophy',9,NULL,'1.00'),(32,13,'Periodontal Scaling vs. Prophy',10,NULL,'1.00'),(33,16,'Complex Periodontal',6,NULL,'1.00'),(34,25,'Deny other xray if FMX done',1,NULL,'1.00'),(35,25,'Deny other xray if FMX done',2,NULL,'1.00'),(36,24,'Deny Pulpotomy on adult',1,NULL,'1.00'),(37,24,'Deny Pulpotomy on adult',2,NULL,'1.00'),(38,24,'Deny Pulpotomy on adult',3,NULL,'1.00'),(39,22,'Sealant instead of fill',1,NULL,'1.00'),(40,22,'Sealant instead of fill',2,NULL,'1.00'),(41,22,'Sealant instead of fill',3,NULL,'1.00'),(42,26,'Deny Pulpotomy on adult followed by Full Endo',4,NULL,'1.00'),(43,26,'Deny Pulpotomy on adult followed by Full Endo',5,NULL,'1.00'),(44,26,'Deny Pulpotomy on adult followed by Full Endo',6,NULL,'1.00');
insert  into `t_global_reasons_ratio`(`id`,`algo_id`,`algo_name`,`reason_level`,`ryg_status`,`reason_weight`) values (45,23,'Crown build up overall - Axiomatic',1,NULL,'1.00'),(46,23,'Crown build up overall - Axiomatic',2,NULL,'1.00'),(47,23,'Crown build up overall - Axiomatic',3,NULL,'1.00'),(48,23,'Crown build up overall - Axiomatic',4,NULL,'1.00'),(49,23,'Crown build up overall - Axiomatic',5,NULL,'1.00'),(50,23,'Crown build up overall - Axiomatic',6,NULL,'1.00'),(51,17,'Ratio of Simple Extraction to Complex Extraction - Statistical',1,NULL,'1.00'),(52,17,'Ratio of Simple Extraction to Complex Extraction - Statistical',2,NULL,'1.00'),(53,17,'Ratio of Simple Extraction to Complex Extraction - Statistical',3,NULL,'1.00'),(54,21,'Overuse of B or L surface in fillings',1,'red','1.00'),(55,21,'Overuse of B or L surface in fillings',2,'red','1.00'),(56,21,'Overuse of B or L surface in fillings',3,'green','1.00');
insert  into `t_global_reasons_ratio`(`id`,`algo_id`,`algo_name`,`reason_level`,`ryg_status`,`reason_weight`) values (57,27,'Anesthesia Dangerous Dose',1,NULL,'1.00'),(58,27,'Anesthesia Dangerous Dose',2,NULL,'1.00'),(59,14,'Periodontal Maintenance vs. Prophy',6,NULL,'1.00'),(60,18,'Unjustified Surgical Extraction - Axiomatic',1,NULL,'1.00'),(61,18,'Unjustified Surgical Extraction - Axiomatic',2,NULL,'1.00'),(62,18,'Unjustified Surgical Extraction - Axiomatic',3,NULL,'1.00'),(63,18,'Unjustified Surgical Extraction - Axiomatic',4,NULL,'1.00'),(64,18,'Unjustified Surgical Extraction - Axiomatic',5,NULL,'1.00'),(65,18,'Unjustified Surgical Extraction - Axiomatic',6,NULL,'1.00'),(66,18,'Unjustified Surgical Extraction - Axiomatic',7,NULL,'1.00'),(67,18,'Unjustified Surgical Extraction - Axiomatic',8,NULL,'1.00'),(68,18,'Unjustified Surgical Extraction - Axiomatic',9,NULL,'1.00');
insert  into `t_global_reasons_ratio`(`id`,`algo_id`,`algo_name`,`reason_level`,`ryg_status`,`reason_weight`) values (69,20,'Adjacent Fillings (Code Distribution)',3,'red','1.00'),(70,20,'Adjacent Fillings (Code Distribution)',2,'yellow','1.00'),(71,20,'Adjacent Fillings (Code Distribution)',1,'green','1.00'),(72,4,'Impossible Age',101,'red','1.00'),(73,4,'Impossible Age',102,'green','1.00'),(74,8,'Overactive - Axiomatic',101,'green','1.00'),(75,8,'Overactive - Axiomatic',102,'yellow','1.00'),(76,8,'Overactive - Axiomatic',103,'red','1.00'),(77,19,'Overactive - Code distribution',101,'green','1.00'),(78,19,'Overactive - Code distribution',102,'yellow','1.00'),(79,19,'Overactive - Code distribution',103,'red','1.00'),(83,21,'Overuse of B or L surface in fillings',4,'green','1.00');

/*Table structure for table `t_global_variables` */

DROP TABLE IF EXISTS `t_global_variables`;

CREATE TABLE `t_global_variables` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `algo_id` int(4) DEFAULT NULL,
  `var_key` varchar(100) DEFAULT NULL,
  `var_value` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`id`),
  KEY `id` (`id`)
) ENGINE=MyISAM AUTO_INCREMENT=116 DEFAULT CHARSET=latin1;

/*Data for the table `t_global_variables` */

insert  into `t_global_variables`(`id`,`algo_id`,`var_key`,`var_value`) values (1,NULL,'db_name','test_cases_2'),(2,NULL,'db_name_under_test','emihealth_final'),(3,NULL,'output_files_path','/home/imran/'),(4,14,'4b_pl_daily_weightage','1'),(5,14,'4b_db_daily_weightage','1'),(6,14,'4b_mh_daily_weightage','1'),(7,14,'4b_pl_monthly_weightage','1'),(8,14,'4b_db_monthly_weightage','1'),(9,14,'4b_mh_monthly_weightage','1'),(10,14,'4b_pl_yearly_weightage','1'),(11,14,'4b_db_yearly_weightage','1'),(12,14,'mh_db_yearly_weightage','1'),(13,0,'anesthesia_by_patient_weightage','1'),(14,0,'multisite_by_patient_weightage','1'),(15,1,'pl_daily_pic','1'),(16,2,'dwp_daily','1'),(17,0,'fillup_by_patient_weightage','1'),(18,24,'pl_daily_denyOtherXray','1'),(19,24,'pl_daily_denyPulpOnAdult','1'),(20,25,'pl_daily_denyFullEndo','1'),(21,22,'sealant_instead_of_filling','1'),(22,16,'complex_perio','1'),(23,15,'fmx','1');
insert  into `t_global_variables`(`id`,`algo_id`,`var_key`,`var_value`) values (24,13,'4a_pl','1'),(25,12,'third_molar','1'),(26,11,'primary_tooth','1'),(27,7,'multi_doctor','1'),(28,20,'20_adjFillingCodeDist_source_table_weightage','1'),(30,13,'4a_pl_monthly_weightage','1'),(29,13,'4a_pl_yearly_weightage','1'),(31,23,'anesthesiaDangDose_pl_daily_weightage','1'),(32,16,'pl_monthly_complex_perio','1'),(33,16,'pl_yearly_complex_perio','1'),(34,16,'db_monthly_complex_perio','1'),(35,16,'db_yearly_complex_perio','1'),(36,11,'pl_monthly_primToothExt','1'),(37,11,'pl_yearly_primToothExt','1'),(38,11,'db_monthly_primToothExt','1'),(39,11,'db_yearly_primToothExt','1'),(40,12,'pl_monthly_third_molar','1'),(41,12,'pl_yearly_third_molar','1'),(42,12,'db_monthly_third_molar','1'),(43,12,'db_yearly_third_molar','1'),(44,15,'pl_monthly_FMX','1');
insert  into `t_global_variables`(`id`,`algo_id`,`var_key`,`var_value`) values (45,15,'pl_yearly_FMX','1'),(46,15,'db_monthly_FMX','1'),(47,15,'db_yearly_FMX','1'),(48,22,'pl_monthly_sealantInsteadOfFill','1'),(49,22,'pl_yearly_sealantInsteadOfFill','1'),(50,22,'db_monthly_sealantInsteadOfFill','1'),(51,22,'db_yearly_sealantInsteadOfFill','1'),(52,23,'pl_daily_cbu','1'),(53,23,'pl_monthly_cbu','1'),(54,23,'pl_yearly_cbu','1'),(55,23,'db_daily_cbu','1'),(56,23,'db_monthly_cbu','1'),(57,23,'db_yearly_cbu','1'),(58,21,'pl_daily_overuseOfBorL','1'),(59,21,'pl_monthly_overuseOfBorL','1'),(60,21,'pl_yearly_overuseOfBorL','1'),(61,21,'db_daily_overuseOfBorL','1'),(62,21,'db_monthly_overuseOfBorL','1'),(63,21,'db_yearly_overuseOfBorL','1'),(64,8,'pl_yearly_weightage_overactiveIactiveAxio','1'),(65,13,'4a_db_monthly_weightage','1');
insert  into `t_global_variables`(`id`,`algo_id`,`var_key`,`var_value`) values (66,13,'4a_db_yearly_weightage','1'),(67,24,'db_daily_denyPulpOnAdult','1'),(68,25,'db_daily_denyFullEndo','1'),(69,26,'pl_daily_denyPulpOnAdultEndo','1'),(70,26,'db_daily_denyPulpOnAdultEndo','1'),(71,26,'pl_monthly_denyPulpOnAdultEndo','1'),(72,26,'db_monthly_denyPulpOnAdultEndo','1'),(73,26,'pl_yearly_denyPulpOnAdultEndo','1'),(74,26,'db_yearly_denyPulpOnAdultEndo','1'),(75,25,'pl_monthly_denyOtherXray','1'),(76,25,'db_monthly_denyOtherXray','1'),(77,25,'pl_yearly_denyOtherXray','1'),(78,25,'db_yearly_denyOtherXray','1'),(79,1,'pl_monthly_pic','1'),(80,1,'pl_yearly_pic','1'),(81,1,'db_daily_pic','1'),(82,1,'db_monthly_pic','1'),(83,1,'db_yearly_pic','1'),(84,24,'pl_monthly_denyPulpOnAdult','1'),(85,24,'db_monthly_denyPulpOnAdult','1');
insert  into `t_global_variables`(`id`,`algo_id`,`var_key`,`var_value`) values (86,24,'pl_yearly_denyPulpOnAdult','1'),(87,24,'db_yearly_denyPulpOnAdult','1'),(89,27,'db_daily_anesthesiaDangDose','1'),(88,27,'pl_dialy_anesthesiaDangDose','1'),(90,27,'pl_monthly_anesthesiaDangDose','1'),(91,27,'db_monthly_anesthesiaDangDose','1'),(92,27,'pl_yearly_anesthesiaDangDose','1'),(93,27,'db_yearly_anesthesiaDangDose','1'),(94,2,'pl_daily_dwp','1'),(95,2,'pl_monthly_dwp','1'),(96,2,'pl_yearly_dwp','1'),(97,2,'db_daily_dwp','1'),(98,2,'db_monthly_dwp','1'),(99,2,'db_yearly_dwp','1'),(100,18,'pl_daily_extUpcodeAxiomatic','1'),(101,18,'db_daily_extUpcodeAxiomatic','1'),(102,18,'pl_monthly_extUpcodeAxiomatic','1'),(103,18,'db_monthly_extUpcodeAxiomatic','1'),(104,18,'pl_yearly_extUpcodeAxiomatic','1'),(105,18,'db_yearly_extUpcodeAxiomatic','1');
insert  into `t_global_variables`(`id`,`algo_id`,`var_key`,`var_value`) values (106,4,'pl_daily_impAge','1'),(107,4,'pl_monthly_impAge','1'),(108,4,'pl_yearly_impAge','1'),(109,4,'db_daily_impAge','1'),(110,4,'db_monthly_impAge','1'),(111,4,'db_yearly_impAge','1'),(112,20,'db_monthly_adjFillingCodeDist','1'),(113,20,'db_yearly_adjFillingCodeDist','1'),(114,19,'db_yearly_overactInactCodeDist','1'),(115,17,'db_yearly_simpCompExtCodeDist','1');

/*Table structure for table `t_globlal_check_table_status` */

DROP TABLE IF EXISTS `t_globlal_check_table_status`;

CREATE TABLE `t_globlal_check_table_status` (
  `algo_id` int(11) DEFAULT '0',
  `table_name` varchar(100) DEFAULT 'NIL',
  `table_exists` tinyint(1) DEFAULT '0',
  `table_populated` tinyint(1) DEFAULT '0',
  `total_records` bigint(20) DEFAULT '0'
) ENGINE=InnoDB DEFAULT CHARSET=latin1;

/*Data for the table `t_globlal_check_table_status` */

insert  into `t_globlal_check_table_status`(`algo_id`,`table_name`,`table_exists`,`table_populated`,`total_records`) values (20,'results_adjacent_filling_each_attend_yearly',1,1,10294),(20,'results_adjacent_filling_each_attend_monthly',1,1,44680),(20,'results_adjacent_filling_each_attend_weekly',1,1,71621),(23,'results_cbu',1,1,47545),(25,'results_deny_otherxrays_if_fmx_done',1,1,795893),(26,'results_deny_pulp_on_adult_full_endo',1,1,34266),(24,'results_deny_pulpotomy_on_adult',1,1,8024),(17,'results_ext_code_distribution',1,1,9183),(15,'results_full_mouth_xrays',1,1,127491),(7,'results_multi_doctor',1,1,290),(21,'results_over_use_of_b_or_l_filling',1,1,45770),(13,'results_perio_scaling_4a',1,1,39409),(11,'results_primary_tooth_ext',1,1,24682),(22,'results_sealants_instead_of_filling',1,1,13178),(14,'results_simple_prophy_4b',1,1,42182),(12,'results_third_molar',1,1,15199),(1,'pic_doctor_stats_daily',1,1,676066);
insert  into `t_globlal_check_table_status`(`algo_id`,`table_name`,`table_exists`,`table_populated`,`total_records`) values (2,'dwp_doctor_stats_daily',1,1,676066),(19,'overactive_code_distribution_yearly_by_attend',1,1,700),(19,'overactive_inactive_yearly',1,1,2813),(18,'surg_ext_final_results',1,1,29759),(0,'procedure_performed',1,1,4731372),(17,'results_ext_code_distribution_all_meansd',1,1,39),(27,'results_anesthesia_dangerous_dose',1,1,418023),(27,'pl_anesthesia_dangerous_dose_stats_daily',1,1,331095),(27,'pl_anesthesia_dangerous_dose_stats_monthly',1,1,94862),(27,'pl_anesthesia_dangerous_dose_stats_yearly',1,1,19765),(1,'pic_doctor_stats_monthly',1,1,133077),(26,'pl_deny_pulp_on_adult_full_endo_stats_daily',1,1,28141),(26,'pl_deny_pulp_on_adult_full_endo_stats_monthly',1,1,18853),(26,'pl_deny_pulp_on_adult_full_endo_stats_yearly',1,1,6365);
insert  into `t_globlal_check_table_status`(`algo_id`,`table_name`,`table_exists`,`table_populated`,`total_records`) values (1,'pic_doctor_stats_yearly',1,1,30891),(2,'dwp_doctor_stats_monthly',1,1,133077),(2,'dwp_doctor_stats_yearly',1,1,30891),(7,'pl_multi_doctor_stats_daily',1,1,179),(7,'pl_multi_doctor_stats_monthly',1,1,177),(7,'pl_multi_doctor_stats_yearly',1,1,154),(8,'overactive_inactive',1,1,692658),(8,'overactive_inactive_yearly',1,1,2813),(25,'pl_deny_otherxrays_if_fmx_done_stats_monthly',1,1,85857),(25,'pl_deny_otherxrays_if_fmx_done_stats_daily',1,1,289662),(25,'pl_deny_otherxrays_if_fmx_done_stats_yearly',1,1,19498),(24,'pl_deny_pulp_on_adult_stats_yearly',1,1,1999),(11,'pl_primary_tooth_stats_daily',1,1,13046),(24,'pl_deny_pulp_on_adult_stats_daily',1,1,5094),(24,'pl_deny_pulp_on_adult_stats_monthly',1,1,4145);
insert  into `t_globlal_check_table_status`(`algo_id`,`table_name`,`table_exists`,`table_populated`,`total_records`) values (11,'pl_primary_tooth_stats_monthly',1,1,9211),(11,'pl_primary_tooth_stats_yearly',1,1,3835),(12,'pl_third_molar_stats_daily',1,1,5575),(12,'pl_third_molar_stats_monthly',1,1,4161),(23,'pl_cbu_stats_yearly',1,1,7826),(23,'pl_cbu_stats_monthly',1,1,26756),(23,'pl_cbu_stats_daily',1,1,39915),(13,'pl_perio_scaling_stats_daily',1,1,15194),(13,'pl_perio_scaling_stats_monthly',1,1,10874),(13,'pl_perio_scaling_stats_yearly',1,1,4862),(14,'pl_simple_prophy_stats_daily',1,1,37244),(14,'pl_simple_prophy_stats_monthly',1,1,23780),(14,'pl_simple_prophy_stats_yearly',1,1,6408),(15,'pl_fmx_stats_daily',1,1,99553),(15,'pl_fmx_stats_monthly',1,1,51291),(15,'pl_fmx_stats_yearly',1,1,14769);
insert  into `t_globlal_check_table_status`(`algo_id`,`table_name`,`table_exists`,`table_populated`,`total_records`) values (16,'results_complex_perio',1,1,4654),(16,'pl_complex_perio_stats_yearly',1,1,1283),(16,'pl_complex_perio_stats_monthly',1,1,2798),(16,'pl_complex_perio_stats_daily',1,1,4013),(18,'pl_ext_upcode_axiomatic_stats_daily',1,1,17475),(18,'pl_ext_upcode_axiomatic_stats_monthly',1,1,13368),(18,'pl_ext_upcode_axiomatic_stats_yearly',1,1,5599),(21,'pl_over_use_of_b_or_l_filling_stats_daily',1,1,32733),(21,'pl_over_use_of_b_or_l_filling_stats_monthly',1,1,24050),(21,'pl_over_use_of_b_or_l_filling_stats_yearly',1,1,7997),(22,'pl_sealants_instead_of_filling_stats_daily',1,1,8653),(22,'pl_sealants_instead_of_filling_stats_monthly',1,1,7148),(22,'pl_sealants_instead_of_filling_stats_yearly',1,1,3553);
insert  into `t_globlal_check_table_status`(`algo_id`,`table_name`,`table_exists`,`table_populated`,`total_records`) values (0,'pic_dwp_anesthesia_adjustments',1,1,417343),(0,'ref_standard_procedures',1,1,705),(7,'src_multiple_claims',1,1,125),(11,'src_primary_tooth_ext',1,1,24682),(12,'src_ext_3rd_molar',1,1,15199),(13,'src_perio_scaling_4a',1,1,87503),(14,'src_simple_prophy_4b',1,1,110251),(15,'src_full_mouth_xrays',1,1,259216),(16,'src_complex_perio',1,1,792536),(17,'src_ext_code_distribution',1,1,76840),(18,'ext_upcode_procedure_performed_final',1,1,265471),(19,'overactive_inactive',1,1,692658),(20,'src_adjacent_filling',1,1,280718),(21,'src_over_use_of_b_or_l_history',1,1,224664),(22,'src_sealants_instead_of_filling_data_set_a',1,1,13178),(23,'cbu_procedure_performed',1,1,832053);
insert  into `t_globlal_check_table_status`(`algo_id`,`table_name`,`table_exists`,`table_populated`,`total_records`) values (24,'src_deny_pulpotomy_algo_on_adult',1,1,52696),(25,'src_deny_otherxrays_if_fmx_done',1,1,819987),(26,'src_deny_pulpotomy_algo_on_adult',1,1,52696),(27,'src_anesthesia_dangerous_dose',1,1,981454);

/* Function  structure for function  `t_check_if_table_exists_global_fun` */

/*!50003 DROP FUNCTION IF EXISTS `t_check_if_table_exists_global_fun` */;
DELIMITER $$

/*!50003 CREATE FUNCTION `t_check_if_table_exists_global_fun`(t_name text(100)) RETURNS tinyint(1)
BEGIN
	declare res bool default false;
	declare db_name text(100);
	declare count_ int default 0;
	select var_value into db_name from test_cases_2.t_global_variables where var_key='db_name_under_test' limit 1;
	
	SELECT count(*) into count_ FROM information_schema.`TABLES` WHERE table_name=t_name AND table_schema=db_name;
	
	if(count_>0) then
		set res=true;
	else
		set res=false;
	end if;
	
	return res;
    END */$$
DELIMITER ;

/* Function  structure for function  `t_check_if_table_not_empty_global_fun` */

/*!50003 DROP FUNCTION IF EXISTS `t_check_if_table_not_empty_global_fun` */;
DELIMITER $$

/*!50003 CREATE FUNCTION `t_check_if_table_not_empty_global_fun`(t_name text(100)) RETURNS tinyint(1)
BEGIN
	DECLARE res BOOL DEFAULT FALSE;
	DECLARE db_name TEXT(100) DEFAULT '';
	DECLARE count_ INT DEFAULT 0;
	
	SELECT var_value INTO db_name FROM test_cases_2.t_global_variables WHERE var_key='db_name_under_test' LIMIT 1;
	
	SELECT TABLE_ROWS INTO count_ FROM information_schema.`TABLES` WHERE TABLE_NAME=t_name AND table_schema=db_name  LIMIT 1;
	
	IF(count_>0) THEN
		SET res=TRUE;
	ELSE
		SET res=FALSE;
	END IF;
	
	RETURN res;
    END */$$
DELIMITER ;

/* Function  structure for function  `t_check_recovered_money` */

/*!50003 DROP FUNCTION IF EXISTS `t_check_recovered_money` */;
DELIMITER $$

/*!50003 CREATE FUNCTION `t_check_recovered_money`(in_table_name varchar(200)) RETURNS tinyint(1)
begin
	-- call `t_check_table_status`();
	return 0;
end */$$
DELIMITER ;

/* Procedure structure for procedure `t_00_pic_dwp_anesthesia_ByPatient_test_table_gen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_00_pic_dwp_anesthesia_ByPatient_test_table_gen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_00_pic_dwp_anesthesia_ByPatient_test_table_gen`(out success Bool)
BEGIN
	declare percent_value decimal(4,2);
	DECLARE total_count ,temp_count INT;
        DECLARE sample_count INT;
        
        
        drop table if exists t_temp_pic_dwp_anesthesia_ByPatient_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_pic_dwp_anesthesia_ByPatient_test_table` (
	  
		`id` BIGINT(20) NOT NULL AUTO_INCREMENT,
		`res_id` BIGINT(10) ZEROFILL NOT NULL,
		`attend` varchar(20) Default Null,
		`mid` VARCHAR(50) DEFAULT NULL,
		`date_of_service` datetime default Null,
		
		`actual_per_tooth_service_adj` INT(2) ZEROFILL default 0,
		`expected_per_tooth_service_adj` INT(2) ZEROFILL default 0,
		
		actual_per_area_service_adj int(2) zerofill default 0 ,
		expected_per_area_service_adj INT(2) ZEROFILL default 0,		
		actual_other_service_adj INT(2) ZEROFILL default 0,
		expected_other_service_adj INT(2) ZEROFILL default 0,
		actual_total_adj INT(2) ZEROFILL NOT NULL default 0,
		expected_total_adj INT(2) ZEROFILL default 0,
		`test_status` bool Default Null ,
		`test_detail` TINYTEXT DEFAULT NULL,
		PRIMARY KEY (`id`),
		KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_pic_dwp_anesthesia_ByPatient_test_table;
        
       
		select var_value INTO percent_value from test_cases_2.t_global_variables  where var_key='anesthesia_by_patient_weightage'; 
		
		
		SET total_count=0;
		SET sample_count=0;
		
		SELECT COUNT(*) into total_count FROM emihealth_final. `pic_dwp_anesthesia_adjustments` where isactive=1;
		
		IF(total_count < 100) then
			set sample_count=total_count;
		else
			set sample_count=(total_count*percent_value)/100;
		end if;
		
		insert into test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table 
			(
				res_id,
				attend,
				mid,
				date_of_service,
				actual_per_tooth_service_adj,
				actual_per_area_service_adj,
				actual_other_service_adj,
				actual_total_adj
			) 
		select  
			
				id,
				attend,
				mid,
				date_of_service,
				final_arch_u_adjustment+final_arch_l_adjustment ,
				per_area_services_adjustment,
				other_services_adjustment,
				total_adjustment
			
		FROM emihealth_final.pic_dwp_anesthesia_adjustments 
		where isactive=1 ORDER BY RAND() limit sample_count;
		-- WHERE isactive=1 and year(date_of_service) = 2015;
		
	
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_pic_dwp_anesthesia_ByPatient_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_00_pic_dwp_anesthesia_ByPatient_validation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_00_pic_dwp_anesthesia_ByPatient_validation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_00_pic_dwp_anesthesia_ByPatient_validation`(OUT success int ,OUT test_status_o BOOL,OUT test_detail TINYTEXT)
BEGIN
 DECLARE finished INTEGER DEFAULT 0;
  
  -- -----------------------------------------------------------------
  -- Variables Below Are Used For Holding Data From Test Table
  -- -----------------------------------------------------------------
  DECLARE t_id BIGINT(20) default 0;
  declare t_attend varchar(20) default '';
  DECLARE t_mid VARCHAR(50) default '';
  declare t_dos dateTime default null;
  
  -- -----------------------------------------------------------------
  -- Variables Below Are Used With In Loop For Pocessing
  -- -----------------------------------------------------------------  
  declare perTooth_count_distQuad_LA, perTooth_count_distTeeth_UL_Quad,perTooth_count_distTeeth_UR_Quad,perTooth_total_min int default 0; -- Variables For Per Tooth Service
  Declare perArea_count_distQuad,perArea_total_min int Default 0; -- Variables For Per Area Service
  declare allOtherService_count, allOtherService_total_min int Default 0;-- Variables fro All Other  Services
  declare minTable_count int default 0;
  
   
  -- -----------------------------------------------------------------
  -- Variables Below Are Used In Marking Ambigeous Results
  -- -----------------------------------------------------------------
  declare _test_detail tinytext default "OK";
  DECLARE temp_count INT DEFAULT 0;
  DECLARE count_total_records,count_defective_records INT DEFAULT 0;
  
  
  -- ------------------------------------------------------------------
  
  DECLARE test_row_cursor CURSOR FOR 
		    SELECT id,attend,mid,date_of_service FROM test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
    -- creating Mini table
  
  DROP TABLE IF EXISTS t_temp_pic_dwp_anesthesia_mini_table;
  CREATE TABLE t_temp_pic_dwp_anesthesia_mini_table
  (
	MID  VARCHAR(50) DEFAULT NULL,
	proc_code VARCHAR(50) DEFAULT NULL,
	tooth_no VARCHAR(5) DEFAULT NULL,
	quadrent VARCHAR(5) NOT NULL,
	arch VARCHAR(5) NOT NULL,
	U ENUM('Y','N') DEFAULT NULL,
	V ENUM('Y','N') DEFAULT NULL,
	INDEX UV (U,V,tooth_no)
	
  );
  -- ===>>ALGO CORE PROCESSING STARTS
  OPEN test_row_cursor ;
  get_test_row :LOOP
		    -- Setting Up Test Variables
		    set t_id =0;   set t_attend='';   set t_mid=''; 
		    
		    FETCH test_row_cursor INTO  t_id, t_attend, t_mid,t_dos;
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    -- Checking Data From Test Table Is Valid Or Not		    
		    -- ---------------------------------------------------------------------- IF # A STARTS -- Checking Data Is Valid Or Not -------------------------------------------------------------------  
		    if(t_attend='' or t_dos='' or t_mid='' or t_attend is null or t_dos is null or t_mid is null ) then
			UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
			set	expected_per_tooth_service_adj = -1,
				expected_per_area_service_adj = -1,
				expected_other_service_adj = -1,
				expected_total_adj = -1,
				test_detail = 'Invalid Data.'
			where	id=t_id;    
		    else
			-- set success=t_id;
			TRUNCATE TABLE t_temp_pic_dwp_anesthesia_mini_table;
			insert into test_cases_2.t_temp_pic_dwp_anesthesia_mini_table(MID,proc_code,tooth_no,quadrent,arch,U,V)
			
				SELECT 
					a.`mid`,
					a.proc_code, 
					a.`tooth_no`,
					a.`quadrent`,
					a.`arch`,
					b.`per_tooth_anesthesia_adjustment` AS U, 
					b.`per_area_anesthesia_adjustment` AS V
				FROM test_cases_2.t_pic_dwp_ProPerf AS a INNER JOIN emihealth_final.ref_standard_procedures AS b ON a.`proc_code`=b.`pro_code`  
				WHERE 
					a.`attend`=t_attend AND 
					a.date_of_service=t_dos AND 
					a.`mid`=t_mid AND
					-- a.`is_invalid`= 0 AND -- Not needed in custom procedure_performed
					a.`paid_money` > 0
					;
			-- Checking Min Table IS Empty O Not.
			set minTable_count=0;
			select	count(*) into minTable_count
			from 	t_temp_pic_dwp_anesthesia_mini_table;
			-- -------------------------------------------------------------- IF # B Starts -- Checking Min Table Is Empty -------------------------------------------------------------- 
			if(minTable_count=0) then
				UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
				SET	expected_per_tooth_service_adj = -2,
					expected_per_area_service_adj = -2,
					expected_other_service_adj = -2,
					expected_total_adj = -2,
					test_detail = 'Mini TABLE IS Empty.'
				WHERE	id=t_id;
			else
				
				-- =================================================
				-- 	PER TOOTH CALCULATION WHERE U=Y and V=Y
				-- =================================================
				set perTooth_count_distQuad_LA = 0;
				set perTooth_count_distTeeth_UL_Quad = 0;
				set perTooth_count_distTeeth_UR_Quad =0;
				set perTooth_total_min =0;
				
				-- Chunck A
				select	count(distinct(quadrent))
				into 	perTooth_count_distQuad_LA
				from 	t_temp_pic_dwp_anesthesia_mini_table
				where 	U='Y'  and
					arch='L' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
					
				set perTooth_total_min = perTooth_total_min + perTooth_count_distQuad_LA;
				
				-- Chunck B
				SELECT	COUNT(DISTINCT(tooth_no))
				INTO 	perTooth_count_distTeeth_UL_Quad
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='Y' AND
					arch='U' and quadrent='UL' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
					
				if(perTooth_count_distTeeth_UL_Quad between 1 and 3)then
					set perTooth_total_min = perTooth_total_min +1;
				end if;
				IF(perTooth_count_distTeeth_UL_Quad BETWEEN 4 AND 6)THEN
					SET perTooth_total_min = perTooth_total_min +2;
				END IF;
				IF(perTooth_count_distTeeth_UL_Quad BETWEEN 7 AND 8)THEN
					SET perTooth_total_min = perTooth_total_min +3;
				END IF;
				
				-- Chunck C
				SELECT	COUNT(DISTINCT(tooth_no))
				INTO 	perTooth_count_distTeeth_UR_Quad
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='Y'  AND
					arch='U' AND quadrent='UR' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 1 AND 3)THEN
					SET perTooth_total_min = perTooth_total_min +1;
				END IF;
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 4 AND 6)THEN
					SET perTooth_total_min = perTooth_total_min +2;
				END IF;
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 7 AND 8)THEN
					SET perTooth_total_min = perTooth_total_min +3;
				END IF;
				/*
				-- =================================================
				-- 	PER TOOTH CALCULATION WHERE U=Y and V=Y
				-- =================================================
				SET perTooth_count_distQuad_LA = 0;
				SET perTooth_count_distTeeth_UL_Quad = 0;
				SET perTooth_count_distTeeth_UR_Quad =0;
				
				-- Chunck A
				SELECT	COUNT(DISTINCT(quadrent))
				INTO 	perTooth_count_distQuad_LA
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='Y' AND V='N' AND
					arch='L' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
				SET perTooth_total_min = perTooth_total_min + perTooth_count_distQuad_LA;
				
				-- Chunck B
				SELECT	COUNT(DISTINCT(tooth_no))
				INTO 	perTooth_count_distTeeth_UL_Quad
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='Y' AND V='N' AND
					arch='U' AND quadrent='UL' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
					
				IF(perTooth_count_distTeeth_UL_Quad BETWEEN 1 AND 3)THEN
					SET perTooth_total_min = perTooth_total_min +1;
				END IF;
				IF(perTooth_count_distTeeth_UL_Quad BETWEEN 4 AND 6)THEN
					SET perTooth_total_min = perTooth_total_min +2;
				END IF;
				IF(perTooth_count_distTeeth_UL_Quad BETWEEN 7 AND 8)THEN
					SET perTooth_total_min = perTooth_total_min +3;
				END IF;
				
				-- Chunck C
				SELECT	COUNT(DISTINCT(tooth_no))
				INTO 	perTooth_count_distTeeth_UR_Quad
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='Y' AND V='N' AND
					arch='U' AND quadrent='UR' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
					
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 1 AND 3)THEN
					SET perTooth_total_min = perTooth_total_min +1;
				END IF;
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 4 AND 6)THEN
					SET perTooth_total_min = perTooth_total_min +2;
				END IF;
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 7 AND 8)THEN
					SET perTooth_total_min = perTooth_total_min +3;
				END IF;
				*/
				
				-- =================================================
				-- 	PER AREA CALCULATION WHERE U=N and V=Y
				-- =================================================
				SET perArea_count_distQuad=0;
				SET perArea_total_min = 0;
				
				SELECT	COUNT(DISTINCT(quadrent))
				INTO 	perArea_count_distQuad
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='N' AND V='Y' AND
					(tooth_no != '' AND quadrent !='' AND arch !='');
				
				SET perArea_total_min = perArea_count_distQuad;
				
				
				-- =================================================
				-- 	All OTHER SERVICERS CALCULATION 
				-- =================================================
				SET allOtherService_count = 0;
				SET allOtherService_total_min=0;
				
				SELECT	COUNT(DISTINCT(proc_code))
				INTO 	allOtherService_count
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	((U='N' AND V='Y') OR (U='Y' AND V='N')) AND
					tooth_no != '' AND quadrent !='' AND arch !='';
				
				SET allOtherService_total_min = allOtherService_count;
				
				
				-- Updating Test Table
				UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
				SET	expected_per_tooth_service_adj = perTooth_total_min,
					expected_per_area_service_adj = perArea_total_min,
					expected_other_service_adj = allOtherService_total_min,
					expected_total_adj = perTooth_total_min+perArea_total_min+allOtherService_total_min,
					test_detail = ''
				WHERE	id=t_id;
			END IF;
			-- -------------------------------------------------------------- IF # B Ends -- Checking Min Table Is Empty ----------------------------------------------------------------
		    END IF;		    
		    -- ---------------------------------------------------------------------- IF # A ENDS -- Checking Data Is Valid Or Not ---------------------------------------------------------------------- 
			
	        END LOOP ;
  CLOSE test_row_cursor ;
  
 -- <<=== ALGO CORE PROCESSING ENDS
 
 -- MARKING AMBIGUOUS RECORDS(status column and test detail)
	-- Chunck A
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=1,
	test_detail='OK.'
	WHERE `actual_per_tooth_service_adj` = `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` = `expected_per_area_service_adj` AND
	`actual_other_service_adj` = `expected_other_service_adj`;
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(perTooth,perArea,allOther) and Expected(perTooth,perArea,allOther) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` != `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` != `expected_per_area_service_adj` AND
	`actual_other_service_adj` != `expected_other_service_adj`;
	-- ---------------------------------------------------------------------------------
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(perTooth,perArea) and Expected(perTooth,perArea) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` != `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` != `expected_per_area_service_adj` AND
	`actual_other_service_adj` = `expected_other_service_adj`;
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(perArea,allOther) and Expected(perArea,allOther) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` = `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` != `expected_per_area_service_adj` AND
	`actual_other_service_adj` != `expected_other_service_adj`;
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(perTooth,allOther) and Expected(perTooth,allOther) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` != `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` = `expected_per_area_service_adj` AND
	`actual_other_service_adj` != `expected_other_service_adj`;
	-- -------------------------------------------------------------------------------------------------------------------
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(perTooth) and Expected(perTooth) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` != `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` = `expected_per_area_service_adj` AND
	`actual_other_service_adj` = `expected_other_service_adj`;
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(perArea) and Expected(perArea) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` = `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` != `expected_per_area_service_adj` AND
	`actual_other_service_adj` = `expected_other_service_adj`;
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(allOther) and Expected(perTooth,allOther) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` = `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` = `expected_per_area_service_adj` AND
	`actual_other_service_adj` != `expected_other_service_adj`;
	
	-- ------------------------------------------------------------------------------------------------------------------
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table WHERE test_status=0;
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table WHERE  test_status IS NULL;
	IF(temp_count != 0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		
		IF(count_defective_records=0) THEN
			SET test_status_o=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status_o=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
	
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_00_pic_dwp_anesthesia_ByPatient_validation2` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_00_pic_dwp_anesthesia_ByPatient_validation2` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_00_pic_dwp_anesthesia_ByPatient_validation2`(OUT success int ,OUT test_status_o BOOL,OUT test_detail TINYTEXT)
BEGIN
 DECLARE finished INTEGER DEFAULT 0;
  
  -- -----------------------------------------------------------------
  -- Variables Below Are Used For Holding Data From Test Table
  -- -----------------------------------------------------------------
  DECLARE t_id BIGINT(20) default 0;
  declare t_attend varchar(20) default '';
  DECLARE t_mid VARCHAR(50) default '';
  declare t_dos dateTime default null;
  
  -- -----------------------------------------------------------------
  -- Variables Below Are Used With In Loop For Pocessing
  -- -----------------------------------------------------------------  
  declare perTooth_count_distQuad_LA, perTooth_count_distTeeth_UL_Quad,perTooth_count_distTeeth_UR_Quad,perTooth_total_min int default 0; -- Variables For Per Tooth Service
  Declare perArea_count_distQuad,perArea_total_min int Default 0; -- Variables For Per Area Service
  declare allOtherService_count, allOtherService_total_min int Default 0;-- Variables fro All Other  Services
  declare minTable_count int default 0;
  
   
  -- -----------------------------------------------------------------
  -- Variables Below Are Used In Marking Ambigeous Results
  -- -----------------------------------------------------------------
  declare _test_detail tinytext default "OK";
  DECLARE temp_count INT DEFAULT 0;
  DECLARE count_total_records,count_defective_records INT DEFAULT 0;
  
  
  -- ------------------------------------------------------------------
  
  DECLARE test_row_cursor CURSOR FOR 
		    SELECT id,attend,mid,date_of_service FROM test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
    -- creating Mini table
  
  DROP TABLE IF EXISTS t_temp_pic_dwp_anesthesia_mini_table;
  CREATE TABLE t_temp_pic_dwp_anesthesia_mini_table
  (
	MID  VARCHAR(50) DEFAULT NULL,
	proc_code VARCHAR(50) DEFAULT NULL,
	tooth_no VARCHAR(5) DEFAULT NULL,
	quadrent VARCHAR(5) NOT NULL,
	arch VARCHAR(5) NOT NULL,
	U ENUM('Y','N') DEFAULT NULL,
	V ENUM('Y','N') DEFAULT NULL,
	INDEX UV (U,V,tooth_no)
	
  );
  -- ===>>ALGO CORE PROCESSING STARTS
  OPEN test_row_cursor ;
  get_test_row :LOOP
		    -- Setting Up Test Variables
		    set t_id =0;   set t_attend='';   set t_mid=''; 
		    
		    FETCH test_row_cursor INTO  t_id, t_attend, t_mid,t_dos;
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    -- Checking Data From Test Table Is Valid Or Not		    
		    -- ---------------------------------------------------------------------- IF # A STARTS -- Checking Data Is Valid Or Not -------------------------------------------------------------------  
		    if(t_attend='' or t_dos='' or t_mid='' or t_attend is null or t_dos is null or t_mid is null ) then
			UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
			set	expected_per_tooth_service_adj = -1,
				expected_per_area_service_adj = -1,
				expected_other_service_adj = -1,
				expected_total_adj = -1,
				test_detail = 'Invalid Data.'
			where	id=t_id;    
		    else
			-- set success=t_id;
			TRUNCATE TABLE t_temp_pic_dwp_anesthesia_mini_table;
			insert into test_cases_2.t_temp_pic_dwp_anesthesia_mini_table(MID,proc_code,tooth_no,quadrent,arch,U,V)
			
				SELECT 
					a.`mid`,
					a.proc_code, 
					a.`tooth_no`,
					a.`quadrent`,
					a.`arch`,
					b.`per_tooth_anesthesia_adjustment` AS U, 
					b.`per_area_anesthesia_adjustment` AS V
				FROM test_cases_2.t_pic_dwp_ProPerf AS a INNER JOIN emihealth_final.ref_standard_procedures AS b ON a.`proc_code`=b.`pro_code`  
				WHERE 
					a.`attend`=t_attend AND 
					a.date_of_service=t_dos AND 
					a.`mid`=t_mid ;
				--      a.`is_invalid`=0 ;
			-- Checking Min Table IS Empty O Not.
			set minTable_count=0;
			select	count(*) into minTable_count
			from 	t_temp_pic_dwp_anesthesia_mini_table;
			-- -------------------------------------------------------------- IF # B Starts -- Checking Min Table Is Empty -------------------------------------------------------------- 
			if(minTable_count=0) then
				UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
				SET	expected_per_tooth_service_adj = -2,
					expected_per_area_service_adj = -2,
					expected_other_service_adj = -2,
					expected_total_adj = -2,
					test_detail = 'Mini TABLE IS Empty.'
				WHERE	id=t_id;
			else
				
				-- =================================================
				-- 	PER TOOTH CALCULATION WHERE U=Y and V=Y
				-- =================================================
				set perTooth_count_distQuad_LA = 0;
				set perTooth_count_distTeeth_UL_Quad = 0;
				set perTooth_count_distTeeth_UR_Quad =0;
				set perTooth_total_min =0;
				
				-- Chunck A
				select	count(distinct(quadrent))
				into 	perTooth_count_distQuad_LA
				from 	t_temp_pic_dwp_anesthesia_mini_table
				where 	U='Y' and V='Y' and
					arch='L' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
					
				set perTooth_total_min = perTooth_total_min + perTooth_count_distQuad_LA;
				
				-- Chunck B
				SELECT	COUNT(DISTINCT(tooth_no))
				INTO 	perTooth_count_distTeeth_UL_Quad
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='Y' AND V='Y' AND
					arch='U' and quadrent='UL' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
					
				if(perTooth_count_distTeeth_UL_Quad between 1 and 3)then
					set perTooth_total_min = perTooth_total_min +1;
				end if;
				IF(perTooth_count_distTeeth_UL_Quad BETWEEN 4 AND 6)THEN
					SET perTooth_total_min = perTooth_total_min +2;
				END IF;
				IF(perTooth_count_distTeeth_UL_Quad BETWEEN 7 AND 8)THEN
					SET perTooth_total_min = perTooth_total_min +3;
				END IF;
				
				-- Chunck C
				SELECT	COUNT(DISTINCT(tooth_no))
				INTO 	perTooth_count_distTeeth_UR_Quad
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='Y' AND V='Y' AND
					arch='U' AND quadrent='UR' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 1 AND 3)THEN
					SET perTooth_total_min = perTooth_total_min +1;
				END IF;
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 4 AND 6)THEN
					SET perTooth_total_min = perTooth_total_min +2;
				END IF;
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 7 AND 8)THEN
					SET perTooth_total_min = perTooth_total_min +3;
				END IF;
				
				-- =================================================
				-- 	PER TOOTH CALCULATION WHERE U=Y and V=Y
				-- =================================================
				SET perTooth_count_distQuad_LA = 0;
				SET perTooth_count_distTeeth_UL_Quad = 0;
				SET perTooth_count_distTeeth_UR_Quad =0;
				
				-- Chunck A
				SELECT	COUNT(DISTINCT(quadrent))
				INTO 	perTooth_count_distQuad_LA
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='Y' AND V='N' AND
					arch='L' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
				SET perTooth_total_min = perTooth_total_min + perTooth_count_distQuad_LA;
				
				-- Chunck B
				SELECT	COUNT(DISTINCT(tooth_no))
				INTO 	perTooth_count_distTeeth_UL_Quad
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='Y' AND V='N' AND
					arch='U' AND quadrent='UL' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
					
				IF(perTooth_count_distTeeth_UL_Quad BETWEEN 1 AND 3)THEN
					SET perTooth_total_min = perTooth_total_min +1;
				END IF;
				IF(perTooth_count_distTeeth_UL_Quad BETWEEN 4 AND 6)THEN
					SET perTooth_total_min = perTooth_total_min +2;
				END IF;
				IF(perTooth_count_distTeeth_UL_Quad BETWEEN 7 AND 8)THEN
					SET perTooth_total_min = perTooth_total_min +3;
				END IF;
				
				-- Chunck C
				SELECT	COUNT(DISTINCT(tooth_no))
				INTO 	perTooth_count_distTeeth_UR_Quad
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='Y' AND V='N' AND
					arch='U' AND quadrent='UR' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
					
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 1 AND 3)THEN
					SET perTooth_total_min = perTooth_total_min +1;
				END IF;
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 4 AND 6)THEN
					SET perTooth_total_min = perTooth_total_min +2;
				END IF;
				IF(perTooth_count_distTeeth_UR_Quad BETWEEN 7 AND 8)THEN
					SET perTooth_total_min = perTooth_total_min +3;
				END IF;
				
				
				-- =================================================
				-- 	PER AREA CALCULATION WHERE U=N and V=Y
				-- =================================================
				set perArea_count_distQuad=0;
				set perArea_total_min = 0;
				
				SELECT	COUNT(DISTINCT(quadrent))
				INTO 	perArea_count_distQuad
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	U='N' AND V='Y' and
					(tooth_no != '' AND quadrent !='' AND arch !='');
				
				set perArea_total_min = perArea_count_distQuad;
				
				
				-- =================================================
				-- 	All OTHER SERVICERS CALCULATION 
				-- =================================================
				set allOtherService_count = 0;
				set allOtherService_total_min=0;
				
				SELECT	COUNT(DISTINCT(proc_code))
				INTO 	allOtherService_count
				FROM 	t_temp_pic_dwp_anesthesia_mini_table
				WHERE 	((U='N' AND V='Y') or (U='Y' AND V='N')) and
					tooth_no != '' and quadrent !='' and arch !='';
				
				set allOtherService_total_min = allOtherService_count;
				
				
				-- Updating Test Table
				UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
				SET	expected_per_tooth_service_adj = perTooth_total_min,
					expected_per_area_service_adj = perArea_total_min,
					expected_other_service_adj = allOtherService_total_min,
					expected_total_adj = perTooth_total_min+perArea_total_min+allOtherService_total_min,
					test_detail = ''
				WHERE	id=t_id;
			end if;
			-- -------------------------------------------------------------- IF # B Ends -- Checking Min Table Is Empty ----------------------------------------------------------------
		    end if;		    
		    -- ---------------------------------------------------------------------- IF # A ENDS -- Checking Data Is Valid Or Not ---------------------------------------------------------------------- 
			
	        END LOOP ;
  CLOSE test_row_cursor ;
  
 -- <<=== ALGO CORE PROCESSING ENDS
 
 -- MARKING AMBIGUOUS RECORDS(status column and test detail)
	-- Chunck A
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=1,
	test_detail='OK.'
	WHERE `actual_per_tooth_service_adj` = `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` = `expected_per_area_service_adj` AND
	`actual_other_service_adj` = `expected_other_service_adj`;
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	set	test_status=0,
	test_detail='Actual(perTooth,perArea,allOther) and Expected(perTooth,perArea,allOther) columns values are Not equal.'
	where `actual_per_tooth_service_adj` != `expected_per_tooth_service_adj` and
	`actual_per_area_service_adj` != `expected_per_area_service_adj` and
	`actual_other_service_adj` != `expected_other_service_adj`;
	-- ---------------------------------------------------------------------------------
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(perTooth,perArea) and Expected(perTooth,perArea) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` != `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` != `expected_per_area_service_adj` AND
	`actual_other_service_adj` = `expected_other_service_adj`;
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(perArea,allOther) and Expected(perArea,allOther) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` = `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` != `expected_per_area_service_adj` AND
	`actual_other_service_adj` != `expected_other_service_adj`;
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(perTooth,allOther) and Expected(perTooth,allOther) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` != `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` = `expected_per_area_service_adj` AND
	`actual_other_service_adj` != `expected_other_service_adj`;
	-- -------------------------------------------------------------------------------------------------------------------
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(perTooth) and Expected(perTooth) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` != `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` = `expected_per_area_service_adj` AND
	`actual_other_service_adj` = `expected_other_service_adj`;
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(perArea) and Expected(perArea) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` = `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` != `expected_per_area_service_adj` AND
	`actual_other_service_adj` = `expected_other_service_adj`;
	
	UPDATE test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table
	SET	test_status=0,
	test_detail='Actual(allOther) and Expected(perTooth,allOther) columns values are Not equal.'
	WHERE `actual_per_tooth_service_adj` = `expected_per_tooth_service_adj` AND
	`actual_per_area_service_adj` = `expected_per_area_service_adj` AND
	`actual_other_service_adj` != `expected_other_service_adj`;
	
	-- ------------------------------------------------------------------------------------------------------------------
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table WHERE test_status=0;
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table WHERE  test_status IS NULL;
	IF(temp_count != 0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		
		IF(count_defective_records=0) THEN
			SET test_status_o=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status_o=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
	
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_00_pic_dwp_fillup_ByPatient_test_table_gen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_00_pic_dwp_fillup_ByPatient_test_table_gen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_00_pic_dwp_fillup_ByPatient_test_table_gen`(out success Bool)
BEGIN
	declare percent_value decimal(4,2);
	DECLARE total_count ,temp_count INT;
        DECLARE sample_count int;
        
        
        drop table if exists t_temp_pic_dwp_fillup_ByPatient_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_pic_dwp_fillup_ByPatient_test_table` (
	  
		`id` BIGINT(20) NOT NULL AUTO_INCREMENT,
		`res_id` BIGINT(10) ZEROFILL NOT NULL,
		`attend` varchar(20) Default Null,
		`mid` VARCHAR(50) DEFAULT NULL,
		`date_of_service` datetime default Null,
		
		`actual_minutes_subtract` INT(2) ZEROFILL default 0,
		`expected_minutes_subtract` INT(2) ZEROFILL default 0,
		
		`test_status` bool Default Null ,
		`test_detail` TINYTEXT DEFAULT NULL,
		PRIMARY KEY (`id`),
		KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_pic_dwp_fillup_ByPatient_test_table;
        
       
		select var_value INTO percent_value FROM test_cases_2.t_global_variables  where var_key='fillup_by_patient_weightage'; 
		
		
		SET total_count=0;
		SET sample_count=0;
		
		SELECT COUNT(*) into total_count FROM emihealth_final.`pic_dwp_fillup_time_by_mid` where isactive=1;
		
		/*
		IF(total_count < 100) then
			set sample_count=total_count;
		else
			set sample_count=(total_count*percent_value)/100;
		end if;
		*/
		SET sample_count=(total_count*percent_value)/100;
		IF(sample_count < 50)THEN
			SET sample_count = 50;
		END IF;
		
		INSERT INTO test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table 
			(
				res_id,
				attend,
				MID,
				date_of_service,
				actual_minutes_subtract
			) 
		SELECT  
			
				id,
				attend,
				MID,
				date_of_service,
				minutes_subtract
			
		FROM emihealth_final.pic_dwp_fillup_time_by_mid 
		WHERE isactive=1 ORDER BY RAND() LIMIT sample_count;
		
	
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_pic_dwp_fillup_ByPatient_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_00_pic_dwp_fillup_ByPatient_validation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_00_pic_dwp_fillup_ByPatient_validation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_00_pic_dwp_fillup_ByPatient_validation`(OUT success int ,OUT test_status_out BOOL,OUT test_detail TINYTEXT)
BEGIN
 DECLARE finished INTEGER DEFAULT 0;
  
  -- -----------------------------------------------------------------
  -- Variables Below Are Used For Holding Data From Test Table
  -- -----------------------------------------------------------------
  DECLARE t_id BIGINT(20) default 0;
  declare t_attend varchar(20) default '';
  DECLARE t_mid VARCHAR(50) default '';
  declare t_dos dateTime default null;
  
  -- -----------------------------------------------------------------
  -- Variables Below Are Used With In Loop For Pocessing
  -- -----------------------------------------------------------------  
  declare count_tooth_with_surface_MorD , time_to_subtract int default 0; -- Variables For Per Tooth Service
 
  
   
  -- -----------------------------------------------------------------
  -- Variables Below Are Used In Marking Ambigeous Results
  -- -----------------------------------------------------------------
  DECLARE temp_count INT DEFAULT 0;
  DECLARE count_total_records,count_defective_records INT DEFAULT 0;
  
  DECLARE test_row_cursor CURSOR FOR 
		    SELECT id,attend,mid,date_of_service FROM test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  -- ===>>ALGO CORE PROCESSING STARTS
  OPEN test_row_cursor ;
  get_test_row :LOOP
		    -- Setting Up Test Variables
		    set t_id =0;   set t_attend='';   set t_mid=''; 
		    
		    FETCH test_row_cursor INTO  t_id, t_attend, t_mid,t_dos;
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    -- Checking Data From Test Table Is Valid Or Not		    
		    -- ---------------------------------------------------------------------- IF # A STARTS -- Checking Data Is Valid Or Not -------------------------------------------------------------------  
		    if(t_attend='' or t_dos='' or t_mid='' or t_attend is null or t_dos is null or t_mid is null ) then
			UPDATE test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table
			set	expected_minutes_subtract = -1,
				test_detail = 'Invalid Data.'
			where	id=t_id;    
		    else
			SELECT count(distinct(tooth_no))
			into 	 count_tooth_with_surface_MorD
			FROM 	emihealth_final.procedure_performed
			WHERE 	attend = t_attend AND
				MID = t_mid AND
				date_of_service = t_dos AND
				proc_code IN ('D2150', 'D2331', 'D2392') AND
				(surface NOT LIKE '%M%' and surface NOT LIKE '%D%') and
				surface !='' and (surface is not null) and tooth_no != '' and
				is_invalid=0 AND paid_money >0;
			set time_to_subtract = count_tooth_with_surface_MorD * 2;
			
			UPDATE test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table
			SET	expected_minutes_subtract = time_to_subtract
			WHERE	id=t_id;  
			
		    end if;		    
		    -- ---------------------------------------------------------------------- IF # A ENDS -- Checking Data Is Valid Or Not ---------------------------------------------------------------------- 
		
	        END LOOP ;
  CLOSE test_row_cursor ;
 -- <<=== ALGO CORE PROCESSING ENDS
	UPDATE test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table
	SET	test_status = false,
	        test_detail= 'minutes are not equal.'
	WHERE	expected_minutes_subtract != actual_minutes_subtract;
	
	UPDATE test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table
	SET	test_status = True,
	        test_detail= 'OK'
	WHERE	expected_minutes_subtract = actual_minutes_subtract;
 -- MARKING AMBIGUOUS RECORDS(status column and test detail)
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table WHERE test_status=0;
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table WHERE  test_status IS NULL;
	IF(temp_count != 0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		
		IF(count_defective_records=0) THEN
			SET test_status_out=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status_out=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
  
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_00_pic_dwp_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_00_pic_dwp_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_00_pic_dwp_MAIN`()
BEGIN
	declare tc_success int(1) default 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_00_pic_dwp_ProPerf_table_gen`(@suc);
	CALL test_cases_2.`t_00_pic_dwp_anesthesia_ByPatient_test_table_gen`(@suc);
	CALL test_cases_2.`t_00_pic_dwp_anesthesia_ByPatient_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(00
		,'Verifying anesthesia time in table[emihealth_final.pic_dwp_anesthesia_adjustments] by generating test table[test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_00_pic_dwp_ProPerf_table_gen/t_00_pic_dwp_anesthesia_ByPatient_test_table_gen/t_00_pic_dwp_anesthesia_ByPatient_validation');
	/*
	SET start_time = NOW();
	CALL test_cases_2.`t_00_pic_dwp_fillup_ByPatient_test_table_gen`(@suc);
	CALL test_cases_2.`t_00_pic_dwp_fillup_ByPatient_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(00
		,'Verifying fillup time in table[emihealth_final.pic_dwp_fillup_time_by_mid] by generating test table[test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_00_pic_dwp_fillup_ByPatient_test_table_gen/t_00_pic_dwp_fillup_ByPatient_validation');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_00_pic_dwp_multisite_table_gen`(@suc);
	CALL test_cases_2.`t_00_pic_dwp_multisite_by_patient_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(00
		,'Verifying multisite time in table[emihealth_final.pic_dwp_multisites_adjustments] by generating test table[test_cases_2.t_temp_multisite_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
		,'t_00_pic_dwp_multisite_table_gen/t_00_pic_dwp_multisite_by_patient_validation');
*/
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_00_pic_dwp_multisite_by_patient_validation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_00_pic_dwp_multisite_by_patient_validation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_00_pic_dwp_multisite_by_patient_validation`(OUT success INT ,OUT test_status_out BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  
  DECLARE t_id BIGINT(20);
  DECLARE t_attend, t_mid VARCHAR (50) DEFAULT "" ;
  DECLARE t_dos DATETIME DEFAULT "";
  
  
  
  DECLARE has_D1,has_D2,has_D3,has_D4,has_D5,has_D6,has_D7,has_D9 INT DEFAULT 0;  
  
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id, MID,attend,date_of_service FROM test_cases_2.t_temp_multisite_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id, t_mid,t_attend,t_dos;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    
		  -- D1
		  
	SELECT COUNT(*) INTO has_D1  FROM emihealth_final.`procedure_performed` WHERE MID=t_mid AND attend = t_attend and date_of_service = t_dos and is_invalid = '0' AND impossible_age_status != 'orange' AND proc_code in ('D1351','D1352');
	
	IF (has_D1 != 0) THEN 
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d1=(has_D1-1), 
		test_detail='count.'
		WHERE id=t_id;
	ELSE 	  
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d1=0, 
		test_detail='NO proc.'
		WHERE id=t_id;
	END IF ; 
	            
	            -- D2
	                     
	SELECT COUNT(*) INTO has_D2  FROM emihealth_final.`procedure_performed` WHERE MID=t_mid AND attend = t_attend AND date_of_service = t_dos AND is_invalid = '0' AND impossible_age_status != 'orange' AND proc_code between 'D2140' and 'D2999';
	IF (has_D2 != 0) THEN 
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d2=(has_D2-1)*2, 
		test_detail='count.'
		WHERE id=t_id;
	ELSE 	  
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d2=0, 
		test_detail='NO proc.'
		WHERE id=t_id;
	END IF ; 
	            
	           -- D3
	            
	SELECT COUNT(*) INTO has_D3  FROM emihealth_final.`procedure_performed` WHERE MID=t_mid AND attend = t_attend AND date_of_service = t_dos AND is_invalid = '0' AND impossible_age_status != 'orange' AND proc_code BETWEEN 'D3110' AND 'D3999';
		IF (has_D3 != 0) THEN 
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d3=(has_D3-1)*2, 
		test_detail='count.'
		WHERE id=t_id;
	ELSE 	  
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d3=0, 
		test_detail='NO proc.'
		WHERE id=t_id;
	END IF ; 
	                       
	            -- D4
	            
	SELECT COUNT(*) INTO has_D4  FROM emihealth_final.`procedure_performed` WHERE MID=t_mid AND attend = t_attend AND date_of_service = t_dos AND is_invalid = '0' AND impossible_age_status != 'orange' AND proc_code BETWEEN 'D4210' AND 'D4999';
		IF (has_D4 != 0) THEN 
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d4=(has_D4-1)*2, 
		test_detail='count.'
		WHERE id=t_id;
	ELSE 	  
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d4=0, 
		test_detail='NO proc.'
		WHERE id=t_id;
	END IF ; 
	            
	            -- D5
	            
	SELECT COUNT(*) INTO has_D5  FROM emihealth_final.`procedure_performed` WHERE MID=t_mid AND attend = t_attend AND date_of_service = t_dos AND is_invalid = '0' AND impossible_age_status != 'orange' AND proc_code BETWEEN 'D5110' AND 'D5999';
	IF (has_D5 != 0) THEN 
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d5=(has_D5-1)*2, 
		test_detail='count.'
		WHERE id=t_id;
	ELSE 	  
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d5=0, 
		test_detail='NO proc.'
		WHERE id=t_id;
	END IF ; 
	            
	            -- D6
	            
	SELECT COUNT(*) INTO has_D6  FROM emihealth_final.`procedure_performed` WHERE MID=t_mid AND attend = t_attend AND date_of_service = t_dos AND is_invalid = '0' AND impossible_age_status != 'orange' AND proc_code BETWEEN 'D6010' AND 'D6999';
	IF (has_D6 != 0) THEN 
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d6=(has_D6-1)*2, 
		test_detail='count.'
		WHERE id=t_id;
	ELSE 	  
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d6=0, 
		test_detail='NO proc.'
		WHERE id=t_id;
	END IF ; 
	            
	            -- D7
	            
	SELECT COUNT(*) INTO has_D7  FROM emihealth_final.`procedure_performed` WHERE MID=t_mid AND attend = t_attend AND date_of_service = t_dos AND is_invalid = '0' AND impossible_age_status != 'orange' AND  proc_code BETWEEN 'D7111' AND 'D7999';
		IF (has_D7 != 0) THEN 
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d7=(has_D7-1)*2, 
		test_detail='count.'
		WHERE id=t_id;
	ELSE 	  
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d7=0, 
		test_detail='NO proc.'
		WHERE id=t_id;
	END IF ; 
	            
	            
	            -- D9
	            
	SELECT COUNT(*) INTO has_D9  FROM emihealth_final.`procedure_performed` WHERE MID=t_mid AND attend = t_attend AND date_of_service = t_dos AND is_invalid = '0' and impossible_age_status != 'orange' and proc_code BETWEEN 'D9110' AND 'D9999'  ;
		IF (has_D9 != 0) THEN 
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d9=(has_D9-1), 
		test_detail='count.'
		WHERE id=t_id;
	ELSE 	  
		UPDATE test_cases_2.t_temp_multisite_test_table 
		SET expected_d9=0, 
		test_detail='NO proc.'
		WHERE id=t_id;
	END IF ; 
	            
	           -- calculating expected min to subtract    
	UPDATE test_cases_2.t_temp_multisite_test_table 
	set expected_min_to_subtract = expected_d1+expected_d2+expected_d3+expected_d4+expected_d5+expected_d6+expected_d7+expected_d9
	WHERE id=t_id;	              
	              
	            
	           
	 END LOOP ;
  CLOSE my_cursor ;
  
   -- <<=== ALGO CORE PROCESSING ENDS
	UPDATE test_cases_2.t_temp_multisite_test_table
	SET	test_status = FALSE
	WHERE	actual_d1 != expected_d1 or actual_d2 != expected_d2 OR actual_d3 != expected_d3 OR actual_d4 != expected_d4 OR
	        actual_d5 != expected_d5 or actual_d6 != expected_d6 OR actual_d7 != expected_d7 OR actual_d9 != expected_d9 or expected_min_to_subtract = actual_min_to_subtract;
	
	UPDATE test_cases_2.t_temp_multisite_test_table
	SET	test_status = TRUE
	WHERE	actual_d1 = expected_d1 and actual_d2 = expected_d2 and actual_d3 = expected_d3 and actual_d4 = expected_d4 and
	        actual_d5 = expected_d5 and actual_d6 = expected_d6  and actual_d7 = expected_d7 and actual_d9 = expected_d9 and expected_min_to_subtract = actual_min_to_subtract;
	
 -- MARKING AMBIGUOUS RECORDS(status column and test detail)
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_multisite_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_multisite_test_table WHERE test_status=0;
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_multisite_test_table WHERE  test_status IS NULL;
	IF(temp_count != 0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		
		IF(count_defective_records=0) THEN
			SET test_status_out=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status_out=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
  END */$$
DELIMITER ;

/* Procedure structure for procedure `t_00_pic_dwp_multisite_table_gen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_00_pic_dwp_multisite_table_gen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_00_pic_dwp_multisite_table_gen`(OUT success BOOL)
BEGIN
	DECLARE percent_value DECIMAL(4,2);
	DECLARE total_count ,temp_count INT;
        DECLARE sample_count INT;
        
        
        DROP TABLE IF EXISTS t_temp_multisite_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_multisite_test_table` (
	  
		`id` BIGINT(20) NOT NULL AUTO_INCREMENT,
		`res_id` BIGINT(10) ZEROFILL NOT NULL,
		`attend` VARCHAR(20) DEFAULT NULL,
		`mid` VARCHAR(50) DEFAULT NULL,
		`date_of_service` DATETIME DEFAULT NULL,
		
		actual_min_to_subtract INT(2) ZEROFILL default 0,
		expected_min_to_subtract INT(2) ZEROFILL default 0,
		
		actual_d1 INT(2) ZEROFILL default 0,
		expected_d1 INT(2) ZEROFILL default 0,	
		
		actual_d2 INT(2) ZEROFILL default 0,
		expected_d2 INT(2) ZEROFILL default 0,
		
		actual_d3 INT(2) ZEROFILL default 0,
		expected_d3 INT(2) ZEROFILL default 0,
		
		actual_d4 INT(2) ZEROFILL default 0,
		expected_d4 INT(2) ZEROFILL default 0,
		
		actual_d5 INT(2) ZEROFILL default 0,
		expected_d5 INT(2) ZEROFILL default 0,
		
		actual_d6 INT(2) ZEROFILL default 0,
		expected_d6 INT(2) ZEROFILL default 0,
		
		actual_d7 INT(2) ZEROFILL default 0,
		expected_d7 INT(2) ZEROFILL default 0,
		
		actual_d9 INT(2) ZEROFILL default 0,
		expected_d9 INT(2) ZEROFILL default 0,	
		
		`test_status` BOOL DEFAULT 0,
		`test_detail` TINYTEXT DEFAULT NULL,
		PRIMARY KEY (`id`),
		KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_multisite_test_table;
        
       
		SELECT var_value INTO percent_value FROM test_cases_2.t_global_variables  WHERE var_key='multisite_by_patient_weightage'; 
		
		
		SET total_count=0;
		SET sample_count=0;
		
		SELECT COUNT(*) INTO total_count FROM emihealth_final.`pic_dwp_multisites_adjustments` WHERE isactive=1;
		
		IF(total_count < 100) THEN
			SET sample_count=total_count;
		ELSE
			SET sample_count=(total_count*percent_value)/100;
		END IF;
		
		insert into test_cases_2.t_temp_multisite_test_table 
			(
				res_id,
				attend,
				MID,
				date_of_service,
				actual_min_to_subtract,
				actual_d1,
				actual_d2,
				actual_d3,
				actual_d4,
				actual_d5,
				actual_d6,
				actual_d7,
				actual_d9
				
			) 
		SELECT  
			
				id,
				attend,
				MID,
				date_of_service,
				min_to_subtract,
				d1,
				d2,
				d3,
				d4,
				d5,
				d6,
				d7,
				d9
			
			
		FROM emihealth_final.pic_dwp_multisites_adjustments 
		WHERE isactive=1 ORDER BY RAND() LIMIT sample_count;
		
	
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_multisite_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_00_pic_dwp_ProPerf_table_gen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_00_pic_dwp_ProPerf_table_gen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_00_pic_dwp_ProPerf_table_gen`(out success Bool)
BEGIN
	declare temp_count int default 0;
	DROP TABLE IF EXISTS t_pic_dwp_ProPerf;
	CREATE TABLE t_pic_dwp_ProPerf(
	SELECT id,MID,attend,date_of_service,proc_code,tooth_no,quadrent,arch,paid_money
	FROM emihealth_final.procedure_performed 
	WHERE is_invalid =0);
	
	-- ALTER TABLE t_pic_dwp_ProPerf ENGINE = InnoDB;
	
	
	CREATE INDEX attend_dos_mid ON t_pic_dwp_ProPerf(attend,date_of_service,MID);
	
	
	SELECT COUNT(*) INTO temp_count FROM  t_pic_dwp_ProPerf;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_00________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_00________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_00________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_MAIN`()
BEGIN
	call `t_01_pic_TS3_PL_DAILY_STATS_TABLE`();
	call `t_01_pic_TS4_PL_MONTHLY_STATS_TABLE`();
	
	call `t_01_pic_TS5_PL_YEARLY_STATS_TABLE`();
	
	call `t_01_pic_TS6_DASHBOARD_DAILY_TABLE`();
	call `t_01_pic_TS7_DASHBOARD_MONTHLY_TABLE`();
	call `t_01_pic_TS8_DASHBOARD_YEARLY_TABLE`();
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts3_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_01_pic_ts3_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying table[emihealth_final.pic_doctor_stats_daily] by generating test table[test_cases_2.t_temp_pic_daily]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts3_tc1A_testTableGen/t_01_pic_ts3_tc1B_columnValidation'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts3_tc2_PPnPLDprocCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying proceduere count in pp and pl_daily table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts3_tc2_PPnPLDprocCount'
		);
		
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts3_tc3_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying sum of income in pp and pl_daily table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts3_tc3_resPlDailyEqualPaidMoney'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts3_tc4_PPnPLDdistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying pp and pl table year count'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts3_tc4_PPnPLDdistinctYearsCount'
		);
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts3_tc5_PPnPLDtotalCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying pl_daily and pp count'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts3_tc5_PPnPLDtotalCount'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts3_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts3_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts3_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE percent_value DECIMAL(4,2);
	DECLARE total_count ,temp_count INT;
        DECLARE sample_count INT;
        
        
        DROP TABLE IF EXISTS t_temp_pic_daily;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_pic_daily` (
	  
		`id` BIGINT(20) NOT NULL AUTO_INCREMENT,
		`res_id` BIGINT(10) ZEROFILL NOT NULL,
		`attend` VARCHAR(20) DEFAULT NULL,
		`date_of_service` DATETIME DEFAULT NULL,
		`patient_count` int(11) ZEROFILL NOT NULL,
		`anesthesia_time` INT(11) ZEROFILL default 0,
		
		`expected_anesthesia_time` INT(11) ZEROFILL default 0,
		`multisite_time` INT(11) ZEROFILL default 0,
		`expected_multisite_time` INT(11) ZEROFILL default 0,
		`sum_of_all_proc_mins` INT(11) ZEROFILL default 0,
		`fill_time` INT(11) ZEROFILL default 0,
		`setup_plus_cleanup` INT(11) ZEROFILL default 0,
		
		
		`color_code` enum('red','green','yellow') ,
		`expected_color_code` ENUM('red','green','yellow'),
		`chair_time`INT(11) ZEROFILL NOT NULL,
		`expected_chair_time` INT(11) ZEROFILL default 0,
		`chair_time_plus_20_percent`double,
		`excess_time` double,
		`expected_excess_time` double,
		
		
		`final_time` double ,
		`expected_final_time` double,
		-- `available_time` INT(11) ZEROFILL NOT NULL,
		-- `total_time` INT(11) ZEROFILL NOT NULL,
		`test_status` BOOL DEFAULT NULL,
		`test_detail` TINYTEXT DEFAULT NULL,
		PRIMARY KEY (`id`)
		-- KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_pic_daily;
        
       
		SELECT var_value INTO percent_value FROM test_cases_2.t_global_variables  WHERE var_key='pl_daily_pic'; 
		
		
		SET total_count=0;
		SET sample_count=0;
		
		SELECT COUNT(*) INTO total_count FROM emihealth_final.`pic_doctor_stats_daily` WHERE isactive=1;
		
		IF(total_count < 100) THEN
			SET sample_count=total_count;
		ELSE
			SET sample_count=(total_count*percent_value)/100;
		END IF;
		
		insert into test_cases_2.t_temp_pic_daily 
			(
				
				
		 res_id,
		 attend,
		 date_of_service ,
	         patient_count,
	         anesthesia_time,
		 multisite_time,
		 sum_of_all_proc_mins,
		 fill_time ,
		 
		color_code,
		chair_time,
		chair_time_plus_20_percent,
		excess_time,
		setup_plus_cleanup,
		final_time
		
		
			) 
		SELECT  
			
				id,
				attend,
				date_of_service,
				patient_count,
	                        anesthesia_time,
		                multisite_time,
		                sum_of_all_proc_mins,
		                fill_time ,
		                
		               color_code,
		               chair_time,
		               chair_time_plus_20_percent,
		               excess_time,
		               setup_plus_cleanup,
		               final_time
				
			
		FROM emihealth_final.pic_doctor_stats_daily 
		WHERE isactive=1 ORDER BY RAND() LIMIT sample_count;
		
	
	
	SELECT COUNT(*) INTO temp_count FROM  test_cases_2.t_temp_pic_daily;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts3_tc1A_testTableGen22` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts3_tc1A_testTableGen22` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts3_tc1A_testTableGen22`(OUT success BOOL)
BEGIN
	DECLARE percent_value DECIMAL(4,2);
	DECLARE total_count ,temp_count INT;
        DECLARE sample_count INT;
        
        
        DROP TABLE IF EXISTS t_temp_pic_daily;
	CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_pic_daily` (
	  
		`id` BIGINT(20) NOT NULL AUTO_INCREMENT,
		`res_id` BIGINT(10) ZEROFILL NOT NULL,
		`attend` VARCHAR(20) DEFAULT NULL,
		`date_of_service` DATETIME DEFAULT NULL,
		`num_of_operatories` INT(11) DEFAULT NULL,
		`working_hours` INT(11) DEFAULT NULL,
		`sum_of_all_proc_mins` INT(11) DEFAULT null,
		`patient_count` bigint default null,
		
		
		`act_anesthesia_time` INT(11) DEFAULT null,
		`exp_anesthesia_time` INT(11) default null,
		
		`act_multisite_time` INT(11) DEFAULT null,
		`exp_multisite_time` INT(11) DEFAULT null,
		
		`act_fill_time` INT(11) DEFAULT null,
		`exp_fill_time` INT(11) DEFAULT null,
		
		`act_setup_time` int(11) default null,
		`exp_setup_time` INT(11) DEFAULT NULL,
		
		`act_cleanup_time` INT(11) DEFAULT NULL,
		`exp_cleanup_time` INT(11) DEFAULT NULL,
		
		`act_setup_plus_cleanup` INT(11) DEFAULT null,
		`exp_setup_plus_cleanup` INT(11) DEFAULT null,
		
		`act_chair_time`INT(11) default null,
		`exp_chair_time`INT(11) default null,
		
		`act_total_min_per_day` INT(11) DEFAULT NULL,
		`exp_total_min_per_day` INT(11) DEFAULT NULL,
		
		`act_chair_time_plus_20_percent`DOUBLE,
		`exp_chair_time_plus_20_percent`DOUBLE,
		
		
		
		`act_final_time` DOUBLE ,
		`exp_final_time` DOUBLE,
		
		`act_excess_time` DOUBLE,
		`exp_excess_time` DOUBLE,
		
		`act_excess_time_ratio`DOUBLE,
		`exp_excess_time_ratio`DOUBLE,
		
		`act_color_code` ENUM('red','green','yellow') ,
		`exp_color_code` ENUM('red','green','yellow'),
		
		`test_status` BOOL DEFAULT NULL,
		`test_detail` TINYTEXT DEFAULT NULL,
		PRIMARY KEY (`id`)
		-- KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1; 
        
       
	SELECT var_value INTO percent_value FROM test_cases_2.t_global_variables  WHERE var_key='pl_daily_pic'; 
	
	
	SET total_count=0;
	SET sample_count=0;
	
	SELECT COUNT(*) INTO total_count FROM emihealth_final.`pic_doctor_stats_daily` WHERE isactive=1;
	
	IF(total_count < 100) THEN
		SET sample_count=total_count;
	ELSE
		SET sample_count=(total_count*percent_value)/100;
	END IF;
		
	insert into test_cases_2.t_temp_pic_daily 
	(		
		res_id
		,attend
		,date_of_service 
		,num_of_operatories
		,working_hours
		,sum_of_all_proc_mins
		,patient_count
		
		,act_anesthesia_time
		,act_multisite_time
		,act_fill_time
		
		,act_setup_time
		,act_cleanup_time
		,act_setup_plus_cleanup
		
		,act_chair_time
		,act_chair_time_plus_20_percent
		,act_total_min_per_day
		,act_excess_time
		,act_excess_time_ratio
		,act_final_time
		,act_color_code
	) 
	SELECT  	
		id
		,attend
		,date_of_service
		,num_of_operatories
		,working_hours
		,sum_of_all_proc_mins
		,patient_count
		
		,anesthesia_time
		,multisite_time
		,fill_time
		
		,setup_time
		,cleanup_time
		,setup_plus_cleanup
		
		,chair_time
		,chair_time_plus_20_percent
		,total_min_per_day
		,excess_time
		,excess_time_ratio
		,final_time
		,color_code
		
			
	FROM emihealth_final.pic_doctor_stats_daily 
	WHERE isactive=1 ORDER BY RAND() LIMIT sample_count;
		
	
	
	SELECT COUNT(*) INTO temp_count FROM  test_cases_2.t_temp_pic_daily;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts3_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts3_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts3_tc1B_columnValidation`(OUT success INT ,OUT test_status_out BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  
  DECLARE t_id BIGINT(20);
  DECLARE t_attend VARCHAR (50) DEFAULT "" ;
  DECLARE t_dos DATETIME DEFAULT null;
  declare t_sum_of_all_proc_mins, t_anesthesia_time,t_fill_time int(11) default null;
  
  
  
  DECLARE _excess_time,avail_time,chair_plus_time double DEFAULT 0;  
  
  DECLARE temp_count,count_total_records,count_defective_records,multisite_count,anesthesia_count,chair_count INT DEFAULT 0;
  
  declare ex_final_time double;
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id,attend,date_of_service,sum_of_all_proc_mins,anesthesia_time,fill_time FROM test_cases_2.t_temp_pic_daily ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id,t_attend,t_dos,t_sum_of_all_proc_mins,t_anesthesia_time,t_fill_time;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
			
           -- anesthesia time 
             
		SELECT 	SUM(total_adjustment_pic) INTO anesthesia_count 
		FROM 	emihealth_final.pic_dwp_anesthesia_adjustments 
		WHERE 	attend = t_attend AND date_of_service = t_dos AND isactive = '1'; 
				    
		UPDATE 	test_cases_2.t_temp_pic_daily 
		SET 	expected_anesthesia_time=anesthesia_count
		WHERE 	id=t_id; 		
		
		
		    
            -- multisite time 
             
		SELECT 	SUM(min_to_subtract) 
		into 	multisite_count 
		FROM 	emihealth_final.pic_dwp_multisites_adjustments 
		WHERE 	attend = t_attend AND date_of_service = t_dos AND isactive = '1'; 
				    
		UPDATE 	test_cases_2.t_temp_pic_daily 
		SET 	expected_multisite_time=multisite_count
		WHERE 	id=t_id; 
			  
		
             -- final red yellow and green
		  
		SELECT 	(final_time-chair_time_plus_20_percent) 
		INTO 	_excess_time  
		FROM 	test_cases_2.`t_temp_pic_daily` 
		WHERE 	attend = t_attend AND date_of_service = t_dos ;
		
		UPDATE 	test_cases_2.t_temp_pic_daily 
		SET 	expected_excess_time = _excess_time 
		WHERE   id=t_id;
		
	     -- Final Time
		-- select IFNULL(anesthesia_time, 0) - IFNULL(multisite_time, 0) - IFNULL(fill_time,0)
		set ex_final_time = ifnull(t_sum_of_all_proc_mins,0) + ifnull(t_anesthesia_time,0) 
					- ifnull(multisite_count,0) - ifnull(t_fill_time,0); 
		
		update 	test_cases_2.t_temp_pic_daily
		set 	expected_final_time = ex_final_time
		where 	id = t_id;
		
	     
		
		/*
		IF (_excess_time > 0) THEN 
			UPDATE test_cases_2.t_temp_pic_daily 
			 SET expected_color_code='red',
			     expected_excess_time = _excess_time, 
			     test_detail='count.'
			  WHERE id=t_id;
		ELSE 	  
			IF (_excess_time > -288 and _excess_time<=0) THEN 
				UPDATE test_cases_2.t_temp_pic_daily 
				SET expected_color_code='yellow',
				expected_excess_time = _excess_time, 
				test_detail='count.'
				WHERE id=t_id;
			   ELSE 	  
				UPDATE test_cases_2.t_temp_pic_daily 
				SET expected_color_code='green',
				expected_excess_time = _excess_time, 
				test_detail='count.'
				WHERE id=t_id;  
			END IF ; 
		END IF ; 
		*/
		
		/* Below Piece of code is added later*/
		-- ===================================================================
		-- For testing other columns
		SELECT 	COUNT(*)
		INTO 	@otherColumnIssues
		FROM 
		(
			SELECT 	
				final_time
				,IFNULL(sum_of_all_proc_mins, 0) + IFNULL(anesthesia_time, 0) - IFNULL(multisite_time, 0) - IFNULL(fill_time,0) exp_final_time
				
				,chair_time
				,IFNULL(total_min_per_day, 0) - (IFNULL(setup_time, 0) + IFNULL(cleanup_time, 0)) AS exp_chair_time
				
				,chair_time_plus_20_percent
				,IFNULL(chair_time,0) + (0.2 * IFNULL(total_min_per_day,0)) AS exp_chair_time_plus_20_percent
				
				,total_min_per_day
				,60 * num_of_operatories * working_hours AS exp_total_min_per_day
				
				,total_min_plus_20p
				,IFNULL(total_min_per_day,0) + 0.2 * (IFNULL(total_min_per_day,0)) AS exp_total_min_plus_20p
				
				,excess_time
				,IFNULL(final_time,0) - IFNULL(chair_time_plus_20_percent,0) AS exp_excess_time
				
				,excess_time_ratio
				,ROUND(excess_time / (excess_time + total_min_plus_20p),2)+0 AS exp_excess_time_ratio
			FROM  	emihealth_final.`pic_doctor_stats_daily`
			WHERE 	isactive = 1
				AND attend = t_attend
				AND date_of_service = t_dos
			HAVING  chair_time != exp_chair_time
				OR chair_time_plus_20_percent != exp_chair_time_plus_20_percent
				OR total_min_per_day != exp_total_min_per_day
				OR total_min_plus_20p != exp_total_min_plus_20p
				OR excess_time != exp_excess_time
				OR excess_time_ratio != exp_excess_time_ratio
		) myTab
			;	
		-- ===================================================================
		IF (@otherColumnIssues > 0)THEN
			UPDATE 	test_cases_2.t_temp_pic_daily
			SET 	test_status =FALSE
				,test_detail = 'Issue In Other Column like[chair_time,chair_time_plus_20_percent etc]'
			WHERE 	id = t_id;
		END IF;
	
		END LOOP ;
  CLOSE my_cursor ;
  
  
  
 
  -- <<=== ALGO CORE PROCESSING ENDS
	UPDATE test_cases_2.t_temp_pic_daily
	SET	test_status = FALSE
	WHERE	color_code != expected_color_code;
	
	UPDATE test_cases_2.t_temp_pic_daily
	SET	test_status = TRUE
	WHERE	color_code = expected_color_code
		AND test_status != FALSE;
	
	-- =======================================================================
	
	-- =======================================================================
		
	
 -- MARKING AMBIGUOUS RECORDS(status column and test detail)
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_pic_daily;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_pic_daily WHERE test_status=0;
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_pic_daily WHERE  test_status IS NULL;
	IF(temp_count != 0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		
		IF(count_defective_records=0) THEN
			SET test_status_out=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status_out=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
	
  END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts3_tc1B_columnValidation22` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts3_tc1B_columnValidation22` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts3_tc1B_columnValidation22`(OUT success INT ,OUT test_status_out BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  
  DECLARE t_id BIGINT(20);
  DECLARE t_attend VARCHAR (50) DEFAULT "" ;
  DECLARE t_dos DATETIME DEFAULT null;
  declare t_num_of_operatories, t_working_hours, t_sum_of_all_proc_mins, t_patient_count int(11) default null;
  
  declare temp_exp_anesthesia_time
	  ,temp_exp_multisite_time
	  ,temp_exp_fill_time
	  ,temp_exp_setup_plus_cleanup
	  ,temp_exp_chair_time 
	  ,temp_exp_total_min_per_day
	  ,temp_exp_maximum_time int(11) default null; 
	  
  DECLARE temp_exp_setup_time
	  ,temp_exp_cleanup_time 
	  ,temp_exp_chair_time_plus_20_percent
	  ,temp_exp_excess_time 
	  ,temp_exp_final_time
	  ,temp_exp_excess_time_ratio double;  
  
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id,attend,date_of_service,sum_of_all_proc_mins, patient_count, working_hours, num_of_operatories
		    FROM test_cases_2.t_temp_pic_daily ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id,t_attend,t_dos,t_sum_of_all_proc_mins,t_patient_count, t_working_hours, t_num_of_operatories ;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
			
           -- anesthesia time 
             
		SELECT 	ifnull(SUM(total_adjustment_pic),0) 
		INTO 	temp_exp_anesthesia_time 
		FROM 	emihealth_final.pic_dwp_anesthesia_adjustments 
		WHERE 	attend = t_attend AND date_of_service = t_dos AND isactive = 1; 
				   	    
            -- multisite time 
             
		SELECT 	ifnull(SUM(min_to_subtract),0) 
		into 	temp_exp_multisite_time
		FROM 	emihealth_final.pic_dwp_multisites_adjustments 
		WHERE 	attend = t_attend AND date_of_service = t_dos AND isactive = 1; 
				    
			  
	    -- fill_time
		
		select ifnull(sum(minutes_subtract),0)
		into 	temp_exp_fill_time
		FROM 	emihealth_final.pic_dwp_fillup_time_by_mid 
		WHERE 	attend = t_attend AND date_of_service = t_dos AND isactive = 1;
		
	    -- setup and cleanup time
		set temp_exp_setup_time =  ifnull(t_patient_count,0) * 2;
		set temp_exp_cleanup_time = if(
						(t_patient_count - t_num_of_operatories)>-1
						,(t_patient_count - t_num_of_operatories)*16
						,0
					      );
	   
	    -- total min per day
		set temp_exp_total_min_per_day = ifnull(t_working_hours * t_num_of_operatories*60,0);
	    -- maximum time
		set temp_exp_maximum_time = ifnull(t_working_hours * 60,0);
		
	    -- chair time and exp_chair_time_plus_20_percent
		set temp_exp_chair_time = temp_exp_total_min_per_day - temp_exp_setup_time - temp_exp_cleanup_time ;
		set temp_exp_chair_time_plus_20_percent = temp_exp_chair_time + (0.2 * temp_exp_total_min_per_day);
		
	    -- final time
		set temp_exp_final_time = ifnull(t_sum_of_all_proc_mins,0) + ifnull(temp_exp_anesthesia_time,0) 
					  - ifnull(temp_exp_multisite_time,0) - ifnull(temp_exp_fill_time,0) ;
	    -- excess time
		set temp_exp_excess_time =  ifnull(temp_exp_final_time,0) - ifnull(temp_exp_chair_time_plus_20_percent,0);
		
	    -- exp_excess_time_ratio
		set temp_exp_excess_time_ratio = ifnull(temp_exp_excess_time,0)
								/
						(
							IFNULL(temp_exp_excess_time,0) 
									+ 
							(temp_exp_total_min_per_day + temp_exp_total_min_per_day*0.2)
						);
	    
		
		UPDATE 	test_cases_2.t_temp_pic_daily 
		SET 	exp_anesthesia_time = temp_exp_anesthesia_time
			,exp_multisite_time = temp_exp_multisite_time
			,exp_fill_time = temp_exp_fill_time
			
			,exp_setup_time = temp_exp_setup_time
			,exp_cleanup_time = temp_exp_cleanup_time
			,exp_setup_plus_cleanup = temp_exp_setup_time + temp_exp_cleanup_time
			,exp_chair_time = temp_exp_chair_time
			,exp_total_min_per_day = temp_exp_total_min_per_day
			,exp_chair_time = temp_exp_chair_time
			,exp_chair_time_plus_20_percent = temp_exp_chair_time_plus_20_percent
			,exp_final_time = temp_exp_final_time
			,exp_excess_time = temp_exp_excess_time 
			,exp_excess_time_ratio = round(temp_exp_excess_time_ratio,2)	
		WHERE 	id = t_id
			;
		
		if(temp_exp_final_time > temp_exp_total_min_per_day + 0.2*temp_exp_total_min_per_day)then
			UPDATE 	test_cases_2.t_temp_pic_daily 
			SET 	exp_color_code = 'red' 
			where 	id = t_id ;
		elseif(temp_exp_final_time > temp_exp_total_min_per_day and temp_exp_final_time <= temp_exp_total_min_per_day + 0.2 * temp_exp_total_min_per_day)then
			UPDATE 	test_cases_2.t_temp_pic_daily 
			SET 	exp_color_code = 'yellow' 
			WHERE 	id = t_id ;
		else
			UPDATE 	test_cases_2.t_temp_pic_daily 
			SET 	exp_color_code = 'green' 
			WHERE 	id = t_id ;
		end if;
		
		
		
		if (@otherColumnIssues > 0)then
			update 	test_cases_2.t_temp_pic_daily
			set 	test_status =false
				,test_detail = 'Issue In Other Column like[chair_time,chair_time_plus_20_percent etc]'
			where 	id = t_id;
		end if;
	
		END LOOP ;
  CLOSE my_cursor ;
  
  
  -- <<=== ALGO CORE PROCESSING ENDS
	
	UPDATE test_cases_2.t_temp_pic_daily
	SET	test_status = FALSE
	WHERE	act_color_code != exp_color_code
		or exp_anesthesia_time != act_anesthesia_time
		or exp_multisite_time != act_multisite_time
		or exp_fill_time != act_fill_time
		or exp_setup_time != act_setup_time
		or exp_cleanup_time != act_cleanup_time
		or exp_setup_plus_cleanup != act_setup_time + act_cleanup_time
		or exp_chair_time != act_chair_time
		or exp_total_min_per_day != act_total_min_per_day
		or exp_chair_time != act_chair_time
		or exp_chair_time_plus_20_percent != act_chair_time_plus_20_percent
		or exp_final_time != act_final_time
		or exp_excess_time != act_excess_time 
		or exp_excess_time_ratio != ROUND(act_excess_time_ratio,2)
		;
	
	UPDATE test_cases_2.t_temp_pic_daily
	SET	test_status = TRUE
	WHERE	test_status is null
		;
	
	-- =======================================================================
	
	-- =======================================================================
		
	
 -- MARKING AMBIGUOUS RECORDS(status column and test detail)
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_pic_daily;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_pic_daily WHERE test_status=0;
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_pic_daily WHERE  test_status IS NULL;
	IF(temp_count != 0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		
		IF(count_defective_records=0) THEN
			SET test_status_out=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status_out=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
	
  END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts3_tc2_PPnPLDprocCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts3_tc2_PPnPLDprocCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts3_tc2_PPnPLDprocCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	
	SELECT 	SUM(proc_unit)INTO res_count 
	FROM 	emihealth_final.procedure_performed AS pp
		INNER JOIN
		emihealth_final.`ref_standard_procedures` AS ref
		ON pp.`proc_code` = ref.`pro_code`
	WHERE 	pp.`is_invalid` = 0
		AND pp.proc_code NOT LIKE 'D8%'
		;
		
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pic_doctor_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts3_tc3_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts3_tc3_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts3_tc3_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pp_income INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	
	
	SELECT 	ROUND(SUM(paid_money),2)
	into 	pp_income
	FROM 	emihealth_final.`procedure_performed` AS pp
		INNER JOIN
		emihealth_final.`ref_standard_procedures` AS ref
		ON pp.`proc_code` = ref.`pro_code`
	WHERE 	pp.`is_invalid` = 0
	AND ref.`pro_code` NOT LIKE 'D8%'
	;
	SELECT 	ROUND(SUM(income),2)
	into 	pld_income
	FROM 	emihealth_final.`pic_doctor_stats_daily`
	WHERE 	isactive = 1
		;
	
	
	IF(pp_income=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in pp table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pp_income>pld_income)THEN
			SET test_detail=CONCAT(pp_income-pld_income,' more money found in pp table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-pp_income,' more money found in pl_daily table then pp table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts3_tc4_PPnPLDdistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts3_tc4_PPnPLDdistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts3_tc4_PPnPLDdistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pp_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT	count(distinct(year))
	INTO 	pp_years_count
	FROM 	emihealth_final.`procedure_performed` AS pp
		INNER JOIN
		emihealth_final.`ref_standard_procedures` AS ref
		ON pp.`proc_code` = ref.`pro_code`
	WHERE 	pp.`is_invalid` = 0
		AND ref.`pro_code` NOT LIKE 'D8%'
		;
		
        SELECT 	COUNT(DISTINCT(YEAR))  
        INTO 	pld_years_count
        FROM 	emihealth_final.`pic_doctor_stats_daily` 
        WHERE 	isactive=1
		;
		
	IF(pp_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in pp table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(pp_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(pp_years_count-pld_years_count,' more year counts found in pp table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-pp_years_count,' more year counts found in pl_daily table then pp table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts3_tc5_PPnPLDtotalCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts3_tc5_PPnPLDtotalCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts3_tc5_PPnPLDtotalCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE pp_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	
	SELECT 	COUNT(*)
	into 	pp_count
	FROM
	(
		SELECT 	pp.id
		FROM 	emihealth_final.`procedure_performed` AS pp
			INNER JOIN
			emihealth_final.`ref_standard_procedures` AS ref
			ON pp.`proc_code` = ref.`pro_code`
		WHERE 	pp.`is_invalid` = 0
			AND ref.`pro_code` NOT LIKE 'D8%'
		GROUP BY pp.`attend`, pp.`date_of_service`
	) AS myTab
		;
	SELECT 	count(*) 
	INTO 	pld_count 
	FROM 	emihealth_final.`pic_doctor_stats_daily` 
	WHERE 	isactive=1
		;
	
	IF(pp_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in pl_daily table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(pp_count>pld_count)THEN
			SET test_detail=CONCAT(pp_count-pld_count,' more red counts found in pl_daily table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-pp_count,' more red counts found in pl_daily table then pl_daily table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_TS4_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_TS4_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_TS4_PL_MONTHLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts4_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_01_pic_ts4_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying table[emihealth_final.pic_doctor_stats_monthly] by generating test table[test_cases_2.t_temp_01_pic_plmonthly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts4_tc1A_testTableGen/t_01_pic_ts4_tc1B_columnValidation'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts4_tc2_checkCountPlDailynPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying total counts from pl_daily table to pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts4_tc2_checkCountPlDailynPlMonthly'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts4_tc3_checkPaidMoneyPlDailynPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying income summation is equal in  pl_daily table and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts4_tc3_checkPaidMoneyPlDailynPlMonthly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts4_tc4_checkEqualFinalTimePlDailynPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying final time summation is equal in  pl_daily table and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts4_tc4_checkEqualFinalTimePlDailynPlMonthly'
		);
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts4_tc5_distinctYearsCountPlDailynPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying distinct years count is equal in  pl_daily table and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts4_tc5_distinctYearsCountPlDailynPlMonthly'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts4_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts4_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts4_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_multi_doctor_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_pic';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_01_pic_plmonthly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_01_pic_plmonthly_test_table` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` bigint(20) default null,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2)   NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2)  DEFAULT NULL,
	  
	  `actual_proc_min_per_month` INT(6) ZEROFILL default NULL,
	  `expec_proc_min_per_month` INT(6) ZEROFILL default NULL,
	  
	  `actual_final_time` int(6) zerofill default null,
	  `expec_final_time`  INT(6) ZEROFILL DEFAULT NULL,	
	  
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_01_pic_plmonthly_test_table; 
	
	
	INSERT INTO test_cases_2.t_temp_01_pic_plmonthly_test_table
		(
			res_id
			,attend
			,MONTH
			,YEAR
			
			,actual_procedure_count
			,actual_patient_count
			,actual_proc_min_per_month
			,actual_income
			,actual_final_time
			,actual_color_code
		)
	SELECT 
		id
		,attend
		,MONTH
		,YEAR
		
		,procedure_count
		,patient_count
		,sum_of_all_proc_mins_per_month
		,income
		,final_time
		,color_code
	FROM emihealth_final.`pic_doctor_stats_monthly` 
	WHERE isactive=1 
	ORDER BY (CONCAT(MONTH,YEAR)) DESC 
	LIMIT required_rows
		;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_01_pic_plmonthly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts4_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts4_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts4_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	declare temp_expec_proc_min_per_month,temp_actual_proc_min_per_month int default 0;
	declare temp_expec_final_time, temp_actual_final_time int default 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red','green','yellow') DEFAULT NULL;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check,temp_y_check ,temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_01_pic_plmonthly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT 	sum(procedure_count) INTO temp_expec_procedure_count 
			FROM 	emihealth_final.`pic_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			SELECT 	sum(patient_count) INTO temp_expec_patient_count 
			FROM 	emihealth_final.`pic_doctor_stats_daily`  
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			
			SELECT	ROUND(SUM(income),2) INTO temp_expec_income 
			FROM 	emihealth_final.`pic_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			SELECT	SUM(sum_of_all_proc_mins) INTO temp_expec_proc_min_per_month 
			FROM 	emihealth_final.`pic_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
				
			SELECT	SUM(final_time) INTO temp_expec_final_time 
			FROM 	emihealth_final.`pic_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			
			SELECT	COUNT(*) INTO temp_r_check 
			FROM 	emihealth_final.pic_doctor_stats_daily 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='red';
			
			SELECT 	COUNT(*) INTO temp_y_check 
			FROM 	emihealth_final.pic_doctor_stats_daily 
			WHERE 	isactive=1 AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='yellow';
					
			SELECT 	COUNT(*) INTO temp_g_check 
			FROM 	emihealth_final.pic_doctor_stats_daily 
			WHERE 	isactive=1 AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				if(temp_y_check != 0) then
					SET temp_expec_color_code='yellow';
				else
					SET temp_expec_color_code='green';
				end if;
			END IF;
			
			SELECT 	actual_procedure_count
				,actual_patient_count
				,actual_income
				,actual_proc_min_per_month
				,actual_final_time
				,actual_color_code
				
			INTO   temp_actual_procedure_count
				,temp_actual_patient_count
				,temp_actual_income
				,temp_actual_proc_min_per_month
				,temp_actual_final_time
				,temp_actual_color_code
			
			FROM 	test_cases_2.t_temp_01_pic_plmonthly_test_table  
			WHERE 	attend=t_attend 
				AND YEAR=t_year 
				AND MONTH=t_month 
			LIMIT 	1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';                     
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_actual_proc_min_per_month != temp_expec_proc_min_per_month) THEN
							SET temp_test_detail='Column(proc_min_per_month)  values are not matched.';				     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';	                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_final_time != temp_expec_final_time)THEN
									SET temp_test_detail='Column(final_time)  values are not matched.';
									SET temp_test_status=FALSE;
								ELSe
									SET temp_test_detail='Data against    all    columns    is   ok.';
									SET temp_test_status=TRUE;
			
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_01_pic_plmonthly_test_table 
				 SET 
					expec_procedure_count=temp_expec_procedure_count
					,expec_patient_count=temp_expec_patient_count
					,expec_income= temp_expec_income 
					,expec_proc_min_per_month = temp_expec_proc_min_per_month
					,expec_final_time = temp_expec_final_time
					,expec_color_code = temp_expec_color_code
					,test_detail=temp_test_detail
					,test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			 
			
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
	
	
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_01_pic_plmonthly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_01_pic_plmonthly_test_table WHERE test_status != TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_01_pic_plmonthly_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_01_pic_plmonthly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_01_pic_plmonthly_test_table WHERE test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts4_tc2_checkCountPlDailynPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts4_tc2_checkCountPlDailynPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts4_tc2_checkCountPlDailynPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE pld_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) INTO pld_count 
	FROM  	(
			select 	count(*)
			from 	emihealth_final.`pic_doctor_stats_daily`
			WHERE 	isactive=1
			GROUP 
			BY 	attend, MONTH, YEAR
		 ) as abc;
		 		 
	SELECT 	count(*) INTO plm_count 
	FROM 	emihealth_final.`pic_doctor_stats_monthly`
	WHERE 	isactive=1;
	
	
		
	IF(pld_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in pl_daily and pl_monthly table';
	ELSE
		SET test_status=FALSE;
		IF(pld_count>plm_count)THEN
			SET test_detail=CONCAT(pld_count-plm_count,' more counts  found in pl_daily table then pl_monthly table');
		ELSE
			SET test_detail=CONCAT(plm_count-pld_count,' more counts found in pl_monthly table then pl_daily table');
		END IF;
	END IF;
	
	
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts4_tc3_checkPaidMoneyPlDailynPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts4_tc3_checkPaidMoneyPlDailynPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts4_tc3_checkPaidMoneyPlDailynPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money double DEFAULT 0;
	DECLARE plm_income DOUBLE DEFAULT 0;
	
	SELECT round(SUM(income),2) INTO  res_paid_money FROM emihealth_final.pic_doctor_stats_daily WHERE isactive=1;
	SELECT round(SUM(income),2) INTO plm_income FROM emihealth_final.pic_doctor_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in pl_daily table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then pl_daily table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts4_tc4_checkEqualFinalTimePlDailynPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts4_tc4_checkEqualFinalTimePlDailynPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts4_tc4_checkEqualFinalTimePlDailynPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE pld_final_time_sum INT DEFAULT 0;
	DECLARE plm_final_time_sum INT DEFAULT 0;
	
	SELECT sum(final_time) INTO pld_final_time_sum  FROM emihealth_final.`pic_doctor_stats_daily` WHERE  isactive=1;
	SELECT SUM(final_time) INTO plm_final_time_sum FROM emihealth_final.`pic_doctor_stats_monthly` WHERE isactive=1;
	
	IF(pld_final_time_sum=plm_final_time_sum) THEN
		SET test_status=TRUE;
		SET test_detail='Equal Final Time Sum found in pld table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(pld_final_time_sum>plm_final_time_sum)THEN
			SET test_detail=CONCAT(pld_final_time_sum-plm_final_time_sum,' more Final Time found in pld table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_final_time_sum-pld_final_time_sum,' more Final Time found in pl_monthly table then pld table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts4_tc5_distinctYearsCountPlDailynPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts4_tc5_distinctYearsCountPlDailynPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts4_tc5_distinctYearsCountPlDailynPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pld_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO pld_years_count FROM emihealth_final.`pic_doctor_stats_daily` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.`pic_doctor_stats_monthly` WHERE isactive=1;
	
	
	
	IF(pld_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in pl_daily table and pl_monthly';
	ELSE
		SET test_status=FALSE;
		IF(pld_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(pld_years_count-plm_years_count,' more year counts found in pl_daily table then pl_monthly table');
		ELSE
			SET test_detail=CONCAT(plm_years_count-pld_years_count,' more year counts found in pl_monthly table then pl_daily table');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_TS5_PL_YEARLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_TS5_PL_YEARLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_TS5_PL_YEARLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts5_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_01_pic_ts5_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying table[emihealth_final.pic_doctor_stats_yearly] by generating test table[test_cases_2.t_temp_01_pic_plyearly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts5_tc1A_testTableGen/t_01_pic_ts5_tc1B_columnValidation'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts5_tc2_checkCountPlDailynPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying total counts from pl_daily table to pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts5_tc2_checkCountPlDailynPlYearly'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts5_tc3_checkPaidMoneyPlDailynPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying income summation is equal in  pl_daily table and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts5_tc3_checkPaidMoneyPlDailynPlYearly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts5_tc4_checkEqualFinalTimePlDailynPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying final time summation is equal in  pl_daily table and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts5_tc4_checkEqualFinalTimePlDailynPlYearly'
		);
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts5_tc5_distinctYearsCountPlDailynPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying distinct years count is equal in  pl_daily table and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts5_tc5_distinctYearsCountPlDailynPlYearly'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts5_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts5_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts5_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pic_doctor_stats_yearly` WHERE isactive=1;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_yearly_pic';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_01_pic_plyearly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_01_pic_plyearly_test_table` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` bigint(20) default null,
	  `attend` VARCHAR(250) NOT NULL,
	  
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2)   NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2)  DEFAULT NULL,
	 
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_01_pic_plyearly_test_table; 
	
	
	INSERT INTO test_cases_2.t_temp_01_pic_plyearly_test_table
		(
			res_id
			,attend
			,YEAR
			
			,actual_procedure_count
			,actual_patient_count
			,actual_income
			,actual_color_code
		)
	SELECT 
		id
		,attend
		,YEAR
		
		,procedure_count
		,patient_count
	
		,income
		,color_code
	FROM emihealth_final.`pic_doctor_stats_yearly` 
	WHERE isactive=1 
	ORDER BY (CONCAT(YEAR)) DESC 
	LIMIT required_rows
		;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_01_pic_plyearly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts5_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts5_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts5_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red','green','yellow') DEFAULT NULL;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check,temp_y_check ,temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,YEAR FROM test_cases_2.t_temp_01_pic_plyearly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT 	sum(procedure_count) INTO temp_expec_procedure_count 
			FROM 	emihealth_final.`pic_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			SELECT 	sum(patient_count) INTO temp_expec_patient_count 
			FROM 	emihealth_final.`pic_doctor_stats_daily`  
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			
			SELECT	ROUND(SUM(income),2) INTO temp_expec_income 
			FROM 	emihealth_final.`pic_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;		
			
			
			SELECT	COUNT(*) INTO temp_r_check 
			FROM 	emihealth_final.pic_doctor_stats_daily 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='red';
			
			SELECT 	COUNT(*) INTO temp_y_check 
			FROM 	emihealth_final.pic_doctor_stats_daily 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				and attend = t_attend
				AND color_code='yellow';
					
			SELECT 	COUNT(*) INTO temp_g_check 
			FROM 	emihealth_final.pic_doctor_stats_daily 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				if(temp_y_check != 0) then
					SET temp_expec_color_code='yellow';
				else
					SET temp_expec_color_code='green';
				end if;
			END IF;
			
			SELECT 	actual_procedure_count
				,actual_patient_count
				,actual_income
				,actual_color_code
				
			INTO   temp_actual_procedure_count
				,temp_actual_patient_count
				,temp_actual_income
				,temp_actual_color_code
			
			FROM 	test_cases_2.t_temp_01_pic_plyearly_test_table  
			WHERE 	attend=t_attend 
				AND YEAR=t_year 
			LIMIT 	1;
		
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';                     
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_actual_color_code != temp_expec_color_code)THEN
							SET temp_test_detail='Column(color_code)       values are not matched.';	                     
							SET temp_test_status=FALSE;
						ELSE
							SET temp_test_detail='Data against    all    columns    is   ok.';
							SET temp_test_status=TRUE;
		
						END IF;	
					END IF;
				END IF;
			END IF;
			
		
			UPDATE test_cases_2.t_temp_01_pic_plyearly_test_table 
				 SET 
					expec_procedure_count=temp_expec_procedure_count
					,expec_patient_count=temp_expec_patient_count
					,expec_income= temp_expec_income 
					,expec_color_code = temp_expec_color_code
					,test_detail=temp_test_detail
					,test_status=temp_test_status
			WHERE attend=t_attend  AND YEAR=t_year;
			
			
			SET t_attend='';
			SET t_year=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			 
			
			SET temp_test_detail=null;
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_01_pic_plyearly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_01_pic_plyearly_test_table WHERE test_status != TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_01_pic_plyearly_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_01_pic_plyearly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_01_pic_plyearly_test_table WHERE test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts5_tc2_checkCountPlDailynPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts5_tc2_checkCountPlDailynPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts5_tc2_checkCountPlDailynPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE pld_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) INTO pld_count 
	FROM  	(
			select 	count(*)
			from 	emihealth_final.`pic_doctor_stats_daily`
			WHERE 	isactive=1
			GROUP 
			BY 	attend, YEAR
		 ) as abc ;
		 		 
	SELECT 	count(*) INTO ply_count 
	FROM 	emihealth_final.`pic_doctor_stats_yearly`
	WHERE 	isactive=1;
	
	
		
	IF(pld_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in pl_daily and pl_yearly table';
	ELSE
		SET test_status=FALSE;
		IF(pld_count>ply_count)THEN
			SET test_detail=CONCAT(pld_count-ply_count,' more counts  found in pl_daily table then pl_yearly table');
		ELSE
			SET test_detail=CONCAT(ply_count-pld_count,' more counts found in pl_yearly table then pl_daily table');
		END IF;
	END IF;
	
	
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts5_tc3_checkPaidMoneyPlDailynPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts5_tc3_checkPaidMoneyPlDailynPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts5_tc3_checkPaidMoneyPlDailynPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pld_income double DEFAULT 0;
	DECLARE ply_income DOUBLE DEFAULT 0;
	
	SELECT round(SUM(income),2) INTO  pld_income FROM emihealth_final.pic_doctor_stats_daily WHERE isactive=1;
	SELECT round(SUM(income),2) INTO ply_income FROM emihealth_final.pic_doctor_stats_yearly WHERE isactive=1;
	
	IF(pld_income=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(pld_income>ply_income)THEN
			SET test_detail=CONCAT(pld_income-ply_income,' more money found in pl_daily table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-pld_income,' more money found in pl_monthly table then pl_daily table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts5_tc4_checkEqualFinalTimePlDailynPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts5_tc4_checkEqualFinalTimePlDailynPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts5_tc4_checkEqualFinalTimePlDailynPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE pld_final_time_sum INT DEFAULT 0;
	DECLARE ply_final_time_sum INT DEFAULT 0;
	
	SELECT sum(final_time) INTO pld_final_time_sum FROM emihealth_final.`pic_doctor_stats_daily` WHERE  isactive=1 ;
	SELECT SUM(final_time) INTO ply_final_time_sum FROM emihealth_final.`pic_doctor_stats_yearly` WHERE isactive=1;
	
	IF(pld_final_time_sum = ply_final_time_sum) THEN
		SET test_status=TRUE;
		SET test_detail='Equal Final Time Sum found in pld table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(pld_final_time_sum>ply_final_time_sum)THEN
			SET test_detail=CONCAT(pld_final_time_sum-ply_final_time_sum,' more Final Time found in pld table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_final_time_sum-pld_final_time_sum,' more Final Time found in pl_yearly table then pld table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts5_tc5_distinctYearsCountPlDailynPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts5_tc5_distinctYearsCountPlDailynPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts5_tc5_distinctYearsCountPlDailynPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pld_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO pld_years_count FROM emihealth_final.`pic_doctor_stats_daily` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count FROM emihealth_final.`pic_doctor_stats_yearly` WHERE isactive=1;
	
	
	
	IF(pld_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in pl_daily table and pl_yearly';
	ELSE
		SET test_status=FALSE;
		IF(pld_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(pld_years_count-ply_years_count,' more year counts found in pl_daily table then pl_yearly table');
		ELSE
			SET test_detail=CONCAT(ply_years_count-pld_years_count,' more year counts found in pl_yearly table then pl_daily table');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_TS6_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_TS6_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_TS6_DASHBOARD_DAILY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts6_tc1A_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_01_pic_ts6_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(
					01
					,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_07_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
					,'t_report'
					,'t_01_pic_ts6_tc1A_dashboardTestTable/t_01_pic_ts6_tc1B_dashboardDailyValidation'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts6_tc2_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(
					01
					,'Verifying pl_daily and db_daily table counts'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
					,'t_report'
					,'t_01_pic_ts6_tc2_checkCountDosPlNDb'
				     );
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts6_tc3_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(
					01
					,'Verifying total pl_daily table counts'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
					,'t_report'
					,'t_01_pic_ts6_tc3_checkTotalCountPlNDb');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts6_tc4_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(
					01
					,'Verifying RYG counts in db_daily and pl_daily table'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
					,'t_report'
					,'t_01_pic_ts6_tc4_checkRygCountsPlNDbTables'
					);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts6_tc5_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying red counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts6_tc5_checkRedCountsPlNDbTables'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts6_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying yellow counts in db_daily and pl_daily table'
			,tc_status
			,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts6_tc6_checkYellowCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts6_tc7_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying green counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts6_tc7_checkGreenCountsPlNDbTables'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts6_tc1A_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts6_tc1A_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts6_tc1A_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=07;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_daily_pic';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_temp_01_pic_dbdaily_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_01_pic_dbdaily_test_table` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_01_pic_dbdaily_test_table; 
	
	
	insert into test_cases_2.t_temp_01_pic_dbdaily_test_table(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
	FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=01) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_temp_01_pic_dbdaily_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts6_tc1B_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts6_tc1B_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts6_tc1B_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT null;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		-- t_temp_01_pic_dbdaily_test_table
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_temp_01_pic_dbdaily_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.`pic_doctor_stats_daily` WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pic_doctor_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pic_doctor_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pic_doctor_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_01_pic_dbdaily_test_table
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_01_pic_dbdaily_test_table 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos= null;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_01_pic_dbdaily_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_01_pic_dbdaily_test_table WHERE t_temp_01_pic_dbdaily_test_table.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_01_pic_dbdaily_test_table;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_01_pic_dbdaily_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_01_pic_dbdaily_test_table WHERE t_temp_01_pic_dbdaily_test_table.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts6_tc2_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts6_tc2_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts6_tc2_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.`pic_doctor_stats_daily` WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=1	;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts6_tc3_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts6_tc3_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts6_tc3_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.`pic_doctor_stats_daily` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=1;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts6_tc4_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts6_tc4_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts6_tc4_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.`pic_doctor_stats_daily` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=1;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts6_tc5_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts6_tc5_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts6_tc5_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.`pic_doctor_stats_daily` WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=1;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts6_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts6_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts6_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.`pic_doctor_stats_daily` WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=1;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts6_tc7_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts6_tc7_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts6_tc7_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pic_doctor_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=1;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts7_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_01_pic_ts7_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(01
		,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_01_pic_dbMonthly_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
		,'t_01_pic_ts7_tc1A_testTableGen/t_01_pic_ts7_tc1B_columnValidation');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying distinct year counts in pl_monthly and db_monthly'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts7_tc2_countDistinctYearsPlMNDbM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying total_count db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts7_tc3_checkTotalCountPlMNdbm'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts7_tc4_checkCountNoOfProvPlMnDBM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying providers count in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts7_tc4_checkCountNoOfProvPlMnDBM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts7_tc5_checkYellowCountsPLMnDBM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying yellow count db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts7_tc5_checkYellowCountsPLMnDBM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts7_tc6_checkGreenCountsPlMnDBM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying green count in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts7_tc6_checkGreenCountsPlMnDBM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying paid_money  in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_01_pic_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM'
		);
	
	
					
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts7_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts7_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts7_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 and type=11;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_pic';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	-- t_temp_01_pic_dbMonthly_test_table
	 DROP TABLE IF EXISTS t_temp_01_pic_dbMonthly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_01_pic_dbMonthly_test_table` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_paid_money` DOUBLE DEFAULT 0,
	  `expec_paid_money` DOUBLE DEFAULT 0,
	  
	  `actual_recovered_money` double default 0,
	  `expec_recovered_money` double default 0,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_01_pic_dbMonthly_test_table; 
	
	
	insert into test_cases_2.t_temp_01_pic_dbMonthly_test_table
		(
			year
			,month 
			,actual_no_of_providers
			,actual_total_red
			,actual_total_green
			,actual_paid_money
			,actual_recovered_money
		)
	SELECT 		year
			,month
			,number_of_providers
			,total_red
			,total_green
			,total_paid_money
			,total_red_recovered_money
	from emihealth_final.dashboard_monthly_results 
	WHERE (isactive=1 and type=01) 
	ORDER BY(concat(year,month)) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_01_pic_dbMonthly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts7_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts7_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts7_tc1B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	declare temp_expec_paid_money, temp_actual_paid_money double default 0;
	declare temp_expec_recovered_money, temp_actual_recovered_money double default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_01_pic_dbMonthly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			-- pic_doctor_stats_monthly
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.`pic_doctor_stats_monthly` WHERE month=t_month and year=t_year AND isactive=1;
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pic_doctor_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive=1;
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pic_doctor_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive=1;
			
			select 	round(sum(income),2)
			into 	temp_expec_paid_money
			from 	emihealth_final.`pic_doctor_stats_monthly`
			where 	month = t_month
				and year = t_year
				and isactive = 1
				;
				
			SELECT 	ROUND(SUM(income),2)
			INTO 	temp_expec_recovered_money
			FROM 	emihealth_final.`pic_doctor_stats_daily`
			WHERE 	MONTH = t_month
				AND YEAR = t_year
				and color_code = 'red'
				AND isactive = 1
				;
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green, actual_paid_money, actual_recovered_money
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green, temp_actual_paid_money, temp_actual_recovered_money
			FROM test_cases_2.t_temp_01_pic_dbMonthly_test_table
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_green !=temp_actual_total_green) THEN
						SET test_detail='Column(total_green ) values   are  not matched';
						SET temp_test_status=FALSE;
					ELSE
						if(temp_expec_paid_money != temp_actual_paid_money)then
							SET test_detail='Column(paid_money) values   are  not matched';
							SET temp_test_status=FALSE;
						else
							if(temp_expec_recovered_money != temp_actual_recovered_money)then
								SET test_detail='Column(recovered_money) values   are  not matched';
								SET temp_test_status=FALSE;
							else
								SET test_detail='Data   in   against   all    columns   is   ok';
								SET temp_test_status=TRUE;
							end if;
						end if;	
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_01_pic_dbMonthly_test_table 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_green =temp_expec_total_green,
					expec_paid_money = temp_expec_paid_money,
					expec_recovered_money = temp_expec_recovered_money,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_01_pic_dbMonthly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_01_pic_dbMonthly_test_table WHERE t_temp_01_pic_dbMonthly_test_table.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_01_pic_dbMonthly_test_table;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_01_pic_dbMonthly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_01_pic_dbMonthly_test_table WHERE t_temp_01_pic_dbMonthly_test_table.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.`pic_doctor_stats_monthly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=01;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.`pic_doctor_stats_monthly` WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=01;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts7_tc4_checkCountNoOfProvPlMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts7_tc4_checkCountNoOfProvPlMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts7_tc4_checkCountNoOfProvPlMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.`pic_doctor_stats_monthly` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results 
	WHERE isactive=1 AND TYPE=01;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts7_tc5_checkYellowCountsPLMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts7_tc5_checkYellowCountsPLMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts7_tc5_checkYellowCountsPLMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	into 	pl_yellow_count
	FROM 	emihealth_final.`pic_doctor_stats_monthly`
	WHERE 	isactive = 1 AND color_code = 'yellow';
	
	SELECT 	SUM(total_yellow)
	into 	db_yellow_count
	FROM 	emihealth_final.`dashboard_monthly_results` WHERE TYPE = 1 and isactive = 1;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts7_tc6_checkGreenCountsPlMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts7_tc6_checkGreenCountsPlMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts7_tc6_checkGreenCountsPlMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.`pic_doctor_stats_monthly` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=1;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.`pic_doctor_stats_monthly` WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=1;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts8_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_01_pic_ts8_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_01_pic_dbYearly_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts8_tc1A_testTableGen/t_01_pic_ts8_tc1B_columnValidation'
		);
		
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts8_tc2_countDistinctYearsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying pl_yearly and db_yearly table distinct years'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts8_tc2_countDistinctYearsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying pl_yearly and db_yearly table counts'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts8_tc3_checkTotalCountPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts8_tc4_checkCountNoOfProvPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying no. of providers in db_yearly  and pl_yearly table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts8_tc4_checkCountNoOfProvPlYnDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts8_tc5_checkTotalRedCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying red counts in db_yearly and pl_yearly table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts8_tc5_checkTotalRedCountsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts8_tc6_checkTotalYellowCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying yellow counts in db_yearly and pl_yearly table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts8_tc6_checkTotalYellowCountsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts8_tc7_checkGreenCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(01
		,'Verifying green counts in db_yearly and pl_yearly table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts8_tc7_checkGreenCountsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying paid money money in db_yearly and pl_yearly table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_01_pic_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts8_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts8_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts8_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=01;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_pic';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_01_pic_dbYearly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_01_pic_dbYearly_test_table` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill default 0,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT null,
	  
	  `actual_total_red` INT(11)zerofill  default 0,
	  `expec_total_red` INT(11) zerofill DEFAULT null,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  DEFAULT 0,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  default 0,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT null,
	  
	  `actual_paid_money` double default 0,
	  `expec_paid_money` double default 0,
	  
	  `actual_recovered_money` double default 0,
	  `expec_recovered_money` double default 0,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_01_pic_dbYearly_test_table; 
	
	
	insert into test_cases_2.t_temp_01_pic_dbYearly_test_table
		(
			year
			,actual_no_of_providers
			,actual_total_red
			,actual_total_yellow
			,actual_total_green 
			,actual_paid_money
			,actual_recovered_money
		)
	SELECT 
			year
			,number_of_providers
			,total_red
			,total_yellow
			,total_green
			,total_paid_money
			,total_red_recovered_money
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 and type=01 
	ORDER 	BY(year)desc 
	LIMIT 	required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_01_pic_dbYearly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts8_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts8_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts8_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	declare temp_expec_paid_money,temp_actual_paid_money double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_01_pic_dbYearly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        -- t_temp_01_pic_dbYearly_test_table
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT	COUNT(distinct(attend)) 
			INTO 	temp_expec_no_of_providers 
			from 	emihealth_final.`pic_doctor_stats_yearly` 
			WHERE 	year=t_year AND isactive='1';
			
			SELECT 	COUNT(distinct(attend))
			INTO 	temp_expec_total_red  
			from 	emihealth_final.pic_doctor_stats_yearly 
			WHERE 	YEAR=t_year  AND color_code='red' AND isactive=1;
			
			SELECT 	COUNT(DISTINCT(attend))
			INTO 	temp_expec_total_yellow  
			FROM 	emihealth_final.pic_doctor_stats_yearly 
			WHERE  	YEAR=t_year  AND color_code='yellow' AND isactive=1;
						
			SELECT 	COUNT(distinct(attend))
			INTO 	temp_expec_total_green  
			from 	emihealth_final.pic_doctor_stats_yearly 
			WHERE  	YEAR=t_year  AND color_code='green' AND isactive=1;
			
			
			SELECT 	sum(income)
			INTO 	temp_expec_paid_money
			FROM 	emihealth_final.pic_doctor_stats_yearly 
			WHERE  	YEAR=t_year AND isactive=1;
			set temp_expec_paid_money = round(temp_expec_paid_money,2);
			
			SELECT 	SUM(income)
			INTO 	temp_expec_recovered_money
			FROM 	emihealth_final.`pic_doctor_stats_daily` 
			WHERE  	YEAR=t_year AND isactive=1 and color_code = 'red';
			set temp_expec_recovered_money = round(temp_expec_recovered_money,2);
			
			SELECT 
				actual_no_of_providers
				,actual_total_red
				,actual_total_yellow
				,actual_total_green
				,actual_paid_money
				,actual_recovered_money
			INTO 	
				temp_actual_no_of_providers
				,temp_actual_total_red
				,temp_actual_total_yellow
				,temp_actual_total_green
				,temp_actual_paid_money
				,temp_actual_recovered_money
				
			FROM 	test_cases_2.t_temp_01_pic_dbYearly_test_table
			WHERE 	YEAR=t_year 
			lIMIT 	1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET temp_test_detail='Column(no_of_providers) values are not matched';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET temp_test_detail='Column(total_red)    values  are  not  matched';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_green !=temp_actual_total_green) THEN
						SET temp_test_detail='Column(total_green) values   are  not matched';
						SET temp_test_status=FALSE;
					ELSE
						if(temp_expec_paid_money != temp_actual_paid_money)then
							SET temp_test_detail='Column(paid_money) values   are  not matched';
							SET temp_test_status=FALSE;
						else
							if(temp_expec_recovered_money != temp_actual_recovered_money)then
								SET temp_test_detail='Column(recovered_money) values   are  not matched';
								SET temp_test_status=FALSE;
							else
								SET temp_test_detail='Data   in   against   all    columns   is   ok';
								SET temp_test_status=TRUE;
							end if;
						end if;
					END IF;
				END IF;		
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_01_pic_dbYearly_test_table 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red = temp_expec_total_red, 
					expec_total_green = temp_expec_total_green,
					expec_total_yellow = temp_expec_total_yellow,
					expec_paid_money = temp_expec_paid_money,
					expec_recovered_money = temp_expec_recovered_money,
					test_status = temp_test_status,
					test_detail = temp_test_detail
			WHERE YEAR = t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail=null;
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_01_pic_dbYearly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_01_pic_dbYearly_test_table WHERE t_temp_01_pic_dbYearly_test_table.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_01_pic_dbYearly_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_01_pic_dbYearly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_01_pic_dbYearly_test_table WHERE t_temp_01_pic_dbYearly_test_table.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts8_tc2_countDistinctYearsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts8_tc2_countDistinctYearsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts8_tc2_countDistinctYearsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(year)) 
	into 	ply_dist_years_count 
	from 	emihealth_final.`pic_doctor_stats_yearly` 
	WHERE 	isactive=1;
	
	SELECT 	COUNT(DISTINCT(Year)) 
	into 	dby_dist_years_count 
	from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=1;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
	set success = 1;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT  COUNT(*) 
	INTO 	ply_total_count
	from
		(
			select 	count(*)
			from 	emihealth_final.`pic_doctor_stats_yearly`
			where 	isactive = 1
			GROUP 	by YEAR	
		) as myTab;
	
	SELECT 	count(*) 
	INTO 	dby_total_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=1;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts8_tc4_checkCountNoOfProvPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts8_tc4_checkCountNoOfProvPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts8_tc4_checkCountNoOfProvPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT 	sum(yearly_attends)
	INTO 	ply_total_count 
	from 	(
			select 	count(*) as yearly_attends
			from 	emihealth_final.`pic_doctor_stats_yearly`
			where 	isactive = 1
			group 	by year
		) as result
	;
	
	SELECT 	SUM(number_of_providers) 
	INTO 	dby_total_prov_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=1;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts8_tc5_checkTotalRedCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts8_tc5_checkTotalRedCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts8_tc5_checkTotalRedCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	into 	ply_red_count 
	from 	emihealth_final.`pic_doctor_stats_yearly` 
	WHERE 	isactive=1 AND color_code='red'
		;
	
	SELECT 	SUM(total_red) 
	into 	dby_red_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=1
		;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts8_tc6_checkTotalYellowCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts8_tc6_checkTotalYellowCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts8_tc6_checkTotalYellowCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	ply_yellow_count 
	from 	emihealth_final.`pic_doctor_stats_yearly` 
	WHERE 	isactive=1 AND color_code='yellow'
		;
	SELECT 	SUM(total_yellow) 
	into 	dby_yellow_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=1;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts8_tc7_checkGreenCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts8_tc7_checkGreenCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts8_tc7_checkGreenCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	ply_green_count 
	from 	emihealth_final.`pic_doctor_stats_yearly` 
	WHERE 	isactive=1 AND color_code='green'
		;
	SELECT 	SUM(total_green) 
	into 	dby_green_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=1
		;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01_pic_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01_pic_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01_pic_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT 	SUM(income) 
	INTO 	ply_total_paid_money 
	from 	emihealth_final.`pic_doctor_stats_yearly` WHERE isactive=1
		;
	SELECT 	SUM(total_paid_money) 
	INTO 	dby_total_paid_money 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=1;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
	
	set success = 1;	
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_01________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_01________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_01________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_MAIN`()
BEGIN
	call `t_02_dwp_TS3_PL_DAILY_STATS_TABLE`();
	call `t_02_dwp_TS4_PL_MONTHLY_STATS_TABLE`();
	call `t_02_dwp_TS5_PL_YEARLY_STATS_TABLE`();
	
	call `t_02_dwp_TS6_DASHBOARD_DAILY_TABLE`();
	call `t_02_dwp_TS7_DASHBOARD_MONTHLY_TABLE`();
	call  `t_02_dwp_TS8_DASHBOARD_YEARLY_TABLE`();
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts3_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_02_dwp_ts3_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		02
		,'Verifying table[emihealth_final.dwp_doctor_stats_daily] by generating test table[test_cases_2.t_temp_dwp_daily]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_02_dwp_ts3_tc1A_testTableGen/t_02_dwp_ts3_tc1B_columnValidation '
	);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts3_tc2_ppNplDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		02
		,'Verifying total counts in PL Daily and PP table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_02_dwp_ts3_tc2_ppNplDailyCount'
	);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts3_tc3_ppNplDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		02
		,'Verifying Paid Money in PL Daily and PP table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_02_dwp_ts3_tc3_ppNplDailyEqualPaidMoney'
	);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts3_tc4_ppNplDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		02
		,'Verifying distinct year count in PL daily and PP table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_02_dwp_ts3_tc4_ppNplDailyDistinctYearsCount'
	);
	
	
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts3_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts3_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts3_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE percent_value DECIMAL(4,2);
	DECLARE total_count ,temp_count INT;
        DECLARE sample_count INT;
        
        
        DROP TABLE IF EXISTS t_temp_dwp_daily;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_dwp_daily` (
	  
		`id` BIGINT(20) NOT NULL AUTO_INCREMENT,
		`res_id` BIGINT(10) ZEROFILL NOT NULL,
		`attend` VARCHAR(20) DEFAULT NULL,
		`date_of_service` DATETIME DEFAULT NULL,
		
		`patient_count` INT(11) ZEROFILL default 0,
		`anesthesia_time`INT(11) ZEROFILL default 0,
	         `multisite_time` INT(11) ZEROFILL default 0,
	         `fill_time` INT(11) ZEROFILL default 0,
		`sum_of_all_proc_mins` INT(11) ZEROFILL default 0,
	
		
		
		`color_code` ENUM('red','green','yellow') ,
		`expected_color_code` ENUM('red','green','yellow'),
		`expected_chair_time` INT(11) ZEROFILL default 0,
		`doc_wd_patient_max`DOUBLE,
		`excess_time` DOUBLE,
		`expected_excess_time` DOUBLE,
		
		
		`final_time` INT(11) ZEROFILL NOT NULL,
		`expected_final_time` INT(11) ZEROFILL NOT NULL,
		`test_status` BOOL DEFAULT NULL,
		`test_detail` TINYTEXT DEFAULT NULL,
		PRIMARY KEY (`id`)
		-- KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_dwp_daily;
        
       
		SELECT var_value INTO percent_value FROM test_cases_2.t_global_variables  WHERE var_key='pl_daily_dwp'; 
		
		
		SET total_count=0;
		SET sample_count=0;
		
		SELECT COUNT(*) INTO total_count FROM emihealth_final.`dwp_doctor_stats_daily` WHERE isactive=1;
		
		IF(total_count < 100) THEN
			SET sample_count=total_count;
		ELSE
			SET sample_count=(total_count*percent_value)/100;
		END IF;
		
		insert into test_cases_2.t_temp_dwp_daily 
			(
				
				
		 res_id,
		 attend,
		 date_of_service ,
	         patient_count,
	         anesthesia_time,
	         multisite_time,
	         fill_time,
		 sum_of_all_proc_mins, 
		 color_code,
	         doc_wd_patient_max,
		 excess_time,
		 final_time
		
		
			) 
		SELECT  
			
				id,
				attend,
				date_of_service,
				patient_count,
				anesthesia_time,
				multisite_time,
				fill_time,
		                sum_of_all_proc_mins,  
		                color_code,
		                doc_wd_patient_max,
		                excess_time,
		                final_time
				
			
		FROM emihealth_final.dwp_doctor_stats_daily 
		WHERE isactive=1 ORDER BY RAND() LIMIT sample_count;
		
	
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_dwp_daily;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts3_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts3_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts3_tc1B_columnValidation`(OUT success INT ,OUT test_status_out BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  
  DECLARE t_id BIGINT(20);
  DECLARE t_attend VARCHAR (50) DEFAULT "" ;
  DECLARE t_dos DATETIME DEFAULT null;
  
  
  
  DECLARE tot_time,avail_time,chair_plus_time DOUBLE DEFAULT 0;  
  
  DECLARE temp_count,count_total_records,count_defective_records,chair_count,sum_time,sub_time INT DEFAULT 0;
  
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id,attend,date_of_service FROM test_cases_2.t_temp_dwp_daily ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id,t_attend,t_dos;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		-- final time
		
			select (sum_of_all_proc_mins+anesthesia_time) into sum_time FROM test_cases_2.`t_temp_dwp_daily` WHERE attend = t_attend AND date_of_service = t_dos ;
			SELECT (multisite_time+fill_time) INTO sub_time FROM test_cases_2.`t_temp_dwp_daily` WHERE attend = t_attend AND date_of_service = t_dos ;
			
			UPDATE test_cases_2.t_temp_dwp_daily 	  
		        SET expected_final_time=sum_time-sub_time 
		        WHERE id=t_id; 
			    
		-- final red yellow and green
		  
		      SELECT (final_time-doc_wd_patient_max) INTO tot_time  FROM test_cases_2.`t_temp_dwp_daily` WHERE attend = t_attend AND date_of_service = t_dos ;
			IF (tot_time > 0) THEN 
				UPDATE test_cases_2.t_temp_dwp_daily 
				SET expected_color_code='red',
				expected_excess_time = tot_time, 
				test_detail='count.'
				WHERE id=t_id;
			ELSE 	  
				IF (tot_time > -96 AND tot_time<=0) THEN 
					UPDATE test_cases_2.t_temp_dwp_daily 
					SET expected_color_code='yellow',
					expected_excess_time = tot_time, 
					test_detail='count.'
					WHERE id=t_id;
				ELSE 	  
					UPDATE test_cases_2.t_temp_dwp_daily 
					SET expected_color_code='green',
					expected_excess_time = tot_time, 
					test_detail='count.'
					WHERE id=t_id;
				END IF ; 
			END IF ; 
	        END LOOP ;
  CLOSE my_cursor ;
  
 -- <<=== ALGO CORE PROCESSING ENDS
	UPDATE test_cases_2.t_temp_dwp_daily
	SET	test_status = FALSE
	WHERE	color_code != expected_color_code;
	
	UPDATE test_cases_2.t_temp_dwp_daily
	SET	test_status = TRUE
	WHERE	color_code = expected_color_code;
	
 -- MARKING AMBIGUOUS RECORDS(status column and test detail)
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_dwp_daily;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_dwp_daily WHERE test_status=0;
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_dwp_daily WHERE  test_status IS NULL;
	IF(temp_count != 0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		
		IF(count_defective_records=0) THEN
			SET test_status_out=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status_out=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
	
  END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts3_tc2_ppNplDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts3_tc2_ppNplDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts3_tc2_ppNplDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	
	SELECT 	SUM(proc_unit)INTO res_count 
	FROM 	emihealth_final.procedure_performed AS pp
		INNER JOIN
		emihealth_final.`ref_standard_procedures` AS ref
		ON pp.`proc_code` = ref.`pro_code`
	WHERE 	pp.`is_invalid` = 0
		ANd pro_code not like 'D8%'
		;
	
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.`dwp_doctor_stats_daily` WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts3_tc3_ppNplDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts3_tc3_ppNplDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts3_tc3_ppNplDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT 	SUM(pp.paid_money)
	INTO 	res_paid_money   
	FROM  	emihealth_final.procedure_performed AS pp
		INNER JOIN
		emihealth_final.`ref_standard_procedures` AS ref
		ON pp.`proc_code` = ref.`pro_code`
	WHERE 	is_invalid = 0 
	AND 	ref.`pro_code` NOT LIKE 'D8%'
		;
		 
	SELECT 	SUM(income) 
	INTO 	pld_income 
	FROM 	emihealth_final.`dwp_doctor_stats_yearly` 
	WHERE 	isactive=1;
	
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in pp table then pl_dialy table');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then pp table');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts3_tc4_ppNplDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts3_tc4_ppNplDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts3_tc4_ppNplDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(YEAR(pp.date_of_service))) 
	INTO 	res_years_count 
	FROM 	emihealth_final.`procedure_performed` as pp
		inner join
		emihealth_final.`ref_standard_procedures` as ref
		on pp.proc_code = ref.pro_code		
	WHERE 	pp.is_invalid = 0
		and ref.pro_code not like 'D8%'
		;
		
        SELECT 	COUNT(DISTINCT(YEAR))  
        INTO 	pld_years_count 
        FROM 	emihealth_final.`dwp_doctor_stats_daily` 
        WHERE 	isactive=1;
        
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in pp table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in pp table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then pp table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_TS4_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_TS4_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_TS4_PL_MONTHLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts4_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_02_dwp_ts4_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying table[emihealth_final.dwp_doctor_stats_monthly] by generating test table[test_cases_2.t_temp_02_dwp_plmonthly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts4_tc1A_testTableGen/t_02_dwp_ts4_tc1B_columnValidation'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts4_tc2_checkCountPlDailynPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying total counts from pl_daily table to pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts4_tc2_checkCountPlDailynPlMonthly'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts4_tc3_checkPaidMoneyPlDailynPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying income summation is equal in  pl_daily table and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts4_tc3_checkPaidMoneyPlDailynPlMonthly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts4_tc4_checkEqualFinalTimePlDailynPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying final time summation is equal in  pl_daily table and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts4_tc4_checkEqualFinalTimePlDailynPlMonthly'
		);
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts4_tc5_distinctYearsCountPlDailynPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying distinct years count is equal in  pl_daily table and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts4_tc5_distinctYearsCountPlDailynPlMonthly'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts4_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts4_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts4_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_multi_doctor_stats_monthly` WHERE isactive=1;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_dwp';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_02_dwp_plmonthly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_02_dwp_plmonthly_test_table` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` bigint(20) default null,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2)   NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2)  DEFAULT NULL,
	  
	  `actual_proc_min_per_month` INT(6) ZEROFILL default NULL,
	  `expec_proc_min_per_month` INT(6) ZEROFILL default NULL,
	  
	  `actual_final_time` int(6) zerofill default null,
	  `expec_final_time`  INT(6) ZEROFILL DEFAULT NULL,	
	  
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_02_dwp_plmonthly_test_table; 
	
	
	INSERT INTO test_cases_2.t_temp_02_dwp_plmonthly_test_table
		(
			res_id
			,attend
			,MONTH
			,YEAR
			
			,actual_procedure_count
			,actual_patient_count
			,actual_proc_min_per_month
			,actual_income
			,actual_final_time
			,actual_color_code
		)
	SELECT 
		id
		,attend
		,MONTH
		,YEAR
		
		,procedure_count
		,patient_count
		,sum_of_all_proc_mins_per_month
		,income
		,final_time
		,color_code
	FROM emihealth_final.`dwp_doctor_stats_monthly` 
	WHERE isactive=1 
	ORDER BY (CONCAT(MONTH,YEAR)) DESC 
	LIMIT required_rows
		;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_02_dwp_plmonthly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts4_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts4_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts4_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	declare temp_expec_proc_min_per_month,temp_actual_proc_min_per_month int default 0;
	declare temp_expec_final_time, temp_actual_final_time int default 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red','green','yellow') DEFAULT NULL;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check,temp_y_check ,temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_02_dwp_plmonthly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT 	sum(procedure_count) INTO temp_expec_procedure_count 
			FROM 	emihealth_final.`dwp_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			SELECT 	sum(patient_count) INTO temp_expec_patient_count 
			FROM 	emihealth_final.`dwp_doctor_stats_daily`  
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			
			SELECT	ROUND(SUM(income),2) INTO temp_expec_income 
			FROM 	emihealth_final.`dwp_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			SELECT	SUM(sum_of_all_proc_mins) INTO temp_expec_proc_min_per_month 
			FROM 	emihealth_final.`dwp_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
				
			SELECT	SUM(final_time) INTO temp_expec_final_time 
			FROM 	emihealth_final.`dwp_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			
			SELECT	COUNT(*) INTO temp_r_check 
			FROM 	emihealth_final.dwp_doctor_stats_daily 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='red';
			
			SELECT 	COUNT(*) INTO temp_y_check 
			FROM 	emihealth_final.dwp_doctor_stats_daily 
			WHERE 	isactive=1 AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='yellow';
					
			SELECT 	COUNT(*) INTO temp_g_check 
			FROM 	emihealth_final.dwp_doctor_stats_daily 
			WHERE 	isactive=1 AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				if(temp_y_check != 0) then
					SET temp_expec_color_code='yellow';
				else
					SET temp_expec_color_code='green';
				end if;
			END IF;
			
			SELECT 	actual_procedure_count
				,actual_patient_count
				,actual_income
				,actual_proc_min_per_month
				,actual_final_time
				,actual_color_code
				
			INTO   temp_actual_procedure_count
				,temp_actual_patient_count
				,temp_actual_income
				,temp_actual_proc_min_per_month
				,temp_actual_final_time
				,temp_actual_color_code
			
			FROM 	test_cases_2.t_temp_02_dwp_plmonthly_test_table  
			WHERE 	attend=t_attend 
				AND YEAR=t_year 
				AND MONTH=t_month 
			LIMIT 	1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';                     
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_actual_proc_min_per_month != temp_expec_proc_min_per_month) THEN
							SET temp_test_detail='Column(proc_min_per_month)  values are not matched.';				     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';	                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_final_time != temp_expec_final_time)THEN
									SET temp_test_detail='Column(final_time)  values are not matched.';
									SET temp_test_status=FALSE;
								ELSe
									SET temp_test_detail='Data against    all    columns    is   ok.';
									SET temp_test_status=TRUE;
			
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_02_dwp_plmonthly_test_table 
				 SET 
					expec_procedure_count=temp_expec_procedure_count
					,expec_patient_count=temp_expec_patient_count
					,expec_income= temp_expec_income 
					,expec_proc_min_per_month = temp_expec_proc_min_per_month
					,expec_final_time = temp_expec_final_time
					,expec_color_code = temp_expec_color_code
					,test_detail=temp_test_detail
					,test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			SET t_attend= null;
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			 
			
			SET temp_test_detail= null;
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
	
	
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_02_dwp_plmonthly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_02_dwp_plmonthly_test_table WHERE test_status != TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_02_dwp_plmonthly_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_02_dwp_plmonthly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_02_dwp_plmonthly_test_table WHERE test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts4_tc2_checkCountPlDailynPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts4_tc2_checkCountPlDailynPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts4_tc2_checkCountPlDailynPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE pld_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) INTO pld_count 
	FROM  	(
			select 	count(*)
			from 	emihealth_final.`dwp_doctor_stats_daily`
			WHERE 	isactive=1
			GROUP 
			BY 	attend, MONTH, YEAR
		 ) as abc;
		 		 
	SELECT 	count(*) INTO plm_count 
	FROM 	emihealth_final.`dwp_doctor_stats_monthly`
	WHERE 	isactive=1;
	
	
		
	IF(pld_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in pl_daily and pl_monthly table';
	ELSE
		SET test_status=FALSE;
		IF(pld_count>plm_count)THEN
			SET test_detail=CONCAT(pld_count-plm_count,' more counts  found in pl_daily table then pl_monthly table');
		ELSE
			SET test_detail=CONCAT(plm_count-pld_count,' more counts found in pl_monthly table then pl_daily table');
		END IF;
	END IF;
	
	
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts4_tc3_checkPaidMoneyPlDailynPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts4_tc3_checkPaidMoneyPlDailynPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts4_tc3_checkPaidMoneyPlDailynPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money double DEFAULT 0;
	DECLARE plm_income DOUBLE DEFAULT 0;
	
	SELECT round(SUM(income),2) INTO  res_paid_money FROM emihealth_final.dwp_doctor_stats_daily WHERE isactive=1;
	SELECT round(SUM(income),2) INTO plm_income FROM emihealth_final.dwp_doctor_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in pl_daily table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then pl_daily table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts4_tc4_checkEqualFinalTimePlDailynPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts4_tc4_checkEqualFinalTimePlDailynPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts4_tc4_checkEqualFinalTimePlDailynPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE pld_final_time_sum INT DEFAULT 0;
	DECLARE plm_final_time_sum INT DEFAULT 0;
	
	SELECT	sum(final_time) 
	INTO 	pld_final_time_sum  
	FROM 	emihealth_final.`dwp_doctor_stats_daily` 
	WHERE  	isactive=1
		;
	SELECT 	SUM(final_time) 
	INTO 	plm_final_time_sum 
	FROM 	emihealth_final.`dwp_doctor_stats_monthly` 
	WHERE 	isactive=1
		;
	
	IF(pld_final_time_sum=plm_final_time_sum) THEN
		SET test_status=TRUE;
		SET test_detail='Equal Final Time Sum found in pl_daily table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(pld_final_time_sum>plm_final_time_sum)THEN
			SET test_detail=CONCAT(pld_final_time_sum-plm_final_time_sum,' more Final Time found in pl_daily table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_final_time_sum-pld_final_time_sum,' more Final Time found in pl_monthly table then pld table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts4_tc5_distinctYearsCountPlDailynPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts4_tc5_distinctYearsCountPlDailynPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts4_tc5_distinctYearsCountPlDailynPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pld_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(YEAR(date_of_service))) 
	INTO 	pld_years_count 
	FROM 	emihealth_final.`dwp_doctor_stats_daily` 
	WHERE 	isactive=1
		;
        SELECT 	COUNT(DISTINCT(YEAR))  
        INTO 	plm_years_count 
        FROM 	emihealth_final.`dwp_doctor_stats_monthly` 
        WHERE 	isactive=1
		;
	
	IF(pld_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in pl_daily table and pl_monthly';
	ELSE
		SET test_status=FALSE;
		IF(pld_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(pld_years_count-plm_years_count,' more year counts found in pl_daily table then pl_monthly table');
		ELSE
			SET test_detail=CONCAT(plm_years_count-pld_years_count,' more year counts found in pl_monthly table then pl_daily table');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_TS5_PL_YEARLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_TS5_PL_YEARLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_TS5_PL_YEARLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts5_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_02_dwp_ts5_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying table[emihealth_final.dwp_doctor_stats_yearly] by generating test table[test_cases_2.t_temp_02_dwp_plyearly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts5_tc1A_testTableGen/t_02_dwp_ts5_tc1B_columnValidation'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts5_tc2_checkCountPlDailynPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying total counts from pl_daily table to pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts5_tc2_checkCountPlDailynPlYearly'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts5_tc3_checkPaidMoneyPlDailynPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying income summation is equal in  pl_daily table and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts5_tc3_checkPaidMoneyPlDailynPlYearly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts5_tc4_checkEqualFinalTimePlDailynPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying final time summation is equal in  pl_daily table and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts5_tc4_checkEqualFinalTimePlDailynPlYearly'
		);
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts5_tc5_distinctYearsCountPlDailynPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying distinct years count is equal in  pl_daily table and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts5_tc5_distinctYearsCountPlDailynPlYearly'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts5_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts5_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts5_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`dwp_doctor_stats_yearly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_yearly_dwp';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_02_dwp_plyearly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_02_dwp_plyearly_test_table` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` bigint(20) default null,
	  `attend` VARCHAR(250) NOT NULL,
	  
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2)   NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2)  DEFAULT NULL,
	 
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_02_dwp_plyearly_test_table; 
	
	
	INSERT INTO test_cases_2.t_temp_02_dwp_plyearly_test_table
		(
			res_id
			,attend
			,YEAR
			
			,actual_procedure_count
			,actual_patient_count
			,actual_income
			,actual_color_code
		)
	SELECT 
			id
			,attend
			,YEAR
		
			,procedure_count
			,patient_count
			,income
			,color_code
			
	FROM emihealth_final.`dwp_doctor_stats_yearly` 
	WHERE isactive=1 
	ORDER BY (CONCAT(YEAR)) DESC 
	LIMIT required_rows
		;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_02_dwp_plyearly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts5_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts5_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts5_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red','green','yellow') DEFAULT NULL;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check,temp_y_check ,temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,YEAR FROM test_cases_2.t_temp_02_dwp_plyearly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT 	sum(procedure_count) INTO temp_expec_procedure_count 
			FROM 	emihealth_final.`dwp_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			SELECT 	sum(patient_count) INTO temp_expec_patient_count 
			FROM 	emihealth_final.`dwp_doctor_stats_daily`  
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			
			SELECT	ROUND(SUM(income),2) INTO temp_expec_income 
			FROM 	emihealth_final.`dwp_doctor_stats_daily` 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;		
			
			
			SELECT	COUNT(*) INTO temp_r_check 
			FROM 	emihealth_final.dwp_doctor_stats_daily 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='red';
			
			SELECT 	COUNT(*) INTO temp_y_check 
			FROM 	emihealth_final.dwp_doctor_stats_daily 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				and attend = t_attend
				AND color_code='yellow';
					
			SELECT 	COUNT(*) INTO temp_g_check 
			FROM 	emihealth_final.dwp_doctor_stats_daily 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				if(temp_y_check != 0) then
					SET temp_expec_color_code='yellow';
				else
					SET temp_expec_color_code='green';
				end if;
			END IF;
			
			SELECT 	actual_procedure_count
				,actual_patient_count
				,actual_income
				,actual_color_code
				
			INTO   temp_actual_procedure_count
				,temp_actual_patient_count
				,temp_actual_income
				,temp_actual_color_code
			
			FROM 	test_cases_2.t_temp_02_dwp_plyearly_test_table  
			WHERE 	attend=t_attend 
				AND YEAR=t_year 
			LIMIT 	1;
		
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';                     
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_actual_color_code != temp_expec_color_code)THEN
							SET temp_test_detail='Column(color_code)       values are not matched.';	                     
							SET temp_test_status=FALSE;
						ELSE
							SET temp_test_detail='Data against    all    columns    is   ok.';
							SET temp_test_status=TRUE;
		
						END IF;	
					END IF;
				END IF;
			END IF;
			
		
			UPDATE test_cases_2.t_temp_02_dwp_plyearly_test_table 
				 SET 
					expec_procedure_count=temp_expec_procedure_count
					,expec_patient_count=temp_expec_patient_count
					,expec_income= temp_expec_income 
					,expec_color_code = temp_expec_color_code
					,test_detail=temp_test_detail
					,test_status=temp_test_status
			WHERE attend=t_attend  AND YEAR=t_year;
			
			
			SET t_attend=null;
			SET t_year=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			 
			
			SET temp_test_detail=null;
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_02_dwp_plyearly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_02_dwp_plyearly_test_table WHERE test_status != TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_02_dwp_plyearly_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_02_dwp_plyearly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_02_dwp_plyearly_test_table WHERE test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts5_tc2_checkCountPlDailynPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts5_tc2_checkCountPlDailynPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts5_tc2_checkCountPlDailynPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE pld_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) INTO pld_count 
	FROM  	(
			select 	count(*)
			from 	emihealth_final.`dwp_doctor_stats_daily`
			WHERE 	isactive=1
			GROUP 
			BY 	attend, YEAR
		 ) as abc ;
		 		 
	SELECT 	count(*) INTO ply_count 
	FROM 	emihealth_final.`dwp_doctor_stats_yearly`
	WHERE 	isactive=1;
	
	
		
	IF(pld_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in pl_daily and pl_yearly table';
	ELSE
		SET test_status=FALSE;
		IF(pld_count>ply_count)THEN
			SET test_detail=CONCAT(pld_count-ply_count,' more counts  found in pl_daily table then pl_yearly table');
		ELSE
			SET test_detail=CONCAT(ply_count-pld_count,' more counts found in pl_yearly table then pl_daily table');
		END IF;
	END IF;
	
	
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts5_tc3_checkPaidMoneyPlDailynPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts5_tc3_checkPaidMoneyPlDailynPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts5_tc3_checkPaidMoneyPlDailynPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pld_income double DEFAULT 0;
	DECLARE ply_income DOUBLE DEFAULT 0;
	
	SELECT round(SUM(income),2) INTO  pld_income FROM emihealth_final.dwp_doctor_stats_daily WHERE isactive=1;
	SELECT round(SUM(income),2) INTO ply_income FROM emihealth_final.dwp_doctor_stats_yearly WHERE isactive=1;
	
	IF(pld_income=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(pld_income>ply_income)THEN
			SET test_detail=CONCAT(pld_income-ply_income,' more money found in pl_daily table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-pld_income,' more money found in pl_monthly table then pl_daily table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts5_tc4_checkEqualFinalTimePlDailynPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts5_tc4_checkEqualFinalTimePlDailynPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts5_tc4_checkEqualFinalTimePlDailynPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE pld_final_time_sum INT DEFAULT 0;
	DECLARE ply_final_time_sum INT DEFAULT 0;
	
	SELECT sum(final_time) INTO pld_final_time_sum FROM emihealth_final.`dwp_doctor_stats_daily` WHERE  isactive=1 ;
	SELECT SUM(final_time) INTO ply_final_time_sum FROM emihealth_final.`dwp_doctor_stats_yearly` WHERE isactive=1;
	
	IF(pld_final_time_sum = ply_final_time_sum) THEN
		SET test_status=TRUE;
		SET test_detail='Equal Final Time Sum found in pl_daily table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(pld_final_time_sum>ply_final_time_sum)THEN
			SET test_detail=CONCAT(pld_final_time_sum-ply_final_time_sum,' more Final Time found in pl_daily table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_final_time_sum-pld_final_time_sum,' more Final Time found in pl_yearly table then pl_daily table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts5_tc5_distinctYearsCountPlDailynPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts5_tc5_distinctYearsCountPlDailynPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts5_tc5_distinctYearsCountPlDailynPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pld_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(YEAR(date_of_service))) 
	INTO 	pld_years_count 
	FROM 	emihealth_final.`dwp_doctor_stats_daily` 
	WHERE 	isactive=1;
	
        SELECT 	COUNT(DISTINCT(YEAR))  
        INTO 	ply_years_count 
        FROM 	emihealth_final.`dwp_doctor_stats_yearly` 
        WHERE isactive=1;
	
	
	
	IF(pld_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in pl_daily table and pl_yearly';
	ELSE
		SET test_status=FALSE;
		IF(pld_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(pld_years_count-ply_years_count,' more year counts found in pl_daily table then pl_yearly table');
		ELSE
			SET test_detail=CONCAT(ply_years_count-pld_years_count,' more year counts found in pl_yearly table then pl_daily table');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_TS6_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_TS6_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_TS6_DASHBOARD_DAILY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts6_tc1A_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_02_dwp_ts6_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_temp_02_dwp_dbdaily_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts6_tc1A_dashboardTestTable/t_02_dwp_ts6_tc1B_dashboardDailyValidation'
		 );
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts6_tc2_checkCountDosPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying pl_daily and db_daily table dos counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts6_tc2_checkCountDosPLDnDBD'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts6_tc3_checkTotalCountPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying total pl_daily table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts6_tc3_checkTotalCountPLDnDBD'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts6_tc4_checkRygCountsPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying RYG counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts6_tc4_checkRygCountsPLDnDBD'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts6_tc5_checkRedCountsPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying red counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts6_tc5_checkRedCountsPLDnDBD'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts6_tc6_checkYellowCountsPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying yellow counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts6_tc6_checkYellowCountsPLDnDBD'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts6_tc7_checkGreenCountsPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying green counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts6_tc7_checkGreenCountsPLDnDBD'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts6_tc1A_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts6_tc1A_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts6_tc1A_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT 	COUNT(*) 
	INTO 	total_counts 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 AND TYPE=02;
	
	SELECT 	var_value 
	INTO 	weightage 
	FROM 	test_cases_2.t_global_variables 
	WHERE 	var_key='db_daily_dwp';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	DROP TABLE IF EXISTS t_temp_02_dwp_dbdaily_test_table;
	CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_02_dwp_dbdaily_test_table` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_02_dwp_dbdaily_test_table; 
	
	
	insert into test_cases_2.t_temp_02_dwp_dbdaily_test_table
		(
		date_of_service
		,actual_no_of_providers
		,actual_total_red
		,actual_total_yellow
		,actual_total_green 
		)
	SELECT 
		date_of_service
		,number_of_providers
		,total_red
		,total_yellow
		,total_green
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	(isactive=1 AND TYPE=02) 
	oRDER 	BY (date_of_service) DESC 
	LIMIT 	required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_temp_02_dwp_dbdaily_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts6_tc1B_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts6_tc1B_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts6_tc1B_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT null;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		-- t_temp_02_dwp_dbdaily_test_table
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_temp_02_dwp_dbdaily_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.`dwp_doctor_stats_daily` WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.dwp_doctor_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.dwp_doctor_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.dwp_doctor_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_02_dwp_dbdaily_test_table
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_02_dwp_dbdaily_test_table 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos= null;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_02_dwp_dbdaily_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_02_dwp_dbdaily_test_table WHERE t_temp_02_dwp_dbdaily_test_table.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_02_dwp_dbdaily_test_table;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_02_dwp_dbdaily_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_02_dwp_dbdaily_test_table WHERE t_temp_02_dwp_dbdaily_test_table.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts6_tc2_checkCountDosPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts6_tc2_checkCountDosPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts6_tc2_checkCountDosPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(date_of_service)) 
	into 	pl_dist_dos_count 
	from 	emihealth_final.`dwp_doctor_stats_daily` 
	WHERE 	isactive=1
		;
	SELECT 	COUNT(DISTINCT(date_of_service)) 
	into 	db_dist_dos_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=2
		;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
	
	set success = 1;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts6_tc3_checkTotalCountPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts6_tc3_checkTotalCountPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts6_tc3_checkTotalCountPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	pl_total_count 
	from 	emihealth_final.`dwp_doctor_stats_daily` 
	WHERE 	isactive=1
		;
		
	SELECT 	SUM(number_of_providers) 
	INTO 	db_total_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=2
		;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
	set success = 1;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts6_tc4_checkRygCountsPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts6_tc4_checkRygCountsPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts6_tc4_checkRygCountsPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	pl_total_count 
	from 	emihealth_final.`dwp_doctor_stats_daily` 
	WHERE 	isactive=1
		;
	SELECT 	SUM(number_of_providers) 
	INTO 	db_total_ryg_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=2
		;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts6_tc5_checkRedCountsPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts6_tc5_checkRedCountsPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts6_tc5_checkRedCountsPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	pl_red_count 
	from 	emihealth_final.`dwp_doctor_stats_daily` 
	WHERE 	isactive=1 
		AND color_code='red'
		;
		
	SELECT 	SUM(total_red) 
	into 	db_red_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=2
		;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts6_tc6_checkYellowCountsPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts6_tc6_checkYellowCountsPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts6_tc6_checkYellowCountsPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	pl_yellow_count 
	from 	emihealth_final.`dwp_doctor_stats_daily` 
	WHERE 	isactive=1 
		AND color_code='yellow'
		;
	SELECT 	SUM(total_yellow) 
	INTO 	db_yellow_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=2;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts6_tc7_checkGreenCountsPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts6_tc7_checkGreenCountsPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts6_tc7_checkGreenCountsPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	pl_green_count 
	from 	emihealth_final.`dwp_doctor_stats_daily` 
	WHERE 	isactive=1 
		AND color_code='green'
		;
		
	SELECT 	SUM(total_green) 
	INTO 	db_green_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=2
		;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts7_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_02_dwp_ts7_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_02_dwp_dbMonthly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts7_tc1A_testTableGen/t_02_dwp_ts7_tc1B_columnValidation'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying distinct year counts in pl_monthly and db_monthly'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts7_tc2_countDistinctYearsPlMNDbM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying total_count db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts7_tc3_checkTotalCountPlMNdbm'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts7_tc4_checkCountNoOfProvPlMnDBM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying providers count in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts7_tc4_checkCountNoOfProvPlMnDBM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts7_tc5_checkYellowCountsPLMnDBM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying yellow count db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts7_tc5_checkYellowCountsPLMnDBM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts7_tc6_checkGreenCountsPlMnDBM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying green count in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts7_tc6_checkGreenCountsPlMnDBM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying paid_money  in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM'
		);
	
	
					
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts7_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts7_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts7_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.`dashboard_monthly_results` WHERE isactive=1 and type= 2;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_dwp';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_02_dwp_dbMonthly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_02_dwp_dbMonthly_test_table` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_paid_money` DOUBLE DEFAULT 0,
	  `expec_paid_money` DOUBLE DEFAULT 0,
	  
	  `actual_recovered_money` double default 0,
	  `expec_recovered_money` double default 0,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_02_dwp_dbMonthly_test_table; 
	
	
	insert into test_cases_2.t_temp_02_dwp_dbMonthly_test_table
		(
			year
			,month 
			,actual_no_of_providers
			,actual_total_red
			,actual_total_green
			,actual_paid_money
			,actual_recovered_money
		)
	SELECT 		year
			,month
			,number_of_providers
			,total_red
			,total_green
			,total_paid_money
			,total_red_recovered_money
	from 	emihealth_final.dashboard_monthly_results 
	WHERE 	(isactive=1 and type=02) 
	ORDER 	BY(concat(year,month)) desc 
	LIMIT 	required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_02_dwp_dbMonthly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts7_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts7_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts7_tc1B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	declare temp_expec_paid_money, temp_actual_paid_money double default 0;
	declare temp_expec_recovered_money, temp_actual_recovered_money double default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_02_dwp_dbMonthly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			-- dwp_doctor_stats_monthly
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.`dwp_doctor_stats_monthly` WHERE month=t_month and year=t_year AND isactive=1;
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.dwp_doctor_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive=1;
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.dwp_doctor_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive=1;
			
			select 	round(sum(income),2)
			into 	temp_expec_paid_money
			from 	emihealth_final.`dwp_doctor_stats_daily`
			where 	month = t_month
				and year = t_year
				and isactive = 1
				;
				
			SELECT 	ROUND(SUM(income),2)
			INTO 	temp_expec_recovered_money
			FROM 	emihealth_final.`dwp_doctor_stats_daily`
			WHERE 	MONTH = t_month
				AND YEAR = t_year
				and color_code = 'red'
				AND isactive = 1
				;
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green, actual_paid_money, actual_recovered_money
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green, temp_actual_paid_money, temp_actual_recovered_money
			FROM test_cases_2.t_temp_02_dwp_dbMonthly_test_table
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_green !=temp_actual_total_green) THEN
						SET test_detail='Column(total_green ) values   are  not matched';
						SET temp_test_status=FALSE;
					ELSE
						if(temp_expec_paid_money != temp_actual_paid_money)then
							SET test_detail='Column(paid_money) values   are  not matched';
							SET temp_test_status=FALSE;
						else
							if(temp_expec_recovered_money != temp_actual_recovered_money)then
								SET test_detail='Column(recovered_money) values   are  not matched';
								SET temp_test_status=FALSE;
							else
								SET test_detail='Data   in   against   all    columns   is   ok';
								SET temp_test_status=TRUE;
							end if;
						end if;	
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_02_dwp_dbMonthly_test_table 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_green =temp_expec_total_green,
					expec_paid_money = temp_expec_paid_money,
					expec_recovered_money = temp_expec_recovered_money,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_02_dwp_dbMonthly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_02_dwp_dbMonthly_test_table WHERE t_temp_02_dwp_dbMonthly_test_table.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_02_dwp_dbMonthly_test_table;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_02_dwp_dbMonthly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_02_dwp_dbMonthly_test_table WHERE t_temp_02_dwp_dbMonthly_test_table.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts7_tc2_countDistinctYearsPLMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts7_tc2_countDistinctYearsPLMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts7_tc2_countDistinctYearsPLMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT	COUNT(DISTINCT(year)) 
	into 	plm_dist_years_count 
	from 	emihealth_final.`dwp_doctor_stats_monthly` 
	WHERE 	isactive=1
		;
	SELECT 	COUNT(DISTINCT(Year)) 
	into 	dbm_dist_years_count 
	from 	emihealth_final.dashboard_monthly_results 
	WHERE 	isactive=1 AND TYPE=02
		;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
	
	set success = 1 ;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts7_tc3_checkTotalCountPlMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts7_tc3_checkTotalCountPlMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts7_tc3_checkTotalCountPlMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT CONCAT(MONTH,YEAR)) 
	INTO 	plm_total_count 
	from 	emihealth_final.`dwp_doctor_stats_monthly` 
	WHERE 	isactive=1
		;
	SELECT 	count(*) 
	INTO 	dbm_total_count 
	from 	emihealth_final.dashboard_monthly_results 
	WHERE 	isactive=1 
		AND TYPE=02;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
	
	set success = 1;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts7_tc4_checkCountNoOfProvPlMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts7_tc4_checkCountNoOfProvPlMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts7_tc4_checkCountNoOfProvPlMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.`dwp_doctor_stats_monthly` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results 
	WHERE isactive=1 AND TYPE=02;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts7_tc5_checkYellowCountsPLMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts7_tc5_checkYellowCountsPLMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts7_tc5_checkYellowCountsPLMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT 	count(*)
	into 	pl_yellow_count
	FROM 	emihealth_final.`dwp_doctor_stats_monthly`
		-- emihealth_final.`dwp_doctor_stats_daily`
	WHERE 	isactive = 1 AND color_code = 'yellow';
	
	SELECT 	SUM(total_yellow)
	into 	db_yellow_count
	FROM 	emihealth_final.`dashboard_monthly_results` 
	WHERE 	TYPE = 2 
		and isactive = 1;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
	
	set success = 1;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts7_tc6_checkGreenCountsPlMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts7_tc6_checkGreenCountsPlMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts7_tc6_checkGreenCountsPlMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	plm_green_count 
	from 	emihealth_final.`dwp_doctor_stats_monthly` 
	WHERE 	isactive=1 
		AND color_code='green'
		;
		
	SELECT 	SUM(total_green) 
	into 	dbm_green_count 
	from 	emihealth_final.dashboard_monthly_results 
	WHERE 	isactive=1 
		AND TYPE=2;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts7_tc7_checkTotalPaidMoneyCountPLMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts7_tc7_checkTotalPaidMoneyCountPLMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts7_tc7_checkTotalPaidMoneyCountPLMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT 	SUM(income) 
	INTO 	plm_total_paid_money 
	from 	emihealth_final.`dwp_doctor_stats_daily` 
	WHERE 	isactive=1 and year != 2013
		;
		
	SELECT 	SUM(total_paid_money) 
	into 	dbm_total_paid_money 
	from 	emihealth_final.dashboard_monthly_results 
	WHERE 	isactive=1 
		AND TYPE=2
		;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts8_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_02_dwp_ts8_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_04_impAge_dbYearly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts8_tc1A_testTableGen/t_02_dwp_ts8_tc1B_columnValidation'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts8_tc2_countDistinctYearsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying pl_yearly and db_yearly table distinct years'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts8_tc2_countDistinctYearsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying pl_yearly and db_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts8_tc3_checkTotalCountPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts8_tc4_checkCountNoOfProvPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying no. of providers in db_yearly  and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts8_tc4_checkCountNoOfProvPlYnDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts8_tc5_checkTotalRedCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying red counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts8_tc5_checkTotalRedCountsPlYnDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts8_tc6_checkTotalYellowCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying yellow counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts8_tc6_checkTotalYellowCountsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts8_tc7_checkGreenCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying green counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts8_tc7_checkGreenCountsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying paid money money in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_02_dwp_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts8_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts8_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts8_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=02;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_dwp';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_02_dwp_dbYearly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_02_dwp_dbYearly_test_table` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill default 0,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT null,
	  
	  `actual_total_red` INT(11)zerofill  default 0,
	  `expec_total_red` INT(11) zerofill DEFAULT null,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  DEFAULT 0,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  default 0,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT null,
	  
	  `actual_paid_money` double default 0,
	  `expec_paid_money` double default 0,
	  
	  `actual_recovered_money` double default 0,
	  `expec_recovered_money` double default 0,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_02_dwp_dbYearly_test_table; 
	
	
	insert into test_cases_2.t_temp_02_dwp_dbYearly_test_table
		(
			year
			,actual_no_of_providers
			,actual_total_red
			,actual_total_yellow
			,actual_total_green 
			,actual_paid_money
			,actual_recovered_money
		)
	SELECT 
			year
			,number_of_providers
			,total_red
			,total_yellow
			,total_green
			,total_paid_money
			,total_red_recovered_money
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 and type = 02
	ORDER 	BY(year)desc 
	LIMIT 	required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_02_dwp_dbYearly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts8_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts8_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts8_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	declare temp_expec_paid_money,temp_actual_paid_money double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_02_dwp_dbYearly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        -- t_temp_02_dwp_dbYearly_test_table
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT	COUNT(distinct(attend)) 
			INTO 	temp_expec_no_of_providers 
			from 	emihealth_final.`dwp_doctor_stats_yearly` 
			WHERE 	year=t_year AND isactive= 1;
			
			SELECT 	COUNT(distinct(attend))
			INTO 	temp_expec_total_red  
			from 	emihealth_final.dwp_doctor_stats_yearly 
			WHERE 	YEAR=t_year  AND color_code='red' AND isactive=1;
			
			SELECT 	COUNT(DISTINCT(attend))
			INTO 	temp_expec_total_yellow  
			FROM 	emihealth_final.dwp_doctor_stats_yearly 
			WHERE  	YEAR=t_year  AND color_code='yellow' AND isactive=1;
						
			SELECT 	COUNT(distinct(attend))
			INTO 	temp_expec_total_green  
			from 	emihealth_final.dwp_doctor_stats_yearly 
			WHERE  	YEAR=t_year  AND color_code='green' AND isactive=1;
			
			
			SELECT 	sum(income)
			INTO 	temp_expec_paid_money
			FROM 	emihealth_final.dwp_doctor_stats_daily 
			WHERE  	YEAR=t_year AND isactive=1;
			set temp_expec_paid_money = round(temp_expec_paid_money,2);
			
			SELECT 	SUM(income)
			INTO 	temp_expec_recovered_money
			FROM 	emihealth_final.`dwp_doctor_stats_daily` 
			WHERE  	YEAR=t_year AND isactive=1 and color_code = 'red';
			set temp_expec_recovered_money = round(temp_expec_recovered_money,2);
			
			SELECT 
				actual_no_of_providers
				,actual_total_red
				,actual_total_yellow
				,actual_total_green
				,actual_paid_money
				,actual_recovered_money
			INTO 	
				temp_actual_no_of_providers
				,temp_actual_total_red
				,temp_actual_total_yellow
				,temp_actual_total_green
				,temp_actual_paid_money
				,temp_actual_recovered_money
				
			FROM 	test_cases_2.t_temp_02_dwp_dbYearly_test_table
			WHERE 	YEAR=t_year 
			lIMIT 	1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET temp_test_detail='Column(no_of_providers) values are not matched';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET temp_test_detail='Column(total_red)    values  are  not  matched';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_green !=temp_actual_total_green) THEN
						SET temp_test_detail='Column(total_green) values   are  not matched';
						SET temp_test_status=FALSE;
					ELSE
						if(temp_expec_paid_money != temp_actual_paid_money)then
							SET temp_test_detail='Column(paid_money) values   are  not matched';
							SET temp_test_status=FALSE;
						else
							if(temp_expec_recovered_money != temp_actual_recovered_money)then
								SET temp_test_detail='Column(recovered_money) values   are  not matched';
								SET temp_test_status=FALSE;
							else
								SET temp_test_detail='Data   in   against   all    columns   is   ok';
								SET temp_test_status=TRUE;
							end if;
						end if;
					END IF;
				END IF;		
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_02_dwp_dbYearly_test_table 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red = temp_expec_total_red, 
					expec_total_green = temp_expec_total_green,
					expec_total_yellow = temp_expec_total_yellow,
					expec_paid_money = temp_expec_paid_money,
					expec_recovered_money = temp_expec_recovered_money,
					test_status = temp_test_status,
					test_detail = temp_test_detail
			WHERE YEAR = t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail=null;
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_02_dwp_dbYearly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_02_dwp_dbYearly_test_table WHERE t_temp_02_dwp_dbYearly_test_table.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_02_dwp_dbYearly_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_02_dwp_dbYearly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_02_dwp_dbYearly_test_table WHERE t_temp_02_dwp_dbYearly_test_table.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts8_tc2_countDistinctYearsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts8_tc2_countDistinctYearsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts8_tc2_countDistinctYearsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(year)) 
	into 	ply_dist_years_count 
	from 	emihealth_final.`dwp_doctor_stats_yearly` 
	WHERE 	isactive=1;
	
	SELECT 	COUNT(DISTINCT(Year)) 
	into 	dby_dist_years_count 
	from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=2;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
	set success = 1;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT  COUNT(*) 
	INTO 	ply_total_count
	from
		(
			select 	count(*)
			from 	emihealth_final.`dwp_doctor_stats_yearly`
			where 	isactive = 1
			GROUP 	by YEAR	
		) as myTab;
	
	SELECT 	count(*) 
	INTO 	dby_total_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=2;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts8_tc4_checkCountNoOfProvPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts8_tc4_checkCountNoOfProvPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts8_tc4_checkCountNoOfProvPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT 	sum(yearly_attends)
	INTO 	ply_total_count 
	from 	(
			select 	count(*) as yearly_attends
			from 	emihealth_final.`pic_doctor_stats_yearly`
			where 	isactive = 1
			group 	by year
		) as result
	;
	
	SELECT 	SUM(number_of_providers) 
	INTO 	dby_total_prov_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=1;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts8_tc5_checkTotalRedCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts8_tc5_checkTotalRedCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts8_tc5_checkTotalRedCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	into 	ply_red_count 
	from 	emihealth_final.`pic_doctor_stats_yearly` 
	WHERE 	isactive=1 AND color_code='red'
		;
	
	SELECT 	SUM(total_red) 
	into 	dby_red_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=1
		;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts8_tc6_checkTotalYellowCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts8_tc6_checkTotalYellowCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts8_tc6_checkTotalYellowCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	ply_yellow_count 
	from 	emihealth_final.`dwp_doctor_stats_yearly` 
	WHERE 	isactive=1 AND color_code='yellow'
		;
	SELECT 	SUM(total_yellow) 
	into 	dby_yellow_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=2;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts8_tc7_checkGreenCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts8_tc7_checkGreenCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts8_tc7_checkGreenCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	ply_green_count 
	from 	emihealth_final.`dwp_doctor_stats_yearly` 
	WHERE 	isactive=1 AND color_code='green'
		;
	SELECT 	SUM(total_green) 
	into 	dby_green_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=2
		;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02_dwp_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02_dwp_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02_dwp_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT 	SUM(income) 
	INTO 	ply_total_paid_money 
	from 	emihealth_final.`dwp_doctor_stats_yearly` WHERE isactive=1
		;
	SELECT 	SUM(total_paid_money) 
	INTO 	dby_total_paid_money 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=2;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table');
		END IF;
	END IF;
	
	set success = 1;	
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_02________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_02________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_02________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_MAIN`()
BEGIN
	
	call `t_04_impAge_TS2_RESULT_TABLE`();
	
	call `t_04_impAge_TS3_PL_DAILY_STATS_TABLE`();
	call `t_04_impAge_TS4_PL_MONTHLY_STATS_TABLE`();
	call `t_04_impAge_TS5_PL_YEARLY_STATS_TABLE`();
	
	call `t_04_impAge_TS6_DASHBOARD_DAILY_TABLE`();
	call `t_04_impAge_TS7_DASHBOARD_MONTHLY_TABLE`();
	call `t_04_impAge_TS8_DASHBOARD_YEARLY_TABLE`();
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts2_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts2_tc1B_resReasonValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		04
		,'Verifying table[emihealth_final.procedure_performed] column[impossible_age_status] by generating test table[test_cases_2.t_temp_04_impAge_result_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_04_impAge_ts2_tc1A_testTableGen/t_04_impAge_ts2_tc1B_resReasonValidation'
	);
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts2_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts2_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts2_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	-- =================================================
	--            Declaring All Variables 
	-- =================================================
	DECLARE reason_percent DECIMAL(5,2);
	declare reason_ryg_status varchar(10) default null;
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        DECLARE selected_reason INT;
        DECLARE iterator INT;
        
        
        -- =================================================
	--            Creating Table Structure
	-- =================================================
	DROP TABLE IF EXISTS test_cases_2.`t_temp_04_impAge_result_test_table`;
	CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_04_impAge_result_test_table` (
	`id` BIGINT(20) UNSIGNED  NOT NULL AUTO_INCREMENT ,
	`res_id` BIGINT(20)  DEFAULT NULL,
	`attend` VARCHAR(40) DEFAULT NULL,
	`mid` VARCHAR(99) DEFAULT NULL,
	`proc_code` VARCHAR(99) DEFAULT NULL,
	`patient_age` VARCHAR(99) DEFAULT NULL,
	`act_reason_level` INT(2) DEFAULT NULL,
	`exp_reason_level` INT(2) DEFAULT NULL,
	`act_ryg_status` VARCHAR(15) DEFAULT NULL,
	`exp_ryg_status` VARCHAR(15) DEFAULT NULL,
	`test_status` BOOL DEFAULT NULL,
	`test_detail` TINYTEXT DEFAULT NULL,
	PRIMARY KEY (`id`)
	) ENGINE=INNODB DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE test_cases_2.`t_temp_04_impAge_result_test_table`;
	
	
	-- =================================================
	--           Sampling And Inserting Data 
	-- =================================================
	SET iterator = 101;
        WHILE(iterator < 103) DO
		SET selected_reason= iterator;
		SELECT reason_weight, ryg_status INTO reason_percent, reason_ryg_status FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=04 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`procedure_performed`
		WHERE impossible_age_status = reason_ryg_status;
		
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		
		INSERT INTO test_cases_2.`t_temp_04_impAge_result_test_table`
		(
			res_id,
			attend,
			MID,
			proc_code,
			patient_age,
			act_ryg_status
		)
		SELECT 	id, 
			attend, 
			MID, 
			proc_code,
			patient_age,	
			impossible_age_status
		FROM 	emihealth_final.`procedure_performed`
		WHERE 	is_invalid=0  And impossible_age_status = reason_ryg_status
		ORDER 	
		BY 	RAND() 
		LIMIT 	reason_sample_count;	
	
		SET iterator = iterator + 1;
	END WHILE;
			
        SELECT COUNT(*) INTO temp_count FROM  test_cases_2.`t_temp_04_impAge_result_test_table`;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts2_tc1B_resReasonValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts2_tc1B_resReasonValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts2_tc1B_resReasonValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	-- =====================================================================================================================
	--            					Declaring All Variables 
	-- =====================================================================================================================
	-- For Holdind Data From Cursor
	DECLARE t_id BIGINT(20) DEFAULT 0 ;
	DECLARE t_attend VARCHAR(40) DEFAULT '' ;
	DECLARE t_mid VARCHAR(99) DEFAULT '';
	DECLARE t_specialty VARCHAR(250) DEFAULT '';
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_proc_code VARCHAR(99) DEFAULT '';
	DECLARE proc_code_exists VARCHAR(99) DEFAULT '';
	DECLARE t_patient_age INT DEFAULT 0;
	DECLARE t_tooth_no VARCHAR(99) DEFAULT '' ;
	
	-- For Holding Results of Queries
	DECLARE is_in_age_range INT DEFAULT 0;
	DECLARE p_min_age INT(11) DEFAULT 0;
	DECLARE p_max_age INT(11) DEFAULT 0;
			
	-- Variables below are used for setting Output parameters
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	-- Cursor Declarations
	DECLARE finished BOOL DEFAULT FALSE;
	DECLARE test_row_cursor CURSOR FOR
				SELECT 	id, attend, MID,proc_code, patient_age
				FROM  	test_cases_2.t_temp_04_impAge_result_test_table;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = TRUE;
	
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Starts 
	-- =====================================================================================================================
	OPEN test_row_cursor;
	get_test_row:LOOP
	
		FETCH test_row_cursor INTO t_id, t_attend, t_mid, t_proc_code, t_patient_age ;
		IF(finished = TRUE)THEN
			LEAVE get_test_row;
		END IF;
		
		
		
		SELECT COUNT(*) INTO proc_code_exists
		FROM  emihealth_final.`ref_standard_procedures` 
		WHERE 	pro_code=t_proc_code    	;	
		
		
	IF (proc_code_exists > 0)THEN 
		SELECT 	min_age, max_age
		INTO 	p_min_age, p_max_age
		FROM 	emihealth_final.`ref_standard_procedures` 
		WHERE 	pro_code=t_proc_code    		
		LIMIT 	1;
		-- New Addition Of Abnormal Age
		IF ((t_patient_age BETWEEN p_min_age AND p_max_age) and (t_patient_age < 116) )THEN 
			UPDATE test_cases_2.t_temp_04_impAge_result_test_table
			SET exp_ryg_status='green' WHERE id = t_id ;
		ELSE	
			UPDATE test_cases_2.t_temp_04_impAge_result_test_table
			SET exp_ryg_status='red' WHERE id = t_id ;		
		END IF;		
	ELSE 	
			UPDATE test_cases_2.t_temp_04_impAge_result_test_table
			SET exp_ryg_status='red' WHERE id = t_id ;		
	END IF;		
	END LOOP;
	
	CLOSE test_row_cursor;
	-- =====================================================================================================================
	--            				    Algo Core Processing Ends
	-- =====================================================================================================================
	
	UPDATE 	test_cases_2.t_temp_04_impAge_result_test_table
	SET 	test_status = 1
	WHERE 	act_ryg_status = exp_ryg_status
		;
	
	UPDATE 	test_cases_2.t_temp_04_impAge_result_test_table
	SET 	test_status = 0
	WHERE 	act_ryg_status != exp_ryg_status
		;
	-- Setting Up Output parameters [success, test_status, test_detail]
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_04_impAge_result_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_04_impAge_result_test_table WHERE  act_ryg_status != exp_ryg_status;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_result_test_table WHERE exp_ryg_status IS NULL;
	
	IF(temp_count>0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
	
		IF(count_defective_records=0) THEN
			SET test_status=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts3_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts3_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		04
		,'Verifying table[emihealth_final.impossible_age_daily] by generating test table[test_cases_2.t_temp_04_impAge_pldaily_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report'
		,'t_04_impAge_ts3_tc1A_testTableGen/t_04_impAge_ts3_tc1B_columnValidation'
	);
	
	/*
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts3_tc2_ppNplDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		02
		,'Verifying total counts in PL Daily and PP table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
	);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts3_tc3_ppNplDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		02
		,'Verifying Paid Money in PL Daily and PP table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
	);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts3_tc4_ppNplDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		02
		,'Verifying distinct year count in PL daily and PP table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
	); */
	
	
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts3_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts3_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts3_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE percent_value DECIMAL(4,2);
	DECLARE total_count ,temp_count INT;
        DECLARE sample_count INT;
        
        
        
        DROP TABLE IF EXISTS t_temp_04_impAge_pldaily_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_04_impAge_pldaily_test_table` (
		`id` BIGINT(20) NOT NULL AUTO_INCREMENT,
		`res_id` BIGINT(10) ZEROFILL NOT NULL,
		`attend` VARCHAR(20) DEFAULT NULL,
		`date_of_service` DATETIME DEFAULT NULL,
		
		`act_no_of_age_violatios` INT(11) ZEROFILL default 0,
		`exp_no_of_age_violatios` INT(11) ZEROFILL DEFAULT 0,
	
		`act_color_code` ENUM('red','green') default null,
		`exp_color_code` ENUM('red','green') default null,
		`test_status` BOOL DEFAULT NULL,
		`test_detail` TINYTEXT DEFAULT NULL,
		PRIMARY KEY (`id`)
		-- KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_04_impAge_pldaily_test_table;
        
        
       
	SELECT var_value INTO percent_value FROM test_cases_2.t_global_variables  WHERE var_key='pl_daily_impAge'; 
	SET total_count=0;
	SET sample_count=0;
	
	SELECT COUNT(*) INTO total_count FROM emihealth_final.`impossible_age_daily` WHERE isactive=1;
	
	IF(total_count < 100) THEN
		SET sample_count=total_count;
	ELSE
		SET sample_count=(total_count*percent_value)/100;
	END IF;
	
	
	
	
	insert into test_cases_2.t_temp_04_impAge_pldaily_test_table 
	(	
		 res_id
		 ,attend
		 ,date_of_service
		 
		 ,act_no_of_age_violatios
		 ,act_color_code
	) 
	SELECT  		
		id
		,attend
		,date_of_service
		
		,number_of_age_violations 
		,color_code
				
	FROM emihealth_final.impossible_age_daily 
	WHERE isactive=1 ORDER BY RAND() LIMIT sample_count;
	
	
	
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_04_impAge_pldaily_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
        
        
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts3_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts3_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts3_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	DECLARE t_id INT DEFAULT 0;
	DECLARE t_attend VARCHAR(50) DEFAULT null;
	DECLARE t_dos DATETIME DEFAULT NULL;
	
	
	DECLARE temp_exp_no_of_violations,temp_act_no_of_violations INT DEFAULT 0;
	DECLARE temp_exp_color_code,temp_act_color_code ENUM('red','green') DEFAULT NULL;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check,temp_y_check ,temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT id, attend,date_of_service FROM test_cases_2.t_temp_04_impAge_pldaily_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_id,t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			
			SELECT 	count(*) INTO 	temp_exp_no_of_violations
			FROM 	emihealth_final.`procedure_performed` 
			WHERE 	is_invalid = 0 
				and date_of_service = t_dos
				AND attend=t_attend
				and impossible_age_status = 'red'
				;
			
			
			SELECT	COUNT(*) INTO temp_r_check 
			FROM 	emihealth_final.`procedure_performed` 
			WHERE 	is_invalid = 0 
				and date_of_service = t_dos
				AND attend=t_attend 
				AND impossible_age_status='red';
					
			SELECT 	COUNT(*) INTO temp_g_check 
			FROM 	emihealth_final.procedure_performed 
			WHERE 	is_invalid = 0 
				AND date_of_service = t_dos
				AND attend=t_attend
				AND impossible_age_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_exp_color_code='red';
			ELSE
				SET temp_exp_color_code='green';
			END IF;
			
			
			SELECT 	act_no_of_age_violatios
				,act_color_code
			INTO    temp_act_no_of_violations
				,temp_act_color_code
			FROM 	test_cases_2.t_temp_04_impAge_pldaily_test_table  
			WHERE 	id = t_id
			LIMIT 	1;
		
			
			IF(temp_act_no_of_violations != temp_exp_no_of_violations) THEN
				SET temp_test_detail='Column(no_of_age_violations)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_act_color_code != temp_exp_color_code) THEN
					SET temp_test_detail='Column(color_code)    values are not matched.';
					SET temp_test_status=FALSE;
				ELSE
					SET temp_test_detail='Data against    all    columns    is   ok.';
					SET temp_test_status=TRUE;
				END IF;
			END IF;
							
			
			UPDATE test_cases_2.t_temp_04_impAge_pldaily_test_table 
			SET 
				exp_no_of_age_violatios = temp_act_no_of_violations
				,exp_color_code = temp_exp_color_code
				,test_detail=temp_test_detail
				,test_status=temp_test_status
			WHERE id = t_id;
			
			set t_id = 0;
			SET t_attend= null;
			set t_dos = null;
			
			set temp_exp_color_code = temp_act_color_code = 0 ;
			
			SET temp_test_detail= null;
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
	
	
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_04_impAge_pldaily_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_04_impAge_pldaily_test_table WHERE test_status != TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_pldaily_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_04_impAge_pldaily_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_pldaily_test_table WHERE test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
	
	
	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_TS4_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_TS4_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_TS4_PL_MONTHLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts4_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts4_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying table[emihealth_final.impossible_age_monthly] by generating test table[test_cases_2.t_temp_04_impAge_plmonthly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts4_tc1A_testTableGen/t_04_impAge_ts4_tc1B_columnValidation'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts4_tc2_checkCountPlDailynPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying total counts from pl_daily table to pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts4_tc2_checkCountPlDailynPlMonthly'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts4_tc3_checkPaidMoneyPlDailynPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying income summation is equal in  pl_daily table and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts4_tc3_checkPaidMoneyPlDailynPlMonthly'
		);
	
		
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts4_tc4_distinctYearsCountPlDailynPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying distinct years count is equal in  pl_daily table and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts4_tc4_distinctYearsCountPlDailynPlMonthly'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts4_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts4_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts4_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`impossible_age_monthly` WHERE isactive=1;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_impAge';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_04_impAge_plmonthly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_04_impAge_plmonthly_test_table` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` bigint(20) default null,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `act_procedure_count` INT(6) ZEROFILL default NULL,
	  `exp_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `act_patient_count` INT(6) ZEROFILL default NULL,
	  `exp_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `act_income` DOUBLE PRECISION(11,2)   default  NULL,
	  `exp_income` DOUBLE PRECISION (11,2)  DEFAULT NULL,
	  
	  `act_recovered_money` DOUBLE PRECISION(11,2)   NOT NULL,
	  `exp_recovered_money` DOUBLE PRECISION (11,2)  DEFAULT NULL,
	  
	  `act_no_of_age_violations` INT(6) ZEROFILL default NULL,
	  `exp_no_of_age_violations` INT(6) ZEROFILL DEFAULT NULL,
	  
	 `act_proc_min_per_month` int default null,
	 `exp_proc_min_per_month` INT DEFAULT NULL,
	 
	  `act_color_code` ENUM('red','green') default NULL,
	  `exp_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_04_impAge_plmonthly_test_table; 
	
	
	INSERT INTO test_cases_2.t_temp_04_impAge_plmonthly_test_table
		(
			res_id
			,attend
			,MONTH
			,YEAR
			
			,act_procedure_count
			,act_patient_count
			
			,act_income
			,act_recovered_money
			
			,act_no_of_age_violations
			,act_proc_min_per_month
			,act_color_code
		)
	SELECT 
		id
		,attend
		,MONTH
		,YEAR
		
		,procedure_count
		,patient_count
		
		,income
		,recovered_money
		
		,number_of_age_violations
		,sum_of_all_proc_mins_per_month
		,color_code
		
	FROM emihealth_final.`impossible_age_monthly` 
	WHERE isactive=1 
	ORDER BY (CONCAT(MONTH,YEAR)) DESC 
	LIMIT required_rows
		;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_04_impAge_plmonthly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts4_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts4_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts4_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_exp_procedure_count,temp_act_procedure_count INT DEFAULT 0;
	DECLARE temp_exp_patient_count,temp_act_patient_count INT DEFAULT null;
	DECLARE temp_exp_income,temp_act_income DOUBLE DEFAULT 0;
	declare temp_exp_recovered_money,temp_act_recovered_money DOUBLE DEFAULT 0;
	declare temp_exp_proc_min_per_month,temp_act_proc_min_per_month int default 0;
	declare temp_exp_no_of_age_violations, temp_act_no_of_age_violations int default 0;
	DECLARE temp_exp_color_code,temp_act_color_code ENUM('red','green') DEFAULT NULL;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check,temp_y_check ,temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_04_impAge_plmonthly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			 -- impossible_age_daily
			SELECT 	sum(procedure_count) INTO temp_exp_procedure_count 
			FROM 	emihealth_final.`impossible_age_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			/*
			-- later
			SELECT 	sum(patient_count) INTO temp_exp_patient_count 
			FROM 	emihealth_final.`impossible_age_daily`  
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			*/
			
			SELECT	ROUND(SUM(income),2) INTO temp_exp_income 
			FROM 	emihealth_final.`impossible_age_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			
			SELECT	ROUND(SUM(recovered_money),2) INTO temp_exp_recovered_money 
			FROM 	emihealth_final.`impossible_age_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			
			SELECT	SUM(sum_of_all_proc_mins) INTO temp_exp_proc_min_per_month 
			FROM 	emihealth_final.`impossible_age_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
				
			SELECT	SUM(number_of_age_violations) INTO temp_exp_no_of_age_violations 
			FROM 	emihealth_final.`impossible_age_daily` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend
				;
			
			
			SELECT	COUNT(*) INTO temp_r_check 
			FROM 	emihealth_final.impossible_age_daily 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='red';
	
					
			SELECT 	COUNT(*) INTO temp_g_check 
			FROM 	emihealth_final.impossible_age_daily 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_exp_color_code='red';
			ELSE				
				SET temp_exp_color_code='green';
			END IF;
			
			SELECT 	act_procedure_count
				,act_patient_count
				,act_income
				,act_recovered_money
				
				,act_proc_min_per_month
				,act_no_of_age_violations
				,act_color_code
				
			INTO   	temp_act_procedure_count
				,temp_act_patient_count
				,temp_act_income
				,temp_act_recovered_money
				
				,temp_act_proc_min_per_month
				,temp_act_no_of_age_violations
				,temp_act_color_code
			
			FROM 	test_cases_2.t_temp_04_impAge_plmonthly_test_table  
			WHERE 	attend=t_attend 
				AND YEAR=t_year 
				AND MONTH=t_month 
			LIMIT 	1;
			
			
			
			
			IF(temp_act_procedure_count != temp_exp_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_act_patient_count != temp_exp_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_act_income != temp_exp_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';                     
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_act_recovered_money != temp_exp_recovered_money)THEN
							SET temp_test_detail='Column(recovered-money)  values are not matched.';				     
							SET temp_test_status=FALSE;
								
						ELSE
							IF(temp_act_proc_min_per_month != temp_exp_proc_min_per_month) THEN
								SET temp_test_detail='Column(proc_min_per_month)  values are not matched.';				     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_act_color_code != temp_exp_color_code)THEN
									SET temp_test_detail='Column(color_code)       values are not matched.';	                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_act_no_of_age_violations != temp_exp_no_of_age_violations)THEN
										SET temp_test_detail='Column(no_of_age_viloations)  values are not matched.';
										SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
				
									END IF;
								END IF;
								
							END IF;
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_04_impAge_plmonthly_test_table 
				 SET 
					exp_procedure_count=temp_exp_procedure_count
					,exp_patient_count=temp_exp_patient_count
					,exp_income= temp_exp_income 
					,exp_recovered_money = 	act_recovered_money
					,exp_proc_min_per_month = temp_exp_proc_min_per_month
					,exp_no_of_age_violations = temp_exp_no_of_age_violations
					,exp_color_code = temp_exp_color_code
					,test_detail=temp_test_detail
					,test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			SET t_attend= NULL;
			SET t_year=0;
			SET t_month=0;
			SET temp_exp_procedure_count = temp_act_procedure_count=0;
			SET temp_exp_patient_count = temp_act_patient_count=NULL;
			SET temp_exp_income = temp_act_income=0;
			
			SET temp_exp_color_code = temp_act_color_code = NULL;
			 
			
			SET temp_test_detail= NULL;
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
	
	
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_04_impAge_plmonthly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_04_impAge_plmonthly_test_table WHERE test_status != TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_plmonthly_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_04_impAge_plmonthly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_plmonthly_test_table WHERE test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts4_tc2_checkCountPlDailynPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts4_tc2_checkCountPlDailynPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts4_tc2_checkCountPlDailynPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE pld_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) INTO pld_count 
	FROM  	(
			select 	count(*)
			from 	emihealth_final.`impossible_age_daily`
			WHERE 	isactive=1
			GROUP 
			BY 	attend, MONTH, YEAR
		 ) as abc;
		 		 
	SELECT 	count(*) INTO plm_count 
	FROM 	emihealth_final.`impossible_age_monthly`
	WHERE 	isactive=1;
	
	
		
	IF(pld_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in pl_daily and pl_monthly table';
	ELSE
		SET test_status=FALSE;
		IF(pld_count>plm_count)THEN
			SET test_detail=CONCAT(pld_count-plm_count,' more counts  found in pl_daily table then pl_monthly table');
		ELSE
			SET test_detail=CONCAT(plm_count-pld_count,' more counts found in pl_monthly table then pl_daily table');
		END IF;
	END IF;
	
	
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts4_tc3_checkPaidMoneyPlDailynPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts4_tc3_checkPaidMoneyPlDailynPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts4_tc3_checkPaidMoneyPlDailynPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money double DEFAULT 0;
	DECLARE plm_income DOUBLE DEFAULT 0;
	
	SELECT round(SUM(income),2) INTO  res_paid_money FROM emihealth_final.`impossible_age_daily` WHERE isactive=1;
	SELECT round(SUM(income),2) INTO plm_income FROM emihealth_final.`impossible_age_monthly` WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in pl_daily table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then pl_daily table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts4_tc4_distinctYearsCountPlDailynPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts4_tc4_distinctYearsCountPlDailynPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts4_tc4_distinctYearsCountPlDailynPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pld_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(YEAR(date_of_service))) 
	INTO 	pld_years_count 
	FROM 	emihealth_final.`impossible_age_daily` 
	WHERE 	isactive=1
		;
        SELECT 	COUNT(DISTINCT(YEAR))  
        INTO 	plm_years_count 
        FROM 	emihealth_final.`impossible_age_monthly` 
        WHERE 	isactive=1
		;
	
	IF(pld_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in pl_daily table and pl_monthly';
	ELSE
		SET test_status=FALSE;
		IF(pld_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(pld_years_count-plm_years_count,' more year counts found in pl_daily table then pl_monthly table');
		ELSE
			SET test_detail=CONCAT(plm_years_count-pld_years_count,' more year counts found in pl_monthly table then pl_daily table');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_TS5_PL_YEARLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_TS5_PL_YEARLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_TS5_PL_YEARLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts5_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts5_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying table[emihealth_final.impossible_age_yearly] by generating test table[test_cases_2.t_temp_04_impAge_plyearly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts5_tc1A_testTableGen/t_04_impAge_ts5_tc1B_columnValidation'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts5_tc2_checkCountPlDailynPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying total counts from pl_daily table to pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts5_tc2_checkCountPlDailynPlYearly'
		);
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts5_tc3_checkPaidMoneyPlDailynPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying income summation is equal in  pl_daily table and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts5_tc3_checkPaidMoneyPlDailynPlYearly'
		);
	
	
	
		
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts5_tc5_distinctYearsCountPlDailynPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying distinct years count is equal in  pl_daily table and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts5_tc5_distinctYearsCountPlDailynPlYearly'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts5_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts5_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts5_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	-- impossible_age_monthly
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`impossible_age_yearly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_yearly_impAge';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_04_impAge_plyearly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_04_impAge_plyearly_test_table` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` bigint(20) default null,
	  `attend` VARCHAR(250) NOT NULL,
	  
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `act_procedure_count` INT(6) ZEROFILL default NULL,
	  `exp_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `act_patient_count` INT(6) ZEROFILL default NULL,
	  `exp_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `act_income` DOUBLE PRECISION(11,2)   default NULL,
	  `exp_income` DOUBLE PRECISION (11,2)  DEFAULT NULL,
	  
	  `act_recovered_money` DOUBLE PRECISION(11,2)   DEFAULT NULL,
	  `exp_recovered_money` DOUBLE PRECISION (11,2)  DEFAULT NULL,
	  
	  `act_sum_of_all_proc_mins` INT(6) ZEROFILL DEFAULT NULL,
	  `exp_sum_of_all_proc_mins` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `act_no_of_age_violations` INT(6) ZEROFILL DEFAULT NULL,
	  `exp_no_of_age_violations` INT(6) ZEROFILL DEFAULT NULL,
	 
	  `act_color_code` ENUM('red','green') default NULL,
	  `exp_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_04_impAge_plyearly_test_table; 
	
	
	INSERT INTO test_cases_2.t_temp_04_impAge_plyearly_test_table
		(
			res_id
			,attend
			,YEAR
			
			,act_procedure_count
			,act_patient_count
			
			,act_income
			,act_recovered_money
			
			,act_sum_of_all_proc_mins
			,act_no_of_age_violations
			
			,act_color_code
		)
	SELECT 
			id
			,attend
			,YEAR
		
			,procedure_count
			,patient_count
			
			,income
			,recovered_money
			
			,sum_of_all_proc_mins_per_year
			,number_of_age_violations
			
			,color_code
			
	FROM emihealth_final.`impossible_age_yearly` 
	WHERE isactive=1 
	ORDER BY (CONCAT(YEAR)) DESC 
	LIMIT required_rows
		;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_04_impAge_plyearly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts5_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts5_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts5_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_exp_procedure_count,temp_act_procedure_count INT DEFAULT 0;
	DECLARE temp_exp_patient_count,temp_act_patient_count INT DEFAULT null;
	
	DECLARE temp_exp_sum_of_all_proc_mins,temp_act_sum_of_all_proc_mins INT DEFAULT 0;
	
	DECLARE temp_exp_income,temp_act_income DOUBLE DEFAULT 0;
	declare temp_exp_recovered_money,temp_act_recovered_money double default 0;
	
	declare temp_act_no_of_age_violations, temp_exp_no_of_age_violations int default 0;
	
	DECLARE temp_exp_color_code,temp_act_color_code ENUM('red','green') DEFAULT NULL;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check,temp_y_check ,temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,YEAR FROM test_cases_2.t_temp_04_impAge_plyearly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT 	sum(procedure_count) INTO temp_exp_procedure_count 
			FROM 	emihealth_final.`impossible_age_daily` 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
		
			/* -- later
			SELECT 	sum(patient_count) INTO temp_exp_patient_count 
			FROM 	emihealth_final.`impossible_age_daily`  
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
			*/
			
			SELECT	ROUND(SUM(income),2) INTO temp_exp_income 
			FROM 	emihealth_final.`impossible_age_daily` 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;	
				
			SELECT	ROUND(SUM(recovered_money),2) INTO temp_exp_recovered_money 
			FROM 	emihealth_final.`impossible_age_daily` 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
				
			SELECT	SUM(sum_of_all_proc_mins) INTO  temp_exp_sum_of_all_proc_mins
			FROM 	emihealth_final.`impossible_age_daily` 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;
				
			SELECT	SUM(number_of_age_violations) INTO  temp_exp_no_of_age_violations
			FROM 	emihealth_final.`impossible_age_daily` 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend;	
			
			
			SELECT	COUNT(*) INTO temp_r_check 
			FROM 	emihealth_final.impossible_age_daily 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='red';
			
					
			SELECT 	COUNT(*) INTO temp_g_check 
			FROM 	emihealth_final.impossible_age_daily 
			WHERE 	isactive=1 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND color_code='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_exp_color_code='red';
			ELSE
				SET temp_exp_color_code='green';
			END IF;
			
			SELECT 	act_procedure_count
				,act_patient_count
				,act_income
				,act_recovered_money
				
				,act_sum_of_all_proc_mins
				,act_no_of_age_violations
				,act_color_code
				
				
			INTO   temp_act_procedure_count
				,temp_act_patient_count
				,temp_act_income
				,temp_act_recovered_money
				
				,temp_act_sum_of_all_proc_mins
				,temp_act_no_of_age_violations
				,temp_act_color_code
			
			FROM 	test_cases_2.t_temp_04_impAge_plyearly_test_table  
			WHERE 	attend=t_attend 
				AND YEAR=t_year 
			LIMIT 	1;
		
			
			IF(temp_act_procedure_count != temp_exp_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_act_patient_count != temp_exp_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_act_income != temp_exp_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';                     
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_act_recovered_money != temp_exp_recovered_money)THEN
							SET temp_test_detail='Column(recovered_money)           values are not matched.';                     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_act_sum_of_all_proc_mins != temp_exp_sum_of_all_proc_mins)THEN
								SET temp_test_detail='Column(sum_of_all_proc_mins)           values are not matched.';                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_act_no_of_age_violations != temp_exp_no_of_age_violations)THEN
									SET temp_test_detail='Column(no_of_age_violations)           values are not matched.';                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_act_color_code != temp_exp_color_code)THEN
										SET temp_test_detail='Column(color_code)       values are not matched.';	                     
										SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
					
									END IF;
								END IF;
							END IF;
						END IF;	
					END IF;
				END IF;
			END IF;
			
			
			
			UPDATE test_cases_2.t_temp_04_impAge_plyearly_test_table 
				 SET 
					exp_procedure_count=temp_exp_procedure_count
					-- ,exp_patient_count=temp_exp_patient_count
					,exp_income= temp_exp_income 
					,exp_recovered_money=temp_exp_recovered_money
					,exp_color_code = temp_exp_color_code
					,exp_sum_of_all_proc_mins = temp_exp_sum_of_all_proc_mins
					,exp_no_of_age_violations = temp_exp_no_of_age_violations
					,test_detail=temp_test_detail
					,test_status=temp_test_status
			WHERE attend=t_attend  AND YEAR=t_year;
			
			
			SET t_attend=NULL;
			SET t_year=0;
			SET temp_exp_procedure_count = temp_act_procedure_count=0;
			-- SET temp_exp_patient_count = temp_act_patient_count=0;
			SET temp_exp_income = temp_act_income=0;
			
			SET temp_exp_color_code = temp_act_color_code = NULL;
			 
			
			SET temp_test_detail=NULL;
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_04_impAge_plyearly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_04_impAge_plyearly_test_table WHERE test_status != TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_plyearly_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_04_impAge_plyearly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_plyearly_test_table WHERE test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts5_tc2_checkCountPlDailynPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts5_tc2_checkCountPlDailynPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts5_tc2_checkCountPlDailynPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE pld_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) INTO pld_count 
	FROM  	(
			select 	count(*)
			from 	emihealth_final.`impossible_age_daily`
			WHERE 	isactive=1
			GROUP 
			BY 	attend, YEAR
		 ) as abc ;
		 		 
	SELECT 	count(*) INTO ply_count 
	FROM 	emihealth_final.`impossible_age_yearly`
	WHERE 	isactive=1;
	
	
		
	IF(pld_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in pl_daily and pl_yearly table';
	ELSE
		SET test_status=FALSE;
		IF(pld_count>ply_count)THEN
			SET test_detail=CONCAT(pld_count-ply_count,' more counts  found in pl_daily table then pl_yearly table');
		ELSE
			SET test_detail=CONCAT(ply_count-pld_count,' more counts found in pl_yearly table then pl_daily table');
		END IF;
	END IF;
	
	
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts5_tc3_checkPaidMoneyPlDailynPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts5_tc3_checkPaidMoneyPlDailynPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts5_tc3_checkPaidMoneyPlDailynPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pld_income double DEFAULT 0;
	DECLARE ply_income DOUBLE DEFAULT 0;
	
	SELECT round(SUM(income),2) INTO  pld_income FROM emihealth_final.`impossible_age_daily` WHERE isactive=1;
	SELECT round(SUM(income),2) INTO ply_income FROM emihealth_final.`impossible_age_yearly` WHERE isactive=1;
	
	IF(pld_income=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(pld_income>ply_income)THEN
			SET test_detail=CONCAT(pld_income-ply_income,' more money found in pl_daily table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-pld_income,' more money found in pl_monthly table then pl_daily table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts5_tc5_distinctYearsCountPlDailynPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts5_tc5_distinctYearsCountPlDailynPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts5_tc5_distinctYearsCountPlDailynPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pld_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(YEAR(date_of_service))) 
	INTO 	pld_years_count 
	FROM 	emihealth_final.`impossible_age_daily` 
	WHERE 	isactive=1;
	
        SELECT 	COUNT(DISTINCT(YEAR))  
        INTO 	ply_years_count 
        FROM 	emihealth_final.`impossible_age_yearly` 
        WHERE isactive=1;
	
	
	
	IF(pld_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in pl_daily table and pl_yearly';
	ELSE
		SET test_status=FALSE;
		IF(pld_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(pld_years_count-ply_years_count,' more year counts found in pl_daily table then pl_yearly table');
		ELSE
			SET test_detail=CONCAT(ply_years_count-pld_years_count,' more year counts found in pl_yearly table then pl_daily table');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_TS6_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_TS6_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_TS6_DASHBOARD_DAILY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts6_tc1A_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_04_impAge_ts6_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_temp_04_impAge_dbdaily_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts6_tc1A_dashboardTestTable/t_04_impAge_ts6_tc1B_dashboardDailyValidation'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts6_tc2_checkCountDosPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying pl_daily and db_daily table dos counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts6_tc2_checkCountDosPLDnDBD'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts6_tc3_checkTotalCountPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying total pl_daily table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts6_tc3_checkTotalCountPLDnDBD'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts6_tc4_checkRygCountsPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying RYG counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts6_tc4_checkRygCountsPLDnDBD'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts6_tc5_checkRedCountsPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying red counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts6_tc5_checkRedCountsPLDnDBD'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts6_tc6_checkYellowCountsPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying yellow counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts6_tc6_checkYellowCountsPLDnDBD'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts6_tc7_checkGreenCountsPLDnDBD`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying green counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts6_tc7_checkGreenCountsPLDnDBD'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts6_tc1A_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts6_tc1A_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts6_tc1A_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT 	COUNT(*) 
	INTO 	total_counts 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 AND TYPE=04;
	
	SELECT 	var_value 
	INTO 	weightage 
	FROM 	test_cases_2.t_global_variables 
	WHERE 	var_key='db_daily_impAge';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	DROP TABLE IF EXISTS t_temp_04_impAge_dbdaily_test_table;
	CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_04_impAge_dbdaily_test_table` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_04_impAge_dbdaily_test_table; 
	
	
	insert into test_cases_2.t_temp_04_impAge_dbdaily_test_table
		(
		date_of_service
		,actual_no_of_providers
		,actual_total_red
		,actual_total_yellow
		,actual_total_green 
		)
	SELECT 
		date_of_service
		,number_of_providers
		,total_red
		,total_yellow
		,total_green
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	(isactive=1 AND TYPE=04) 
	oRDER 	BY (date_of_service) DESC 
	LIMIT 	required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_temp_04_impAge_dbdaily_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts6_tc1B_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts6_tc1B_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts6_tc1B_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT null;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		-- t_temp_04_impAge_dbdaily_test_table
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_temp_04_impAge_dbdaily_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.`impossible_age_daily` WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.impossible_age_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.impossible_age_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.impossible_age_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_04_impAge_dbdaily_test_table
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_04_impAge_dbdaily_test_table 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos= null;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_04_impAge_dbdaily_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_04_impAge_dbdaily_test_table WHERE t_temp_04_impAge_dbdaily_test_table.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_dbdaily_test_table;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_04_impAge_dbdaily_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_dbdaily_test_table WHERE t_temp_04_impAge_dbdaily_test_table.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts6_tc2_checkCountDosPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts6_tc2_checkCountDosPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts6_tc2_checkCountDosPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(date_of_service)) 
	into 	pl_dist_dos_count 
	from 	emihealth_final.`impossible_age_daily` 
	WHERE 	isactive=1
		;
	SELECT 	COUNT(DISTINCT(date_of_service)) 
	into 	db_dist_dos_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=4
		;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
	
	set success = 1;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts6_tc3_checkTotalCountPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts6_tc3_checkTotalCountPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts6_tc3_checkTotalCountPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	pl_total_count 
	from 	emihealth_final.`impossible_age_daily` 
	WHERE 	isactive=1
		;
		
	SELECT 	SUM(number_of_providers) 
	INTO 	db_total_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=4
		;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
	set success = 1;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts6_tc4_checkRygCountsPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts6_tc4_checkRygCountsPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts6_tc4_checkRygCountsPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	pl_total_count 
	from 	emihealth_final.`impossible_age_daily` 
	WHERE 	isactive=1
		;
	SELECT 	SUM(number_of_providers) 
	INTO 	db_total_ryg_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=4
		;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts6_tc5_checkRedCountsPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts6_tc5_checkRedCountsPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts6_tc5_checkRedCountsPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	pl_red_count 
	from 	emihealth_final.`impossible_age_daily` 
	WHERE 	isactive=1 
		AND color_code='red'
		;
		
	SELECT 	SUM(total_red) 
	into 	db_red_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=4
		;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts6_tc6_checkYellowCountsPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts6_tc6_checkYellowCountsPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts6_tc6_checkYellowCountsPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	pl_yellow_count 
	from 	emihealth_final.`impossible_age_daily` 
	WHERE 	isactive=1 
		AND color_code='yellow'
		;
	SELECT 	SUM(total_yellow) 
	INTO 	db_yellow_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=4;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts6_tc7_checkGreenCountsPLDnDBD` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts6_tc7_checkGreenCountsPLDnDBD` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts6_tc7_checkGreenCountsPLDnDBD`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	-- pl_green_count
	SELECT 	SUM(myTab.distinct_green_per_day)
	into 	pl_green_count
	FROM
	(
		SELECT 	date_of_service, COUNT(DISTINCT(attend)) AS distinct_green_per_day
		FROM 	emihealth_final.`impossible_age_daily` 
		WHERE 	isactive=1 
			AND color_code='green'
		GROUP BY date_of_service
	) AS myTab
	;
		
	SELECT 	SUM(total_green) 
	INTO 	db_green_count 
	FROM 	emihealth_final.dashboard_daily_results 
	WHERE 	isactive=1 
		AND TYPE=4
		;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts7_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts7_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_04_impAge_dbMonthly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts7_tc1A_testTableGen'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying distinct year counts in pl_monthly and db_monthly'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts7_tc2_countDistinctYearsPlMNDbM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying total_count db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts7_tc3_checkTotalCountPlMNdbm'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts7_tc4_checkCountNoOfProvPlMnDBM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying providers count in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts7_tc4_checkCountNoOfProvPlMnDBM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts7_tc5_checkYellowCountsPLMnDBM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying yellow count db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts7_tc5_checkYellowCountsPLMnDBM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts7_tc6_checkGreenCountsPlMnDBM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying green count in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts7_tc6_checkGreenCountsPlMnDBM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying paid_money  in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM'
		);
	
	
					
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts7_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts7_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts7_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.`dashboard_monthly_results` WHERE isactive=1 and type= 4;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_impAge';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_04_impAge_dbMonthly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_04_impAge_dbMonthly_test_table` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_paid_money` DOUBLE DEFAULT 0,
	  `expec_paid_money` DOUBLE DEFAULT 0,
	  
	  `actual_recovered_money` double default 0,
	  `expec_recovered_money` double default 0,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_04_impAge_dbMonthly_test_table; 
	
	
	insert into test_cases_2.t_temp_04_impAge_dbMonthly_test_table
		(
			year
			,month 
			,actual_no_of_providers
			,actual_total_red
			,actual_total_green
			,actual_paid_money
			,actual_recovered_money
		)
	SELECT 		year
			,month
			,number_of_providers
			,total_red
			,total_green
			,total_paid_money
			,total_red_recovered_money
	from 	emihealth_final.dashboard_monthly_results 
	WHERE 	(isactive=1 and type=04) 
	ORDER 	BY(concat(year,month)) desc 
	LIMIT 	required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_04_impAge_dbMonthly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts7_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts7_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts7_tc1B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	declare temp_expec_paid_money, temp_actual_paid_money double default 0;
	declare temp_expec_recovered_money, temp_actual_recovered_money double default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_04_impAge_dbMonthly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			-- impossible_age_monthly
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.`impossible_age_monthly` WHERE month=t_month and year=t_year AND isactive=1;
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.impossible_age_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive=1;
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.impossible_age_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive=1;
			
			select 	round(sum(income),2)
			into 	temp_expec_paid_money
			from 	emihealth_final.`impossible_age_daily`
			where 	month = t_month
				and year = t_year
				and isactive = 1
				;
				
			SELECT 	ROUND(SUM(income),2)
			INTO 	temp_expec_recovered_money
			FROM 	emihealth_final.`impossible_age_daily`
			WHERE 	MONTH = t_month
				AND YEAR = t_year
				and color_code = 'red'
				AND isactive = 1
				;
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green, actual_paid_money, actual_recovered_money
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green, temp_actual_paid_money, temp_actual_recovered_money
			FROM test_cases_2.t_temp_04_impAge_dbMonthly_test_table
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_green !=temp_actual_total_green) THEN
						SET test_detail='Column(total_green ) values   are  not matched';
						SET temp_test_status=FALSE;
					ELSE
						if(temp_expec_paid_money != temp_actual_paid_money)then
							SET test_detail='Column(paid_money) values   are  not matched';
							SET temp_test_status=FALSE;
						else
							if(temp_expec_recovered_money != temp_actual_recovered_money)then
								SET test_detail='Column(recovered_money) values   are  not matched';
								SET temp_test_status=FALSE;
							else
								SET test_detail='Data   in   against   all    columns   is   ok';
								SET temp_test_status=TRUE;
							end if;
						end if;	
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_04_impAge_dbMonthly_test_table 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_green =temp_expec_total_green,
					expec_paid_money = temp_expec_paid_money,
					expec_recovered_money = temp_expec_recovered_money,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_04_impAge_dbMonthly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_04_impAge_dbMonthly_test_table WHERE t_temp_04_impAge_dbMonthly_test_table.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_dbMonthly_test_table;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_04_impAge_dbMonthly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_dbMonthly_test_table WHERE t_temp_04_impAge_dbMonthly_test_table.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts7_tc2_countDistinctYearsPLMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts7_tc2_countDistinctYearsPLMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts7_tc2_countDistinctYearsPLMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT	COUNT(DISTINCT(year)) 
	into 	plm_dist_years_count 
	from 	emihealth_final.`impossible_age_monthly` 
	WHERE 	isactive=1
		;
	SELECT 	COUNT(DISTINCT(Year)) 
	into 	dbm_dist_years_count 
	from 	emihealth_final.dashboard_monthly_results 
	WHERE 	isactive=1 AND TYPE=04
		;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
	
	set success = 1 ;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts7_tc3_checkTotalCountPlMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts7_tc3_checkTotalCountPlMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts7_tc3_checkTotalCountPlMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT CONCAT(MONTH,YEAR)) 
	INTO 	plm_total_count 
	from 	emihealth_final.`impossible_age_monthly` 
	WHERE 	isactive=1
		;
	SELECT 	count(*) 
	INTO 	dbm_total_count 
	from 	emihealth_final.dashboard_monthly_results 
	WHERE 	isactive=1 
		AND TYPE=04;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
	
	set success = 1;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts7_tc4_checkCountNoOfProvPlMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts7_tc4_checkCountNoOfProvPlMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts7_tc4_checkCountNoOfProvPlMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.`impossible_age_monthly` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results 
	WHERE isactive=1 AND TYPE=04;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts7_tc5_checkYellowCountsPLMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts7_tc5_checkYellowCountsPLMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts7_tc5_checkYellowCountsPLMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT 	count(*)
	into 	pl_yellow_count
	FROM 	emihealth_final.`impossible_age_monthly`
		-- emihealth_final.`dwp_doctor_stats_daily`
	WHERE 	isactive = 1 AND color_code = 'yellow';
	
	SELECT 	SUM(total_yellow)
	into 	db_yellow_count
	FROM 	emihealth_final.`dashboard_monthly_results` 
	WHERE 	TYPE = 4
		and isactive = 1;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
	
	set success = 1;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts7_tc6_checkGreenCountsPlMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts7_tc6_checkGreenCountsPlMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts7_tc6_checkGreenCountsPlMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	plm_green_count 
	from 	emihealth_final.`impossible_age_monthly` 
	WHERE 	isactive=1 
		AND color_code='green'
		;
		
	SELECT 	SUM(total_green) 
	into 	dbm_green_count 
	from 	emihealth_final.dashboard_monthly_results 
	WHERE 	isactive=1 
		AND TYPE=4;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts7_tc7_checkTotalPaidMoneyCountPLMnDBM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts7_tc7_checkTotalPaidMoneyCountPLMnDBM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts7_tc7_checkTotalPaidMoneyCountPLMnDBM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT 	SUM(income) 
	INTO 	plm_total_paid_money 
	from 	emihealth_final.`dwp_doctor_stats_daily` 
	WHERE 	isactive=1 
		-- mand year != 2013
		;
		
	SELECT 	SUM(total_paid_money) 
	into 	dbm_total_paid_money 
	from 	emihealth_final.dashboard_monthly_results 
	WHERE 	isactive=1 
		AND TYPE=4
		;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts8_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts8_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_02_dwp_dbYearly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts8_tc1A_testTableGen/t_04_impAge_ts8_tc1B_columnValidation'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts8_tc2_countDistinctYearsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying pl_yearly and db_yearly table distinct years'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts8_tc2_countDistinctYearsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying pl_yearly and db_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts8_tc3_checkTotalCountPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts8_tc4_checkCountNoOfProvPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying no. of providers in db_yearly  and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts8_tc4_checkCountNoOfProvPlYnDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts8_tc5_checkTotalRedCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying red counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts8_tc5_checkTotalRedCountsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts8_tc6_checkTotalYellowCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying yellow counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts8_tc6_checkTotalYellowCountsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts8_tc7_checkGreenCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying green counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts8_tc7_checkGreenCountsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying paid money money in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_04_impAge_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts8_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts8_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts8_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=04;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_impAge';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	-- t_temp_04_impAge_dbYearly_test_table
	 DROP TABLE IF EXISTS t_temp_04_impAge_dbYearly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_04_impAge_dbYearly_test_table` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill default 0,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT null,
	  
	  `actual_total_red` INT(11)zerofill  default 0,
	  `expec_total_red` INT(11) zerofill DEFAULT null,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  DEFAULT 0,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  default 0,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT null,
	  
	  `actual_paid_money` double default 0,
	  `expec_paid_money` double default 0,
	  
	  `actual_recovered_money` double default 0,
	  `expec_recovered_money` double default 0,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_04_impAge_dbYearly_test_table; 
	
	
	insert into test_cases_2.t_temp_04_impAge_dbYearly_test_table
		(
			year
			,actual_no_of_providers
			,actual_total_red
			,actual_total_yellow
			,actual_total_green 
			,actual_paid_money
			,actual_recovered_money
		)
	SELECT 
			year
			,number_of_providers
			,total_red
			,total_yellow
			,total_green
			,total_paid_money
			,total_red_recovered_money
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 and type = 04
	ORDER 	BY(year)desc 
	LIMIT 	required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_04_impAge_dbYearly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts8_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts8_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts8_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	declare temp_expec_paid_money,temp_actual_paid_money double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_04_impAge_dbYearly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        -- t_temp_04_impAge_dbYearly_test_table
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT	COUNT(distinct(attend)) 
			INTO 	temp_expec_no_of_providers 
			from 	emihealth_final.`impossible_age_yearly` 
			WHERE 	year=t_year AND isactive= 1;
			
			SELECT 	COUNT(distinct(attend))
			INTO 	temp_expec_total_red  
			from 	emihealth_final.impossible_age_yearly 
			WHERE 	YEAR=t_year  AND color_code='red' AND isactive=1;
			
			SELECT 	COUNT(DISTINCT(attend))
			INTO 	temp_expec_total_yellow  
			FROM 	emihealth_final.impossible_age_yearly 
			WHERE  	YEAR=t_year  AND color_code='yellow' AND isactive=1;
						
			SELECT 	COUNT(distinct(attend))
			INTO 	temp_expec_total_green  
			from 	emihealth_final.impossible_age_yearly 
			WHERE  	YEAR=t_year  AND color_code='green' AND isactive=1;
			
			
			SELECT 	sum(income)
			INTO 	temp_expec_paid_money
			FROM 	emihealth_final.impossible_age_daily 
			WHERE  	YEAR=t_year AND isactive=1;
			set temp_expec_paid_money = round(temp_expec_paid_money,2);
			
			SELECT 	SUM(income)
			INTO 	temp_expec_recovered_money
			FROM 	emihealth_final.`impossible_age_daily` 
			WHERE  	YEAR=t_year AND isactive=1 and color_code = 'red';
			set temp_expec_recovered_money = round(temp_expec_recovered_money,2);
			
			SELECT 
				actual_no_of_providers
				,actual_total_red
				,actual_total_yellow
				,actual_total_green
				,actual_paid_money
				,actual_recovered_money
			INTO 	
				temp_actual_no_of_providers
				,temp_actual_total_red
				,temp_actual_total_yellow
				,temp_actual_total_green
				,temp_actual_paid_money
				,temp_actual_recovered_money
				
			FROM 	test_cases_2.t_temp_04_impAge_dbYearly_test_table
			WHERE 	YEAR=t_year 
			lIMIT 	1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET temp_test_detail='Column(no_of_providers) values are not matched';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET temp_test_detail='Column(total_red)    values  are  not  matched';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_green !=temp_actual_total_green) THEN
						SET temp_test_detail='Column(total_green) values   are  not matched';
						SET temp_test_status=FALSE;
					ELSE
						if(temp_expec_paid_money != temp_actual_paid_money)then
							SET temp_test_detail='Column(paid_money) values   are  not matched';
							SET temp_test_status=FALSE;
						else
							if(temp_expec_recovered_money != temp_actual_recovered_money)then
								SET temp_test_detail='Column(recovered_money) values   are  not matched';
								SET temp_test_status=FALSE;
							else
								SET temp_test_detail='Data   in   against   all    columns   is   ok';
								SET temp_test_status=TRUE;
							end if;
						end if;
					END IF;
				END IF;		
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_04_impAge_dbYearly_test_table 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red = temp_expec_total_red, 
					expec_total_green = temp_expec_total_green,
					expec_total_yellow = temp_expec_total_yellow,
					expec_paid_money = temp_expec_paid_money,
					expec_recovered_money = temp_expec_recovered_money,
					test_status = temp_test_status,
					test_detail = temp_test_detail
			WHERE YEAR = t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail=null;
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_04_impAge_dbYearly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_04_impAge_dbYearly_test_table WHERE t_temp_04_impAge_dbYearly_test_table.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_dbYearly_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_04_impAge_dbYearly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_04_impAge_dbYearly_test_table WHERE t_temp_04_impAge_dbYearly_test_table.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts8_tc2_countDistinctYearsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts8_tc2_countDistinctYearsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts8_tc2_countDistinctYearsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(year)) 
	into 	ply_dist_years_count 
	from 	emihealth_final.`impossible_age_yearly` 
	WHERE 	isactive=1;
	
	SELECT 	COUNT(DISTINCT(Year)) 
	into 	dby_dist_years_count 
	from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=4;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
	set success = 1;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT  COUNT(*) 
	INTO 	ply_total_count
	from
		(
			select 	count(*)
			from 	emihealth_final.`impossible_age_yearly`
			where 	isactive = 1
			GROUP 	by YEAR	
		) as myTab;
	
	SELECT 	count(*) 
	INTO 	dby_total_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=4;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts8_tc4_checkCountNoOfProvPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts8_tc4_checkCountNoOfProvPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts8_tc4_checkCountNoOfProvPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT 	sum(yearly_attends)
	INTO 	ply_total_count 
	from 	(
			select 	count(*) as yearly_attends
			from 	emihealth_final.`impossible_age_yearly`
			where 	isactive = 1
			group 	by year
		) as result
	;
	
	SELECT 	SUM(number_of_providers) 
	INTO 	dby_total_prov_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=4;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts8_tc5_checkTotalRedCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts8_tc5_checkTotalRedCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts8_tc5_checkTotalRedCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	into 	ply_red_count 
	from 	emihealth_final.`impossible_age_yearly` 
	WHERE 	isactive=1 AND color_code='red'
		;
	
	SELECT 	SUM(total_red) 
	into 	dby_red_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=4
		;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts8_tc6_checkTotalYellowCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts8_tc6_checkTotalYellowCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts8_tc6_checkTotalYellowCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	ply_yellow_count 
	from 	emihealth_final.`impossible_age_yearly` 
	WHERE 	isactive=1 AND color_code='yellow'
		;
	SELECT 	SUM(total_yellow) 
	into 	dby_yellow_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=4;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts8_tc7_checkGreenCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts8_tc7_checkGreenCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts8_tc7_checkGreenCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	ply_green_count 
	from 	emihealth_final.`impossible_age_yearly` 
	WHERE 	isactive=1 AND color_code='green'
		;
	SELECT 	SUM(total_green) 
	into 	dby_green_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=4
		;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04_impAge_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04_impAge_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04_impAge_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT 	SUM(income) 
	INTO 	ply_total_paid_money 
	from 	emihealth_final.`impossible_age_yearly` WHERE isactive=1
		;
	SELECT 	SUM(total_paid_money) 
	INTO 	dby_total_paid_money 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=4;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table');
		END IF;
	END IF;
	
	set success = 1;	
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_04____________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_04____________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_04____________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_MAIN`()
BEGIN
call `t_07_multidoctor_TS1_SOURCE_TABLE`();
call `t_07_multidoctor_TS2_RESULT_TABLE`();
CALL `t_07_multidoctor_TS3_PL_DAILY_STATS_TABLE`();
CALL `t_07_multidoctor_TS4_DASHBOARD_DAILY_TABLE`();
CALL `t_07_multidoctor_TS5_PL_MONTHLY_STATS_TABLE`();
CALL `t_07_multidoctor_TS6_PL_STATS_YEARLY_TABLE`();
CALL `t_07_multidoctor_TS7_DASHBOARD_MONTHLY_RES_TABLE`();
CALL `t_07_multidoctor_TS8_DASHBOARD_YEARLY_TABLE`();
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_TS1_SOURCE_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts1_tc1_baseSrcValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying base and source table counts.'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts1_tc1_baseSrcValidation'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts1_tc2_resSrcValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying base and Result table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts1_tc2_resSrcValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts1_tc1_baseSrcValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts1_tc1_baseSrcValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts1_tc1_baseSrcValidation`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	
	SELECT COUNT(*) INTO src_count FROM emihealth_final.`src_multiple_claims`;
	-- base_count
	SELECT COUNT(*)  
	into base_count
	FROM 
	(
		SELECT COUNT(*)
		FROM 	emihealth_final.procedure_performed p
		INNER JOIN emihealth_final.ref_standard_procedures r ON r.pro_code = p.proc_code 
		WHERE	 p.is_invalid = 0 AND p.proc_code NOT LIKE 'D8%'
		AND paid_money > 0
		AND (
			tooth_no BETWEEN 1 AND 32 
			OR 
			(tooth_no BETWEEN 'A' AND 'T' AND LENGTH(tooth_no) <= 1)
		     )
		GROUP BY p.MID, p.date_of_service, p.proc_code, p.tooth_no
		HAVING COUNT(DISTINCT p.claim_id) > 1 
	)AS aa;  
	
	IF(src_count=base_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in base and source table for more than one claims';
	ELSE
		SET test_status=FALSE;
		IF(src_count>base_count)THEN
			SET test_detail=CONCAT(src_count-base_count,' more counts  found in source table then base table ');
		ELSE
			SET test_detail=CONCAT(base_count-src_count,' more counts found in base table then source table ');
		END IF;
	END IF;
	SET success=TRUE;
	-- set test_status=false; -- for testing
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts1_tc2_resSrcValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts1_tc2_resSrcValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts1_tc2_resSrcValidation`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE res_count INT;
	
	SELECT COUNT(DISTINCT MID) INTO src_count FROM emihealth_final.`src_multiple_claims`;
	
	SELECT COUNT(DISTINCT MID) into res_count FROM emihealth_final.results_multi_doctor WHERE isactive = '1';  
	
	IF(src_count=res_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and source table for distinct mids';
	ELSE
		SET test_status=FALSE;
		IF(src_count>res_count)THEN
			SET test_detail=CONCAT(src_count-res_count,' more mids  found in source table then result table ');
		ELSE
			SET test_detail=CONCAT(res_count-src_count,' more mids found in result table then source table ');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts2_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts2_tc1B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying result table [emihealth_final.results_multi_doctor] by using test table [test_cases_2.t_temp_multidoctor_ts1_tc5].'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
			,'t_07_multidoctor_ts2_tc1A_testTableGen/t_07_multidoctor_ts2_tc1B_resReasonsValidation'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts2_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts2_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts2_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE reason_percent DECIMAL(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        DECLARE selected_reason INT;
        DECLARE iterator INT;
        
        DROP TABLE IF EXISTS t_temp_multidoctor_ts1_tc5;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_multidoctor_ts1_tc5` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `claim_id` BIGINT(20) DEFAULT NULL,
	  `proc_code`VARCHAR(50) DEFAULT NULL,
	  `tooth_no` VARCHAR(15) DEFAULT NULL,
	  `attend` VARCHAR(20) DEFAULT NULL,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` DATETIME DEFAULT NULL,
	  `reason_level` INT(2) DEFAULT NULL,
	  `test_reason_level` INT(2) DEFAULT NULL,
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_multidoctor_ts1_tc5;
        
        
        -- set reason_percent =2;
        SET iterator = 1;
        
        
        WHILE(iterator < 5) DO
		SET selected_reason= iterator;
		SELECT reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=7 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_multi_doctor` WHERE reason_level=selected_reason and isactive = 1;
		
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		
		insert into test_cases_2.t_temp_multidoctor_ts1_tc5(claim_id,proc_code,tooth_no,attend,MID,date_of_service,reason_level)
		SELECT claim_id,proc_code,tooth_no,attend,MID,date_of_service,reason_level
		FROM emihealth_final.results_multi_doctor WHERE reason_level=selected_reason AND isactive=1 ORDER BY RAND() LIMIT reason_sample_count;
		
		
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_multidoctor_ts1_tc5;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts2_tc1B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts2_tc1B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts2_tc1B_resReasonsValidation`(OUT success INT ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  DECLARE t_id BIGINT(20);
  DECLARE has_2_or_Rmore_claim_ids INT(10) DEFAULT 0;
  DECLARE has_2_or_Rmore_claim_ids_same_toothno_codes INT(10) DEFAULT 0;
  DECLARE has_2_or_Rmore_claim_ids_same_toothno_codes_same_provider INT(10) DEFAULT 0;
  
  DECLARE t_attend BIGINT(21);
  DECLARE t_tooth_no VARCHAR(15);
  DECLARE t_proc_code VARCHAR(50); 
  DECLARE t_mid VARCHAR(50);
  DECLARE t_dos DATETIME DEFAULT NULL;
  DECLARE t_color_code VARCHAR(5);
  
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id,MID,attend,date_of_service,tooth_no,proc_code FROM test_cases_2.t_temp_multidoctor_ts1_tc5 ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO t_id,t_mid,t_attend,t_dos,t_tooth_no,t_proc_code; 
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		        
		    -- Below Query finds the claims ids count on a patient on same date_of_service  
		    SELECT 	COUNT(*) INTO has_2_or_Rmore_claim_ids 
		    FROM 	emihealth_final.src_multiple_claims AS src 
		    WHERE	MID=t_mid AND date_of_service=t_dos 
				AND claim_ids > 1 AND isactive=1 ;
		    -- ========================================================IF-A-Starts=======================================================
		    IF(has_2_or_Rmore_claim_ids = 0) THEN
		        -- >> Reason 1
			UPDATE t_temp_multidoctor_ts1_tc5 SET test_reason_level=1, test_detail='has less than two claim ids.' WHERE id=t_id;
		    ELSE
			-- Below Query finds mids with same tooth no and proc_code
			SELECT	COUNT(*) INTO has_2_or_Rmore_claim_ids_same_toothno_codes 
			FROM 	emihealth_final.src_multiple_claims 
			WHERE	MID=t_mid AND date_of_service=t_dos 
				AND claim_ids > 1 AND tooth_no = t_tooth_no AND proc_code = t_proc_code
				AND isactive=1 ;
			-- =============================================IF-B-Starts===============================================
			IF(has_2_or_Rmore_claim_ids_same_toothno_codes=0)THEN
				-- >> Reason 2
				UPDATE t_temp_multidoctor_ts1_tc5 SET test_reason_level=2, test_detail='tooth no or proc code not same.' WHERE id=t_id;
			ELSE
				-- Below Query finds the providers (Attending ID) the same in each claim on the same DOS
				SELECT	COUNT(*) INTO has_2_or_Rmore_claim_ids_same_toothno_codes_same_provider 
				FROM 	emihealth_final.src_multiple_claims 
				WHERE	MID=t_mid AND date_of_service=t_dos 
					AND claim_ids > 1 AND tooth_no = t_tooth_no AND proc_code = t_proc_code
					AND attends > 1
					AND isactive=1 ;
				IF(has_2_or_Rmore_claim_ids_same_toothno_codes_same_provider=0)THEN
					-- >> Reason 3
					UPDATE t_temp_multidoctor_ts1_tc5 SET test_reason_level=3, test_detail='providers are same in each claim.' WHERE id=t_id;
				ELSE
					-- >> Reason 4
					UPDATE t_temp_multidoctor_ts1_tc5 SET test_reason_level=4, test_detail='providers are Not same in each claim.' WHERE id=t_id;
				END IF;
				
			END IF;
			-- =============================================IF-B-Ends==================================================
		     END IF;
		      -- ========================================================IF-A-ENDS=======================================================
		   	    
	        END LOOP ;
  CLOSE my_cursor ;
  
  UPDATE t_temp_multidoctor_ts1_tc5
  SET test_status = FALSE
  WHERE  reason_level != test_reason_level;
  
  UPDATE t_temp_multidoctor_ts1_tc5
  SET test_status = TRUE
  WHERE  reason_level = test_reason_level;  
  
  
  
  SELECT COUNT(*) INTO count_total_records
  FROM t_temp_multidoctor_ts1_tc5;
  
  SELECT COUNT(*) INTO count_defective_records
  FROM t_temp_multidoctor_ts1_tc5
  WHERE reason_level != test_reason_level;
  
  IF(count_defective_records = 0) THEN
	SET test_status = TRUE;
	SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
  ELSE
	SET test_status = FALSE;
	SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
  END IF;
  
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying PL_table Daily Count',tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts3_tc4_resPlDailyCount'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying Paid Money',tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts3_tc5_resPlDailyEqualPaidMoney'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying red counts in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts3_tc7_resPlDailyEqualReds'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts3_tc8_resPlDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying result and pl table year count'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts3_tc8_resPlDailyDistinctYearsCount'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying table[emihealth_final.pl_multi_doctor_stats_daily] by generating test table[test_cases_2.t_07_pl_temp]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts3_tc2_plTestTable/t_07_multidoctor_ts3_tc1_plDailyValidation'
		);
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts3_tc1_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts3_tc1_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts3_tc1_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT null;
	DECLARE t_dos DATETIME DEFAULT null;
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT null;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_07_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_multi_doctor WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_multi_doctor WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_multi_doctor WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_multi_doctor WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND color_code='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_multi_doctor WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND color_code='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_multi_doctor WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND color_code='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_multi_doctor WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND color_code='green';
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_07_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF(round(temp_actual_recovered_money,0) != round(temp_expec_recovered_money,0)) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_07_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend= null;
			SET t_dos= null;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code =null;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail=null;
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_07_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_07_pl_temp WHERE t_07_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_07_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_07_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_07_pl_temp WHERE t_07_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts3_tc2_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts3_tc2_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts3_tc2_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_multi_doctor_stats_daily WHERE isactive=1;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='multi_doctor';
	
	SET required_rows = weightage*total_counts/100;
	
	if (required_rows < 1)then
		set required_rows = 20;
	end if;
	
	-- SET res=required_rows;
	-- select required_rows;
	
	
	 DROP TABLE IF EXISTS t_07_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_07_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) default NULL,
	  `expec_income` DOUBLE PRECISION (11,2)  DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) default NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2)  default NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_07_pl_temp; 
	
	
	insert into test_cases_2.t_07_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
	SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
	from emihealth_final.pl_multi_doctor_stats_daily 
	WHERE isactive=1 ORDER BY date_of_service DESC 
	LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_07_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts3_tc3_checkPlDailyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts3_tc3_checkPlDailyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts3_tc3_checkPlDailyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_daily_table_exists, pl_daily_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_multi_doctor_stats_daily') INTO pl_daily_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_multi_doctor_stats_daily') INTO pl_daily_table_empty;
	
	IF (pl_daily_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_daily_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.results_multi_doctor   WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_multi_doctor_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_multi_doctor` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_multi_doctor_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_multi_doctor` WHERE color_code='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_multi_doctor_stats_daily` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_multi_doctor` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_multi_doctor_stats_daily` WHERE isactive=1;
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying total pl_daily table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts4_tc5_checkTotalCountPlNDb'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying pl_daily and db_daily table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts4_tc4_checkCountDosPlNDb'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying RYG counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts4_tc6_checkRygCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying red counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts4_tc7_checkRedCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts4_tc8_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying yellow counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts4_tc8_checkYellowCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts4_tc9_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying green counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts4_tc9_checkGreenCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_07_dashboard_temp]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts4_tc2_dashboardTestTable/t_07_multidoctor_ts4_tc1_dashboardDailyValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts4_tc1_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts4_tc1_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts4_tc1_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT "";
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_07_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_multi_doctor_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_multi_doctor_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_multi_doctor_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_multi_doctor_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_07_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_07_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos='';
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_07_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_07_dashboard_temp WHERE t_07_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_07_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_07_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_07_dashboard_temp WHERE t_07_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts4_tc2_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts4_tc2_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts4_tc2_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=07;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='multi_doctor';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_07_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_07_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_07_dashboard_temp; 
	
	
	insert into test_cases_2.t_07_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=07) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_07_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts4_tc3_checkDashboardDailyResExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts4_tc3_checkDashboardDailyResExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts4_tc3_checkDashboardDailyResExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_dialy_table_exists BOOL DEFAULT FALSE; 
	DECLARE db_dialy_table_empty INT DEFAULT NULL;
	SELECT t_check_if_table_exists_global_fun('dashboard_daily_results') INTO db_dialy_table_exists;
	
	select count(*) into db_dialy_table_empty from emihealth_final.dashboard_daily_results where type=7;
	
	IF ( db_dialy_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_dialy_table_empty = NULL) THEN
			SET test_detail='No record in table against algo id 7.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table against algo id 7.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts4_tc4_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts4_tc4_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts4_tc4_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.pl_multi_doctor_stats_daily WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=7	;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_multi_doctor_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=7;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_multi_doctor_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=7;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_multi_doctor_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=7;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts4_tc8_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts4_tc8_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts4_tc8_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_multi_doctor_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=7;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts4_tc9_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts4_tc9_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts4_tc9_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_multi_doctor_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=7;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying result and pl_monthly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts5_tc2_checkCountResNPlMonthly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying paid money in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts5_tc3_checkPaidMoneyResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying recovered money in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts5_tc4_checkRecoveredMoneyResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts5_tc5_checkEqualRedsResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying red counts in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts5_tc5_checkEqualRedsResNPlMontly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts5_tc6_distinctYearsCountResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying distinct years counts in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts5_tc6_distinctYearsCountResNPlMontly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying table[emihealth_final.pl_multi_doctor_stats_monthly] by generating test table[test_cases_2.t_temp_07_ts5_tc7]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts5_tc7A_testTableGen/t_07_multidoctor_ts5_tc7B_columnValidation'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts5_tc1_checkPlMonthlyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts5_tc1_checkPlMonthlyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts5_tc1_checkPlMonthlyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_monthly_table_exists, pl_monthly_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_multi_doctor_stats_monthly') INTO pl_monthly_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_multi_doctor_stats_monthly') INTO pl_monthly_table_empty;
	
	IF (pl_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_monthly_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_multi_doctor` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO plm_count FROM emihealth_final.`pl_multi_doctor_stats_daily` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_multi_doctor WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_multi_doctor_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_multi_doctor WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_multi_doctor_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts5_tc5_checkEqualRedsResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts5_tc5_checkEqualRedsResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts5_tc5_checkEqualRedsResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_multi_doctor WHERE color_code='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.`pl_multi_doctor_stats_monthly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts5_tc6_distinctYearsCountResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts5_tc6_distinctYearsCountResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts5_tc6_distinctYearsCountResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_multi_doctor WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.`pl_multi_doctor_stats_monthly` WHERE isactive=1;
	
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_multi_doctor_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_multidoctor';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_07_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_07_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2)   NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2)  DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2)  DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2)  DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_07_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_07_ts5_tc7(attend, MONTH,YEAR, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		        SELECT attend,MONTH,YEAR,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		FROM emihealth_final.`pl_multi_doctor_stats_monthly` WHERE isactive=1 ORDER BY (CONCAT(MONTH,YEAR)) DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_07_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check, temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_07_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.`results_multi_doctor` WHERE isactive=1 AND MONTH(results_multi_doctor.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.`results_multi_doctor` WHERE isactive=1 AND MONTH(results_multi_doctor.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_multi_doctor WHERE isactive=1 AND MONTH(results_multi_doctor.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_multi_doctor WHERE isactive=1 AND MONTH(results_multi_doctor.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND color_code='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_multi_doctor WHERE isactive=1 AND MONTH(results_multi_doctor.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND color_code='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_multi_doctor WHERE isactive=1 AND MONTH(results_multi_doctor.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND color_code='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				SET temp_expec_color_code='green';
			END IF;
	
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) INTO temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_multi_doctor` 
			WHERE isactive=1 AND MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND color_code='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, ROUND(actual_recovered_money,2) , actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_07_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_07_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_07_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_07_ts5_tc7 WHERE t_temp_07_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_07_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_07_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_07_ts5_tc7 WHERE t_temp_07_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_TS6_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_TS6_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_TS6_PL_STATS_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying result and pl_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts6_tc1_checkCountResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying paid money in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts6_tc2_checkPaidMoneyResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying recovered money in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts6_tc3_checkRecoveredMoneyResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying red counts in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts6_tc4_checkEqualRedsResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts6_tc5_distinctYearsCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying dintinct years in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts6_tc5_distinctYearsCountResNPlYearly'
		);
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying table[emihealth_final.pl_multi_doctor_stats_yearly] by generating test table[test_cases_2.t_temp_07_ts6_tc6]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts6_tc6A_testTableGen/t_07_multidoctor_ts6_tc6B_columnValidation'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_multi_doctor` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_multi_doctor_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_multi_doctor` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_multi_doctor_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_multi_doctor`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_multi_doctor_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_multi_doctor` WHERE color_code='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_multi_doctor_stats_yearly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts6_tc5_distinctYearsCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts6_tc5_distinctYearsCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts6_tc5_distinctYearsCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.`results_multi_doctor` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.`pl_multi_doctor_stats_yearly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_multi_doctor_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_multidoctor_stats_yearly';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_07_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_07_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2)   NOT NULL,
	  `expec_income` DOUBLE precision (11,2)  DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2)  DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2)  DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_07_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_07_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_multi_doctor_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_07_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check , temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_07_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_multi_doctor` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_multi_doctor` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_multi_doctor WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_multi_doctor WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and color_code='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_multi_doctor WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND color_code='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_multi_doctor WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND color_code='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
			
				if(temp_g_check!= 0) THEN	
					set temp_expec_color_code='green';
					
			End IF;			
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_multi_doctor` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND color_code='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, ROUND(actual_recovered_money,2), actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_07_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
						
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_07_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_07_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_07_ts6_tc6 WHERE t_temp_07_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_07_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_07_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_07_ts6_tc6 where t_temp_07_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_TS7_DASHBOARD_MONTHLY_RES_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_TS7_DASHBOARD_MONTHLY_RES_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_TS7_DASHBOARD_MONTHLY_RES_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying distinct year counts in pl_monthly and db_monthly'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts7_tc2_countDistinctYearsPlMNDbM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying total_count db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts7_tc3_checkTotalCountPlMNdbm'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying providers count in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts7_tc4_checkCountNoOfProvPlMNdbM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts7_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying yellow count db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts7_tc4_checkCountNoOfProvPlMNdbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts7_tc7_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying green count in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts7_tc7_checkGreenCountsPlMNDbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying paid_money  in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_07_ts7_tc9]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts7_tc9A_testTableGen/t_07_multidoctor_ts7_tc9B_columnValidation'
		);	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts7_tc1_checkDashboardMonthlyResExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts7_tc1_checkDashboardMonthlyResExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts7_tc1_checkDashboardMonthlyResExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_monthly_table_exists, db_monthly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_monthly_results') INTO db_monthly_table_exists;
	
	select count(*) into db_monthly_table_empty from emihealth_final.dashboard_monthly_results where type=07;
	
	IF ( db_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_monthly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_monthly_results) against algo id 12.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_monthly_results) against algo id 12.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_multi_doctor_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=07;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_multi_doctor_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=07;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_multi_doctor_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=07;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_multi_doctor_stats_monthly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=7;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts7_tc7_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts7_tc7_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts7_tc7_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_multi_doctor_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=7;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_multi_doctor_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=7;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 and type=11;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_multidoctor';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_07_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_07_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_07_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_07_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=07) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_07_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_07_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.`pl_multi_doctor_stats_monthly` WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_multi_doctor_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_multi_doctor_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_07_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_07_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_07_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_07_ts7_tc9 WHERE t_temp_07_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_07_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_07_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_07_ts7_tc9 WHERE t_temp_07_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying pl_yearly and db_yearly table distinct years'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts8_tc2_countDistinctYearsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying pl_yearly and db_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts8_tc3_checkTotalCountPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying no. of providers in db_yearly  and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts8_tc4_checkCountNoOfProvPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying red counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts8_tc5_checkTotalRedCountsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts8_tc6_checkTotalYellowCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying yellow counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts8_tc6_checkTotalYellowCountsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying green counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts8_tc7_checkGreenCountsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying paid money money in db_yearly and pl_yearly table0'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			07
			,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_07_ts8_tc9]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_07_multidoctor_ts9_tc9A_testTableGen/t_07_multidoctor_ts9_tc9B_columnValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts8_tc1_checkDashboardYearlyResTabExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_yearly_table_exists, db_yearly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_yearly_results') INTO db_yearly_table_exists;
	
	select count(*) into db_yearly_table_empty from emihealth_final.dashboard_yearly_results where type=7;
	
	IF ( db_yearly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_yearly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_yearly_results) against algo id 7.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_yearly_results) against algo id 7.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.pl_multi_doctor_stats_yearly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=7;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.pl_multi_doctor_stats_yearly WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=7;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.pl_multi_doctor_stats_yearly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=7;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_multi_doctor_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=7;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_multi_doctor_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=7;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_multi_doctor_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=7;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_multi_doctor_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=7;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts9_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts9_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts9_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=07;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_multidoctor';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_07_ts9_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_07_ts9_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_07_ts9_tc9; 
	
	
	insert into test_cases_2.t_temp_07_ts9_tc9(year,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=07) ORDER BY(year)desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_07_ts9_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07_multidoctor_ts9_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07_multidoctor_ts9_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07_multidoctor_ts9_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_07_ts9_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.`pl_multi_doctor_stats_yearly` WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_multi_doctor_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
						
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_multi_doctor_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_07_ts9_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_07_ts9_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_07_ts9_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_07_ts9_tc9 WHERE t_temp_07_ts9_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_07_ts9_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_07_ts9_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_07_ts9_tc9 WHERE t_temp_07_ts9_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_07________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_07________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_07________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_MAIN`()
BEGIN
CALL t_08_overactiveInactiveAxio_TS2_RESULT_TABLE();
CALL t_08_overactiveInactiveAxio_TS3_PL_STATS_YEARLY_TABLE();
CALL t_08_overactiveInactiveAxio_TS4_DASHBOARD_YEARLY_RESULTS_TABLE();
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_TS2_RESULT_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts2_tc5A_testTableGen`(@suc);
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts2_tc5B_ppTableGen`(@suc);
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts2_tc5C_reasons`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying Columns for result table[emihealth_final.overactive_inactive] by generating test table[test_cases_2.t_temp_08_overactiveInactive_result_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts2_tc5A_testTableGen/t_08_overactiveInactiveAxio_ts2_tc5B_ppTableGen/t_08_overactiveInactiveAxio_ts2_tc5C_reasons'
		);
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts2_tc5A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts2_tc5A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts2_tc5A_testTableGen`(out success Bool)
BEGIN
	-- =================================================
	--            Declaring All Variables 
	-- =================================================
	declare reason_percent decimal(5,2);
	declare reason_ryg_status varchar(30) default null;
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        -- =================================================
	--            Creating Table Structure
	-- =================================================
	
	DROP TABLE IF EXISTS test_cases_2.`t_temp_08_overactiveInactive_result_test_table`;
	
	CREATE  TABLE IF NOT EXISTS test_cases_2.`t_temp_08_overactiveInactive_result_test_table`(
	`id` BIGINT(20) UNSIGNED  NOT NULL AUTO_INCREMENT ,
	`res_id` BIGINT(20)  DEFAULT NULL,
	`attend` VARCHAR(40) DEFAULT NULL,
	`specialty` varchar(20) default null,
	`payer_id` varchar(20) default null,
	`mid` varchar(250) default null,
	`year` int(11) default null,
	
	`act_total_num_of_visits` bigint(11) default null,
	`exp_total_num_of_visits` BIGINT(11) DEFAULT NULL,
	
	`act_all_visits_incl_xrays` BIGINT(11) DEFAULT NULL,
	`exp_all_visits_incl_xrays` BIGINT(11) DEFAULT NULL,
	
	`act_ryg_status` VARCHAR(15) DEFAULT NULL,
	`exp_ryg_status` VARCHAR(15) DEFAULT NULL,
	
	`test_status` BOOL DEFAULT NULL,
	`test_detail` TINYTEXT DEFAULT NULL,
	PRIMARY KEY (`id`)
	) ENGINE=innodb DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE test_cases_2.`t_temp_08_overactiveInactive_result_test_table`;
	
	-- =================================================
	--           Sampling And Inserting Data 
	-- =================================================
	SET iterator = 101;
        WHILE(iterator < 104) DO
		SET selected_reason= iterator;
		SELECT reason_weight, ryg_status INTO reason_percent, reason_ryg_status FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=08 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`overactive_inactive` WHERE color_code = reason_ryg_status;
		
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		
		INSERT INTO test_cases_2.`t_temp_08_overactiveInactive_result_test_table`
		(
			res_id
			,attend
			,specialty
			,payer_id
			,mid
			,year
			,act_total_num_of_visits
			,act_all_visits_incl_xrays
			,act_ryg_status
		)
		SELECT 	id
			,attend
			,specialty
			,payer_id
			,mid
			,year
			,total_num_of_visits
			,all_visits_incl_xrays
			,color_code
		FROM 	emihealth_final.overactive_inactive
		WHERE 	color_code = reason_ryg_status 
			AND isactive=1 
		ORDER 	
		BY 	RAND() 
		LIMIT 	reason_sample_count;	
		
	
		SET iterator = iterator + 1;
	END WHILE;
	
	
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts2_tc5B_ppTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts2_tc5B_ppTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts2_tc5B_ppTableGen`(out success Bool)
BEGIN
	-- =================================================
	--            Creating Table Structure
	-- =================================================
	drop table if exists test_cases_2.t_temp_08_overactiveInactive_result_pp_table;
	create table test_cases_2.t_temp_08_overactiveInactive_result_pp_table
	(
		id bigint default null
		,attend varchar(20) default null
		,specialty VARCHAR(20) DEFAULT NULL
		,payer_id varchar(25) default null
		,mid varchar(50) default null
		,proc_code varchar(50) default null
		,date_of_service datetime default null
		,year int(11) default null
		
		,index year_specialty using Btree(YEAR,specialty)
	);
	-- =================================================
	--            Inserting Data
	-- =================================================
	
	insert into test_cases_2.t_temp_08_overactiveInactive_result_pp_table
		(
		id
		,attend
		,specialty
		,payer_id
		,mid
		,proc_code
		,date_of_service
		,year
		) 
	select	pp.id
		,pp.attend
		,pp.specialty
		,pp.payer_id
		,pp.Mid
		,pp.proc_code
		,pp.date_of_service
		,pp.year
        from 	emihealth_final.procedure_performed as pp
		inner join
		emihealth_final.ref_standard_procedures as ref
		on pp.proc_code = ref.pro_code
        where 	is_invalid = 0
		;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts2_tc5C_reasons` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts2_tc5C_reasons` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts2_tc5C_reasons`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	-- =====================================================================================================================
	--            					Declaring All Variables 
	-- =====================================================================================================================
	-- For Holdind Data From Cursor
	declare t_id BIGINT(20) default 0 ;
	declare t_attend VARCHAR(40) default null;
	declare t_specialty varchar(20) default null;
	declare t_payer_id varchar(20) default null;
	declare t_mid varchar(250) default null;
	declare t_year int(11) default null ;
	
	-- For Holding Results of Queries
	declare count_all_visits_incl_xrays bigint(11) default null;
	declare max_dos_D0120_D1110, another_max_dos_D0120_D1110 datetime default null;
	declare has_D0120_D1110_6_month_ago int(11) default 0;
	Declare _id BIGINT(11) DEFAULT NULL;
	
	
	-- Variables below are used for setting Output parameters
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	-- Cursor Declarations
	declare finished bool default false;
	declare test_row_cursor cursor for
				select 	id, attend, specialty, payer_id, mid, year  
				from  	test_cases_2.t_temp_08_overactiveInactive_result_test_table
				;
	declare continue handler for not found set finished = true;
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Starts 
	-- =====================================================================================================================
	drop table if exists test_cases_2.t_temp_08_overactiveInactiveAxio_mini_table_for_result;
	CREATE TABLE test_cases_2.t_temp_08_overactiveInactiveAxio_mini_table_for_result
	(
		id INT(11) UNSIGNED NOT NULL AUTO_INCREMENT,
		attend VARCHAR(20) DEFAULT NULL,
		specialty VARCHAR(20) DEFAULT NULL,
		payer_id VARCHAR(25) DEFAULT NULL,
		MID VARCHAR(50) DEFAULT NULL,
		proc_code VARCHAR(50) DEFAULT NULL,
		date_of_service DATETIME DEFAULT NULL,
		
		PRIMARY KEY (id)
	);
	
	open test_row_cursor;
	get_test_row:loop
	
		fetch test_row_cursor into t_id, t_attend, t_specialty, t_payer_id,t_mid, t_year;
		if(finished = true)then
			leave get_test_row;
		end if;
		
		/*
		-- Creating Mini table on each iteration
		drop table if exists test_cases_2.t_temp_08_overactiveInactiveAxio_mini_table_for_result;
		create 	table test_cases_2.t_temp_08_overactiveInactiveAxio_mini_table_for_result
		as 
		select 	id,attend,specialty,payer_id,MID,proc_code, date_of_service 
		from 	test_cases_2.t_temp_08_overactiveInactive_result_pp_table 
		where 	attend = t_attend
			and specialty = t_specialty
			-- and payer_id = t_payer_id
			and mid = t_mid
			and year = t_year
			;
		*/
		
		TRUNCATE test_cases_2.t_temp_08_overactiveInactiveAxio_mini_table_for_result;
		INSERT INTO test_cases_2.t_temp_08_overactiveInactiveAxio_mini_table_for_result
		SELECT 	id,attend,specialty,payer_id,MID,proc_code, date_of_service 
		FROM 	test_cases_2.t_temp_08_overactiveInactive_result_pp_table 
		WHERE 	-- attend = t_attend
			-- and specialty = t_specialty
			-- and payer_id = t_payer_id
			-- and
			MID = t_mid AND
			year = t_year
			;
			
		-- Using test_cases_2.t_temp_08_overactiveInactiveAxio_mini_table_for_result for all quries
		SELECT 	COUNT(DISTINCT(date_of_service))
		INTO 	count_all_visits_incl_xrays
		FROM 	test_cases_2.t_temp_08_overactiveInactiveAxio_mini_table_for_result
		WHERE 	attend = t_attend
			AND specialty = t_specialty
			-- and payer_id = t_payer_id
			AND MID = t_mid
			AND YEAR(date_of_service) = t_year
			AND proc_code NOT LIKE 'D8%'
			;
		
		UPDATE 	test_cases_2.t_temp_08_overactiveInactive_result_test_table
		SET 	exp_all_visits_incl_xrays = count_all_visits_incl_xrays
		WHERE 	id = t_id
			;
		
		-- ------------------------------------------------IF [A] STARTS----------------------------------------------------------- --
		IF(count_all_visits_incl_xrays >= 5) THEN
			SELECT 	MAX(date_of_service), id
			INTO 	max_dos_D0120_D1110, _id
			FROM 	test_cases_2.t_temp_08_overactiveInactiveAxio_mini_table_for_result
			WHERE 	proc_code IN ('D0120','D1110')
				;
				
			SELECT 	MAX(date_of_service)
			INTO 	another_max_dos_D0120_D1110
			FROM 	test_cases_2.t_temp_08_overactiveInactiveAxio_mini_table_for_result
			WHERE 	proc_code IN ('D0120','D1110')
				AND id != _id 
				and date_of_service <= max_dos_D0120_D1110
				;
				
			IF(	max_dos_D0120_D1110 != NULL AND another_max_dos_D0120_D1110 != NULL AND 
				max_dos_D0120_D1110 != another_max_dos_D0120_D1110 AND
				(another_max_dos_D0120_D1110 between  DATE_SUB(max_dos_D0120_D1110, INTERVAL 180 DAY) AND another_max_dos_D0120_D1110 ) 	
			   )THEN
				
				UPDATE 	test_cases_2.t_temp_08_overactiveInactive_result_test_table
				SET 	exp_total_num_of_visits = count_all_visits_incl_xrays - 1
					,test_detail = 'Found Other D0120_D1110'
				WHERE 	id = t_id
					;
			ELSE
				UPDATE 	test_cases_2.t_temp_08_overactiveInactive_result_test_table
				SET 	exp_total_num_of_visits = count_all_visits_incl_xrays
					,test_detail = 'No maximum date found'
				WHERE 	id = t_id
					;
			END IF;
		ELSE
			UPDATE 	test_cases_2.t_temp_08_overactiveInactive_result_test_table
			SET 	exp_total_num_of_visits = count_all_visits_incl_xrays
				,test_detail = 'Visits are less than 5'
			WHERE 	id = t_id
				;
		END IF;
			
		-- -------------------------------------------------IF [A] ENDS------------------------------------------------------------ --
	END LOOP;
	CLOSE test_row_cursor;
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Ends
	-- =====================================================================================================================
	UPDATE 	test_cases_2.t_temp_08_overactiveInactive_result_test_table
	SET 	exp_ryg_status = 'red'
	WHERE 	exp_total_num_of_visits >= 8
		;
	UPDATE 	test_cases_2.t_temp_08_overactiveInactive_result_test_table
	SET 	exp_ryg_status = 'yellow'
	WHERE 	exp_total_num_of_visits BETWEEN 6 AND 7
		;
	UPDATE 	test_cases_2.t_temp_08_overactiveInactive_result_test_table
	SET 	exp_ryg_status = 'green'
	WHERE 	exp_total_num_of_visits <= 5
		;
	
	
	UPDATE 	test_cases_2.t_temp_08_overactiveInactive_result_test_table
	SET 	test_status = 1
	WHERE 	act_ryg_status = exp_ryg_status
		;
	UPDATE 	test_cases_2.t_temp_08_overactiveInactive_result_test_table
	SET 	test_status = 0
	WHERE 	act_ryg_status != exp_ryg_status
		;
	
	-- Setting Up Output parameters [success, test_status, test_detail]
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_08_overactiveInactive_result_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_08_overactiveInactive_result_test_table AS tt WHERE  tt.test_status = 0;
	SET temp_count = 0;
	
	
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_08_overactiveInactive_result_test_table AS tt WHERE tt.test_status IS NULL ;
	IF(temp_count>0) THEN
		SET out_success=FALSE;
	ELSE
		SET out_success=TRUE;
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_08_overactiveInactive_result_test_table AS tt WHERE tt.test_status = 0;
		IF(temp_count=0) THEN
			SET out_test_status=TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_TS3_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_TS3_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_TS3_PL_STATS_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts3_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying result and pl_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts3_tc1_checkCountResNPlYearly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts3_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying paid money in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts3_tc2_checkPaidMoneyResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts3_tc5_distinctYearsCountResNPlYrly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying distinct years counts in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts3_tc5_distinctYearsCountResNPlYrly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts3_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts3_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying table[emihealth_final.overactive_inactive_yearly] by generating test table[test_cases_2.t_temp_08_ts3_tc6]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts3_tc6A_testTableGen/t_08_overactiveInactiveAxio_ts3_tc6B_columnValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts3_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts3_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts3_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	-- SELECT COUNT(*) INTO res_count FROM  emihealth_final.`overactive_inactive` WHERE isactive=1;
	-- SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.overactive_inactive_yearly WHERE isactive=1;
	
	SELECT COUNT(DISTINCT(CONCAT(attend,YEAR))) INTO res_count FROM  emihealth_final.`overactive_inactive` 
	WHERE isactive=1 AND color_code IN ('red','yellow'); -- 1326
	SELECT COUNT(DISTINCT(CONCAT(attend,YEAR))) INTO ply_count FROM emihealth_final.overactive_inactive_yearly WHERE isactive=1;
	
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts3_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts3_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts3_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	-- SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`overactive_inactive` WHERE isactive=1;
	-- SELECT SUM(income) INTO ply_income from emihealth_final.`overactive_inactive_yearly` WHERE isactive=1;
	
	SELECT ROUND(SUM(total_amount),2) into res_paid_money  FROM emihealth_final.`overactive_inactive`
	WHERE isactive=1 AND color_code IN ('red','yellow');
	SELECT ROUND(SUM(income),2) into ply_income FROM emihealth_final.`overactive_inactive_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts3_tc5_distinctYearsCountResNPlYrly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts3_tc5_distinctYearsCountResNPlYrly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts3_tc5_distinctYearsCountResNPlYrly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into res_years_count FROM emihealth_final.`overactive_inactive` 
	WHERE isactive=1 and color_code in ('red','yellow');
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.`overactive_inactive_yearly` WHERE isactive=1;
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts3_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts3_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts3_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.overactive_inactive_yearly where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_weightage_overactiveIactiveAxio';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_08_ts3_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_08_ts3_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_08_ts3_tc6; 
	
	
	insert into test_cases_2.t_temp_08_ts3_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_color_code)
		                SELECT attend,year,procedure_count,total_patients,income,color_code
		from emihealth_final.overactive_inactive_yearly WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_08_ts3_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts3_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts3_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts3_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default NULL;
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_08_ts3_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT sum(total_num_procedures) into temp_expec_procedure_count 
			FROM emihealth_final.`overactive_inactive` 
			WHERE isactive=1  AND YEAR=t_year AND attend=t_attend And color_code<>'green';
			
			
			SELECT count(DISTINCT(MID)) into temp_expec_patient_count 
			FROM emihealth_final.`overactive_inactive` 
			where isactive=1  AND YEAR=t_year AND attend=t_attend and color_code<>'green';
			
			
			select Round(sum(total_amount),2) into temp_expec_income 
			FROM emihealth_final.overactive_inactive 
			WHERE isactive=1  AND YEAR=t_year AND attend=t_attend AND color_code<>'green';
			
			
			
			
			
			
			select count(*) into temp_r_check 
			FROM emihealth_final.overactive_inactive 
			WHERE isactive=1  AND YEAR=t_year AND attend=t_attend AND color_code='red';
			
			SELECT COUNT(*) INTO temp_y_check 
			FROM emihealth_final.overactive_inactive 
			WHERE isactive=1  AND YEAR=t_year AND attend=t_attend AND color_code='yellow';
			
			SELECT COUNT(*) INTO temp_g_check 
			FROM emihealth_final.overactive_inactive 
			WHERE isactive=1  AND YEAR=t_year AND attend=t_attend AND color_code='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income,  actual_color_code
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income,  temp_actual_color_code
			FROM test_cases_2.t_temp_08_ts3_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
			
			
			
			UPDATE test_cases_2.t_temp_08_ts3_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_color_code = temp_expec_color_code,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			set t_attend=NULL;
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_color_code = temp_actual_color_code =NULL;
			set temp_test_detail=NULL;
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
			
			
			
        	END LOOP ;
	CLOSE my_cursor ;
	
	
	
	
	
	
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_08_ts3_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_08_ts3_tc6 WHERE t_temp_08_ts3_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_08_ts3_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_08_ts3_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_08_ts3_tc6 where t_temp_08_ts3_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_TS4_DASHBOARD_YEARLY_RESULTS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_TS4_DASHBOARD_YEARLY_RESULTS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_TS4_DASHBOARD_YEARLY_RESULTS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts4_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying pl_yearly and db_yearly table distinct years'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts4_tc2_countDistinctYearsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts4_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying pl_yearly and db_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts4_tc3_checkTotalCountPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts4_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying no. of providers in db_yearly  and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts4_tc4_checkCountNoOfProvPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts4_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying red counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts4_tc5_checkTotalRedCountsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts4_tc6_chkTotalYellowCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying yellow counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts4_tc6_chkTotalYellowCountsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts4_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying green counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts4_tc7_checkGreenCountsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts4_tc8_chkTotalPaidMnyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying recovered money in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts4_tc8_chkTotalPaidMnyCountPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts4_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts4_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			08
			,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_08_ts4_tc9]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_08_overactiveInactiveAxio_ts4_tc9A_testTableGen/t_08_overactiveInactiveAxio_ts4_tc9B_columnValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts4_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts4_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts4_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.overactive_inactive_yearly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=8;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts4_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts4_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts4_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.overactive_inactive_yearly WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=8;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts4_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts4_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts4_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.overactive_inactive_yearly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=8;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts4_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts4_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts4_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.overactive_inactive_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=8;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts4_tc6_chkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts4_tc6_chkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts4_tc6_chkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.overactive_inactive_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=8;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts4_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts4_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts4_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.overactive_inactive_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=8;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts4_tc8_chkTotalPaidMnyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts4_tc8_chkTotalPaidMnyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts4_tc8_chkTotalPaidMnyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.overactive_inactive_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=8;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts4_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts4_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts4_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=8;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_overactiveInactiveAxio';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_08_ts4_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_08_ts4_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_08_ts4_tc9; 
	
	
	insert into test_cases_2.t_temp_08_ts4_tc9(year,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=8) ORDER BY(year)desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_08_ts4_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08_overactiveInactiveAxio_ts4_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08_overactiveInactiveAxio_ts4_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08_overactiveInactiveAxio_ts4_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_08_ts4_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.overactive_inactive_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.overactive_inactive_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.overactive_inactive_yearly WHERE YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.overactive_inactive_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_08_ts4_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_08_ts4_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_08_ts4_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_08_ts4_tc9 WHERE t_temp_08_ts4_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_08_ts4_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_08_ts4_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_08_ts4_tc9 WHERE t_temp_08_ts4_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_08________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_08________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_08________________`()
BEGIN
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_1_check_preconditions` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_1_check_preconditions` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_1_check_preconditions`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	declare baseTableExist, srcTableExist, resTableExist, pldTableExist, plmTableExist, plyTableExist, 
	        dbdTableExist, dbmTableExist, dbyTableExist, mhdTableExist, mhmTableExist, mhyTableExist bool default false;
	        
	DECLARE baseTableEmpty, srcTableEmpty, resTableEmpty, pldTableEmpty, plmTableEmpty, plyTableEmpty, 
	        dbdTableEmpty, dbmTableEmpty, dbyTableEmpty, mhdTableEmpty, mhmTableEmpty, mhyTableEmpty BOOL DEFAULT FALSE;
	declare tempCount bigint default 0;
	        
	declare preCondText text default '';
	
	select test_cases_2.`t_check_if_table_exists_global_fun`('procedure_performed') into baseTableExist;
	SELECT test_cases_2.`t_check_if_table_exists_global_fun`('src_primary_tooth_ext') INTO srcTableExist;
	SELECT test_cases_2.`t_check_if_table_exists_global_fun`('results_primary_tooth_ext') INTO resTableExist;
	
	SELECT test_cases_2.`t_check_if_table_exists_global_fun`('pl_primary_tooth_stats_daily') INTO pldTableExist;
	SELECT test_cases_2.`t_check_if_table_exists_global_fun`('pl_primary_tooth_stats_monthly') INTO plmTableExist;
	SELECT test_cases_2.`t_check_if_table_exists_global_fun`('pl_primary_tooth_stats_yearly') INTO plyTableExist;
	
	SELECT test_cases_2.`t_check_if_table_exists_global_fun`('dashboard_daily_results') INTO dbdTableExist;
	SELECT test_cases_2.`t_check_if_table_exists_global_fun`('dashboard_monthly_results') INTO dbmTableExist;
	SELECT test_cases_2.`t_check_if_table_exists_global_fun`('dashboard_yearly_results') INTO dbyTableExist;
	
	SELECT test_cases_2.`t_check_if_table_exists_global_fun`('main_home_graph_daily') INTO mhdTableExist;
	SELECT test_cases_2.`t_check_if_table_exists_global_fun`('main_home_graph_daily') INTO mhmTableExist;
	SELECT test_cases_2.`t_check_if_table_exists_global_fun`('main_home_graph_daily') INTO mhyTableExist;
	
	select test_cases_2.`t_check_if_table_not_empty_global_fun`('procedure_performed') into baseTableEmpty;
	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_MAIN`()
BEGIN
call t_11_primToothExt_TS1_SOURCE_TABLE();
CAll t_11_primToothExt_TS2_RESULT_TABLE();
CALL t_11_primToothExt_TS3_PL_DAILY_STATS_TABLE();
CALL t_11_primToothExt_TS4_DASHBOARD_DAILY_TABLE();
CALL t_11_primToothExt_TS5_PL_MONTHLY_STATS_TABLE();
CALL t_11_primToothExt_TS6_PL_YEARLY_STATS_TABLE();
CALL t_11_primToothExt_TS7_DASHBOARD_MONTHLY_STATS_TABLE();
CALL t_11_primToothExt_TS8_DASHBOARD_YEARLY_STATS_TABLE();
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_TS1_SOURCE_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts1_tc1_baseSrcCntRqual`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying base and source table counts.'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts1_tc1_baseSrcCntRqual'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts1_tc3_impColValueSrcNotNull`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying important column values in source table are not null'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts1_tc3_impColValueSrcNotNull'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts1_tc4_resHasD7140Only`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying source table contains only D7140 codes '
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts1_tc4_resHasD7140Only'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts1_tc5_srcHasUniqeAttendID`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying source table contains  Unique Attend ID.'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts1_tc5_srcHasUniqeAttendID'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts1_tc6_uniqeRecordIdentificationSrc`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying Unique Record'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts1_tc6_uniqeRecordIdentificationSrc'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts1_tc1_baseSrcCntRqual` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts1_tc1_baseSrcCntRqual` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts1_tc1_baseSrcCntRqual`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	
	SELECT COUNT(*) into src_count 
	FROM emihealth_final.src_primary_tooth_ext;
	
	
	SELECT 	COUNT(*) into base_count FROM emihealth_final.procedure_performed 
	WHERE 	tooth_no IN('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T') 
		AND proc_code='D7140'  
		and is_invalid=0
		and patient_age > 0
		;
	
	if(src_count=base_count) then
		set test_status=true;
		set test_detail='Equal counts found in base and source table.';
	else
		set test_status=False;
		if(src_count>base_count)then
			set test_detail=concat(src_count-base_count,' more counts  found in source table then base table.');
		else
			set test_detail=concat(base_count-src_count,' more counts found in result table then base table.');
		end if;
	end if;
	set success=true;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts1_tc2_baseSrcDistAgeEqual` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts1_tc2_baseSrcDistAgeEqual` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts1_tc2_baseSrcDistAgeEqual`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	SELECT COUNT(DISTINCT(patient_age)) into src_count FROM emihealth_final.src_primary_tooth_ext ;
	SELECT COUNT(DISTINCT(patient_age)) into base_count FROM emihealth_final.procedure_performed AS a WHERE tooth_no IN('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T') AND proc_code='D7140';
        
	
	IF(src_count=base_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal no. distinct ages found in base and source table.';
	ELSE
		SET test_status=FALSE;
		IF(src_count>base_count)THEN
			SET test_detail=CONCAT(src_count-base_count,' more distinct ages found in source table then base table.');
		ELSE
			SET test_detail=CONCAT(base_count-src_count,' more distinct ages found in base table then source table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts1_tc3_impColValueSrcNotNull` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts1_tc3_impColValueSrcNotNull` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts1_tc3_impColValueSrcNotNull`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a,count_b INT;
	DECLARE total_count INT;
	SELECT COUNT(*) INTO count_a FROM emihealth_final.src_primary_tooth_ext AS a WHERE (a.`attend`='' or a.`mid`='' or a.`date_of_service`='');
	SELECT COUNT(*) INTO count_b FROM emihealth_final.src_primary_tooth_ext AS a WHERE (a.`patient_age`='' or a.`tooth_no`='');
	
	
	set total_count = count_a + count_b;
	
	IF(total_count=0) THEN
		SET test_status=TRUE;
		SET test_detail='No record found in source table having null value in important attributes.';
	ELSE
		SET test_status=FALSE;
	        SET test_detail=CONCAT(total_count,' records found in source table having null value in important attributes.');	
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts1_tc4_resHasD7140Only` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts1_tc4_resHasD7140Only` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts1_tc4_resHasD7140Only`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE _count INT;
	SELECT COUNT(*)into _count FROM emihealth_final.src_primary_tooth_ext WHERE proc_code!='D7140';
	IF (_count=0) THEN
		SET test_status = TRUE;
		SET test_detail='No record found without procedure code (D7140) in source table.';
	ELSE
		SET test_status = FALSE;
		SET test_detail=CONCAT(_count,' records found without procedure code (D7140) in source table.');
	END IF;
	SET success=TRUE;
end */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts1_tc5_srcHasUniqeAttendID` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts1_tc5_srcHasUniqeAttendID` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts1_tc5_srcHasUniqeAttendID`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a INT;
	DECLARE count_b INT;
	SELECT COUNT(DISTINCT(attend)) into count_a FROM emihealth_final.src_primary_tooth_ext;
        SELECT COUNT(DISTINCT(CONCAT(attend,attend_name))) into count_b FROM emihealth_final.src_primary_tooth_ext;
	
	IF(count_a=count_b) THEN
		SET test_status=TRUE;
		SET test_detail='Attend ID is unique in source table.';
	ELSE
		SET test_status=FALSE;
		SET test_detail='Attend Id is not unique in source table.';	
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts1_tc6_uniqeRecordIdentificationSrc` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts1_tc6_uniqeRecordIdentificationSrc` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts1_tc6_uniqeRecordIdentificationSrc`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a INT;
	DECLARE count_b INT;
	
	SELECT COUNT(*) into count_a FROM emihealth_final.src_primary_tooth_ext;
	SELECT COUNT(DISTINCT(CONCAT(claim_id,line_item_no,attend,MID,tooth_no))) into count_b FROM emihealth_final.src_primary_tooth_ext;
	
	IF(count_a=count_b) THEN
		SET test_status=TRUE;
		SET test_detail='Records in source table are identified uniquely.';
	ELSE
		SET test_status=FALSE;
		SET test_detail='Records in source table are not identified uniquely.';	
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts2_tc1_srcResCntEqual`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying results and source counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts2_tc1_srcResCntEqual'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts2_tc2_impColValueResNotNull`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying important columns are not null in result table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts2_tc2_impColValueResNotNull'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts2_tc3_srcResDistAgeEqual`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying Source Result Dist Age Equal'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts2_tc3_srcResDistAgeEqual'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts2_tc4_resHasD7140Only`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying Result table has D7140'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts2_tc4_resHasD7140Only'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts2_tc5A_testTableGen`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts2_tc5B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying Columns for result table[emihealth_final.results_primary_tooth_ext] by generating test table[test_cases_2.t_temp_11_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts2_tc5A_testTableGen'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts2_tc1_srcResCntEqual` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts2_tc1_srcResCntEqual` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts2_tc1_srcResCntEqual`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE res_count INT;
	SELECT COUNT(*)into src_count FROM emihealth_final.src_primary_tooth_ext where proc_code='D7140';
	
	SELECT COUNT(*) into res_count FROM emihealth_final.results_primary_tooth_ext where isactive=1;
	-- set src_count=4; -- for testing
	if(src_count=res_count) then
		set test_status=true;
		set test_detail='Equal counts found in result and source table.';
	else
		set test_status=False;
		if(src_count>res_count)then
			set test_detail=concat(src_count-res_count,' more counts  found in source table then result table.');
		else
			set test_detail=concat(res_count-src_count,' more counts found in result table then source table.');
		end if;
	end if;
	set success=true;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts2_tc2_impColValueResNotNull` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts2_tc2_impColValueResNotNull` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts2_tc2_impColValueResNotNull`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a,count_b INT;
	DECLARE total_count INT;
	SELECT COUNT(*) INTO count_a FROM emihealth_final.results_primary_tooth_ext AS res WHERE res.`attend`='' or res.`mid`='' or res.`date_of_service`='' AND isactive=1;
	SELECT COUNT(*) INTO count_b FROM emihealth_final.results_primary_tooth_ext AS res WHERE res.`patient_age`='' or res.`tooth_no`='' or res.`reason_level`='' AND isactive=1;
	
	-- set count_a=4; -- for testing
	set total_count = count_a + count_b;
	
	IF(total_count=0) THEN
		SET test_status=TRUE;
		SET test_detail='No record found in result table having null value in important attributes.';
	ELSE
		SET test_status=FALSE;
	        SET test_detail=CONCAT(total_count,' records found in result table having null value in important attributes.');	
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts2_tc3_srcResDistAgeEqual` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts2_tc3_srcResDistAgeEqual` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts2_tc3_srcResDistAgeEqual`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE res_count INT;
	SELECT COUNT(DISTINCT(patient_age)) into src_count FROM emihealth_final.src_primary_tooth_ext;
	SELECT COUNT(DISTINCT(patient_age)) into res_count FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1;
	-- set src_count=4; -- for testing
	IF(src_count=res_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal no. distinct ages found in result and source table.';
	ELSE
		SET test_status=FALSE;
		IF(src_count>res_count)THEN
			SET test_detail=CONCAT(src_count-res_count,' more distinct ages found in source table then result table.');
		ELSE
			SET test_detail=CONCAT(res_count-src_count,' more distinct ages found in result table then source table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts2_tc4_resHasD7140Only` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts2_tc4_resHasD7140Only` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts2_tc4_resHasD7140Only`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE res_count INT;
	SELECT COUNT(*)into res_count FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1 AND proc_code!='D7140';
	IF (res_count=0) THEN
		SET test_status = TRUE;
		SET test_detail='No record found without procedure code (D7140) in result table.';
	ELSE
		SET test_status = FALSE;
		SET test_detail=CONCAT(res_count,' records found without procedure code (D7140) in result table.');
	END IF;
	SET success=TRUE;
end */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts2_tc5A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts2_tc5A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts2_tc5A_testTableGen`(out success Bool)
BEGIN
	declare reason_percent decimal(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        drop table if exists t_temp_11_primToothExt_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_11_primToothExt_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `rid` BIGINT(10) ZEROFILL NOT NULL,
	  `attend` varchar(20) Default Null,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` datetime default Null,
	  `patient_age` int(2) zerofill not null,
	  `tooth_no` VARCHAR(15) DEFAULT NULL,
	  `actual_reason_level` int(2) default Null,
	  `expected_reason_level` INT(2) DEFAULT NULL,
	  `test_status` bool Default Null,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_11_primToothExt_test_table;
        
        set iterator = 1;
        while(iterator < 3) Do
		SET selected_reason= iterator;
		select reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  where algo_id=11 and reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) into reason_total_count FROM emihealth_final.`results_primary_tooth_ext` where reason_level=selected_reason;
		
		/*IF(reason_total_count < 100) then
			set reason_sample_count=reason_total_count;
		else
			set reason_sample_count=(reason_total_count*reason_percent)/100;
		end if;*/
		
		SET reason_sample_count=(reason_total_count*reason_percent)/100;
		IF(reason_sample_count < 50)THEN
			SET reason_sample_count = 50;
		END IF;
		
		INSERT INTO test_cases_2.t_temp_11_primToothExt_test_table(rid,attend,MID,date_of_service,patient_age,tooth_no,actual_reason_level)
		SELECT id,attend,MID,date_of_service,patient_age,tooth_no,reason_level
		FROM emihealth_final.results_primary_tooth_ext WHERE reason_level=selected_reason AND isactive=1 ORDER BY RAND() LIMIT reason_sample_count;
		
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  emihealth_final.results_primary_tooth_ext;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts2_tc5B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts2_tc5B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts2_tc5B_resReasonsValidation`(OUT success int ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  DECLARE t_id BIGINT(20);
  declare t_tooth_no varchar(15);
  declare t_patient_age int (11); 
  DECLARE exf_min_age,exf_max_age INT (11);
  
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id, tooth_no,patient_age FROM test_cases_2.t_temp_11_primToothExt_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id, t_tooth_no, t_patient_age;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    if((t_tooth_no !='') and (t_patient_age != 0) and(t_tooth_no is not null) and (t_patient_age is not null) )then
			    if(t_tooth_no not IN('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T')) then
				UPDATE test_cases_2.t_temp_11_primToothExt_test_table SET expected_reason_level=-1, test_detail='Tooth No. is not in(A to T)' WHERE id=t_id;
			    else
				SELECT max_age,min_age INTO exf_max_age,exf_min_age FROM emihealth_final.primary_tooth_exfol_mapp WHERE tooth_no=t_tooth_no;
				
				if(t_patient_age = exf_max_age) then
					UPDATE test_cases_2.t_temp_11_primToothExt_test_table SET expected_reason_level=2, test_detail=CONCAT('Patient Age is Equal to max_age(',exf_max_age,') in exfoliation table.')  WHERE id=t_id;
				 else
					if (t_patient_age = exf_min_age) then
						
						UPDATE test_cases_2.t_temp_11_primToothExt_test_table SET expected_reason_level=2, test_detail=CONCAT('Patient Age is Equal to min_age(',exf_min_age,')  in exfoliation table.')   WHERE id=t_id;
					else
						if (t_patient_age BETWEEN exf_min_age AND exf_max_age) then
							
							UPDATE test_cases_2.t_temp_11_primToothExt_test_table SET expected_reason_level=2, test_detail=CONCAT('Patient Age is b/w min_age(',exf_min_age,') and max_age(',exf_max_age,')')  WHERE id=t_id;
						else
							UPDATE test_cases_2.t_temp_11_primToothExt_test_table SET expected_reason_level=1, test_detail=CONCAT('Patient Age is Not in  max_age(',exf_min_age,') and min_age(',exf_max_age,')') WHERE id=t_id;
						end if;
					end if;
				 end if;
			    end if;
		    else
			UPDATE test_cases_2.t_temp_11_primToothExt_test_table SET expected_reason_level=-1, test_detail='Invalid Data.' WHERE id=t_id;
		    end if;
	        END LOOP ;
  CLOSE my_cursor ;
  
  UPDATE test_cases_2.t_temp_11_primToothExt_test_table SET test_status=TRUE WHERE actual_reason_level=expected_reason_level;
  UPDATE test_cases_2.t_temp_11_primToothExt_test_table SET test_status=FALSE WHERE actual_reason_level!=expected_reason_level;
  
  -- setting up records counts
  select count(*) into count_total_records FROM test_cases_2.t_temp_11_primToothExt_test_table;
  select count(*) into count_defective_records FROM test_cases_2.t_temp_11_primToothExt_test_table where  actual_reason_level != expected_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_11_primToothExt_test_table WHERE expected_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_11_primToothExt_test_table where actual_reason_level != expected_reason_level;
	if(temp_count=0) then
		set test_status=true;
		set test_detail=concat(count_total_records,' records are tested.No ambiguous record found.');
	else
		SET test_status=False;
		SET test_detail=concat(count_defective_records,' ambiguous records found out of ',count_total_records);
	end if;
  END IF;
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying result and pl_daily table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts3_tc4_resPlDailyCount'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying paid money in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts3_tc5_resPlDailyEqualPaidMoney'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts3_tc6_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying recovered money in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts3_tc6_resPlDailyEqualRecoveredMoney'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying red counts in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts3_tc7_resPlDailyEqualReds'
		);
		
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts3_tc8_resPlDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying Result and pl daily Distinct year count'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts3_tc8_resPlDailyDistinctYearsCount'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying table[emihealth_final.pl_primary_tooth_stats_daily] by generating test table[test_cases_2.t_11_pl_temp].'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts3_tc2_plTestTable/t_11_primToothExt_ts3_tc1_plDailyValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts3_tc1_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts3_tc1_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts3_tc1_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT null;
	DECLARE t_dos DATETIME DEFAULT null;
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT null;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_11_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_primary_tooth_ext WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_primary_tooth_ext WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_primary_tooth_ext WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_primary_tooth_ext WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_primary_tooth_ext WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_primary_tooth_ext WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_primary_tooth_ext WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_11_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF(round(temp_actual_recovered_money,0) != round(temp_expec_recovered_money,0)) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_11_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend= null;
			SET t_dos= null;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code =null;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_11_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_11_pl_temp WHERE t_11_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_11_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_11_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_11_pl_temp WHERE t_11_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts3_tc2_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts3_tc2_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts3_tc2_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_primary_tooth_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='primary_tooth';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows < 1)then
		set required_rows = 20;
	end if;
	
	
	 DROP TABLE IF EXISTS t_11_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_11_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) default  NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) default NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_11_pl_temp; 
	
	
	insert into test_cases_2.t_11_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_primary_tooth_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_11_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts3_tc3_checkPlDailyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts3_tc3_checkPlDailyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts3_tc3_checkPlDailyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_daily_table_exists, pl_daily_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_primary_tooth_stats_daily') INTO pl_daily_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_primary_tooth_stats_daily') INTO pl_daily_table_empty;
	
	IF (pl_daily_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_daily_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.results_primary_tooth_ext WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_primary_tooth_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_primary_tooth_ext` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_primary_tooth_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts3_tc6_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts3_tc6_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts3_tc6_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_primary_tooth_ext` WHERE isactive=1;
	SELECT SUM(recovered_money) INTO pld_rec_money FROM emihealth_final.`pl_primary_tooth_stats_daily` WHERE isactive=1;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_primary_tooth_ext` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_primary_tooth_stats_daily` WHERE isactive=1;
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_primary_tooth_ext` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_primary_tooth_stats_daily` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying pl_daily and db_daily table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts4_tc4_checkCountDosPlNDb'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying paid money db_daily  and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts4_tc5_checkTotalCountPlNDb'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts4_tc6_checkTotalProvPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying ryg count in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts4_tc6_checkRygCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying red counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts4_tc5_checkTotalCountPlNDb'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying yellow counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts4_tc5_checkTotalCountPlNDb'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying green counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts4_tc5_checkTotalCountPlNDb'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_11_dashboard_temp]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts4_tc2_dashboardTestTable'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts4_tc1_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts4_tc1_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts4_tc1_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT "";
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_11_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_primary_tooth_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_primary_tooth_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_primary_tooth_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_primary_tooth_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_11_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_11_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos='';
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_11_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_11_dashboard_temp WHERE t_11_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_11_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_11_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_11_dashboard_temp WHERE t_11_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts4_tc2_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts4_tc2_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts4_tc2_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=11;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='primary_tooth';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_11_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_11_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_11_dashboard_temp; 
	
	
	insert into test_cases_2.t_11_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=11) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_11_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts4_tc3_checkDashboardDailyResExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts4_tc3_checkDashboardDailyResExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts4_tc3_checkDashboardDailyResExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_dialy_table_exists BOOL DEFAULT FALSE; 
	DECLARE db_dialy_table_empty INT DEFAULT NULL;
	SELECT t_check_if_table_exists_global_fun('dashboard_daily_results') INTO db_dialy_table_exists;
	
	select count(*) into db_dialy_table_empty from emihealth_final.dashboard_daily_results where type=11;
	
	IF ( db_dialy_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_dialy_table_empty = NULL) THEN
			SET test_detail='No record in table against algo id 11.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table against algo id 11.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_primary_tooth_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=11;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts4_tc6_checkTotalProvPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts4_tc6_checkTotalProvPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts4_tc6_checkTotalProvPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0; -- pl_total_count
	DECLARE db_total_count INT DEFAULT 0; -- db_total_count
	
	-- pl_total_count
	SELECT 	SUM(tab.a)
	into 	pl_total_count
	FROM
		(
			SELECT COUNT(DISTINCT(attend)) AS a
			FROM emihealth_final.pl_primary_tooth_stats_daily
			WHERE isactive = 1
			GROUP BY date_of_service 
	         ) AS tab;
	         
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=11;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total provider count are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more provider counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more provider counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_primary_tooth_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=11;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts4_tc8_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts4_tc8_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts4_tc8_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_primary_tooth_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=11;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts4_tc9_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts4_tc9_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts4_tc9_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_primary_tooth_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=11;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying count of result and monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts5_tc2_checkCountResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying paid money in pl-monthly and result table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts5_tc3_checkPaidMoneyResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying recovered money in and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts5_tc4_checkRecoveredMoneyResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts5_tc5_checkEqualRedsResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying red equality in reuslt and pl monthly'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts5_tc5_checkEqualRedsResNPlMontly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts5_tc6_distinctYearsCountResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying distinct years of result and pl monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts5_tc6_distinctYearsCountResNPlMontly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying table[emihealth_final.pl_prim_tooth_ext_monthly] by generating test table[test_cases_2.t_temp_11_ts5_tc7]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts5_tc7A_testTableGen'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts5_tc1_checkPlMonthlyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts5_tc1_checkPlMonthlyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts5_tc1_checkPlMonthlyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_monthly_table_exists, pl_monthly_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_primary_tooth_stats_monthly') INTO pl_monthly_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_primary_tooth_stats_monthly') INTO pl_monthly_table_empty;
	
	IF (pl_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_monthly_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT default 0;
	DECLARE plm_count INT default 0;
	SELECT COUNT(*) into res_count FROM  emihealth_final.`results_primary_tooth_ext` WHERE isactive=1;
	SELECT SUM(procedure_count) into plm_count from emihealth_final.`pl_primary_tooth_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_primary_tooth_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_primary_tooth_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts5_tc5_checkEqualRedsResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts5_tc5_checkEqualRedsResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts5_tc5_checkEqualRedsResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_primary_tooth_ext WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.pl_primary_tooth_stats_monthly WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts5_tc6_distinctYearsCountResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts5_tc6_distinctYearsCountResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts5_tc6_distinctYearsCountResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.pl_primary_tooth_stats_monthly WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_primary_tooth_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_primToothExt';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_11_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_11_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_11_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_11_ts5_tc7(attend, MONTH,YEAR, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,MONTH,YEAR,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		FROM emihealth_final.`pl_primary_tooth_stats_monthly` WHERE isactive=1 ORDER BY (CONCAT(MONTH,YEAR)) DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_11_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check, temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_11_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.`results_primary_tooth_ext` WHERE isactive=1 AND MONTH(results_primary_tooth_ext.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.`results_primary_tooth_ext` WHERE isactive=1 AND MONTH(results_primary_tooth_ext.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1 AND MONTH(results_primary_tooth_ext.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1 AND MONTH(results_primary_tooth_ext.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1 AND MONTH(results_primary_tooth_ext.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1 AND MONTH(results_primary_tooth_ext.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				SET temp_expec_color_code='green';
			END IF;
	
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) INTO temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_primary_tooth_ext` 
			WHERE isactive=1 AND MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_11_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF(round(temp_actual_recovered_money,0) != round(temp_expec_recovered_money,0)) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_11_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_11_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_11_ts5_tc7 WHERE t_temp_11_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_11_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_11_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_11_ts5_tc7 WHERE t_temp_11_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_TS6_PL_YEARLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_TS6_PL_YEARLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_TS6_PL_YEARLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying result and pl_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts6_tc1_checkCountResNPlYearly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying paid money in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts6_tc2_checkPaidMoneyResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying recovered money in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts6_tc3_checkRecoveredMoneyResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying red counts in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts6_tc4_checkEqualRedsResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts6_tc5_distinctYearsCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying distinct years counts in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts6_tc5_distinctYearsCountResNPlYearly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying table[emihealth_final.pl_primary_tooth_stats_yearly] by generating test table[test_cases_2.t_temp_11_ts6_tc6]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts6_tc6A_testTableGen/t_11_primToothExt_ts6_tc6B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_primary_tooth_ext` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_primary_tooth_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_primary_tooth_ext` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_primary_tooth_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_primary_tooth_ext`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_primary_tooth_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_primary_tooth_ext` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_primary_tooth_stats_yearly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts6_tc5_distinctYearsCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts6_tc5_distinctYearsCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts6_tc5_distinctYearsCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.`results_primary_tooth_ext` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.`pl_primary_tooth_stats_yearly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_primary_tooth_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_primary_tooth_stats_yearly';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_11_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_11_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_11_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_11_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_primary_tooth_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_11_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check , temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_11_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_primary_tooth_ext` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_primary_tooth_ext` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_primary_tooth_ext WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
			
				if(temp_g_check!= 0) THEN	
					set temp_expec_color_code='green';
					
			End IF;			
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_primary_tooth_ext` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_11_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( round(temp_actual_recovered_money,0) != round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_11_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_11_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_11_ts6_tc6 WHERE t_temp_11_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_11_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_11_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_11_ts6_tc6 where t_temp_11_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_TS7_DASHBOARD_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_TS7_DASHBOARD_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_TS7_DASHBOARD_MONTHLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying pl_monthly and db_monthly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts7_tc2_countDistinctYearsPlMNDbM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying paid money db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts7_tc3_checkTotalCountPlMNdbm'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying recovered money in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts7_tc4_checkCountNoOfProvPlMNdbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts7_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying yellow counts in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts7_tc6_checkYellowCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying green counts in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_11_ts7_tc9]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts7_tc9A_testTableGen/t_11_primToothExt_ts7_tc9B_columnValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts7_tc1_checkDashboardMonthlyResExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts7_tc1_checkDashboardMonthlyResExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts7_tc1_checkDashboardMonthlyResExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_monthly_table_exists, db_monthly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_monthly_results') INTO db_monthly_table_exists;
	
	select count(*) into db_monthly_table_empty from emihealth_final.dashboard_monthly_results where type=11;
	
	IF ( db_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_monthly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_monthly_results) against algo id 11.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_monthly_results) against algo id 11.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_primary_tooth_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=11;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_primary_tooth_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=11;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_primary_tooth_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=11;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_primary_tooth_stats_monthly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=11;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_primary_tooth_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=11;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 and type=11;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_primToothExt';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_11_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_11_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_11_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_11_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=11) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_11_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_11_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers FROM emihealth_final.pl_primary_tooth_stats_monthly WHERE MONTH=t_month AND YEAR=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  FROM emihealth_final.pl_primary_tooth_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  FROM emihealth_final.pl_primary_tooth_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_11_ts7_tc9
			WHERE YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_11_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  MONTH=t_month;
			
			
			SET t_month=0;
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_11_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_11_ts7_tc9 WHERE t_temp_11_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_11_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_11_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_11_ts7_tc9 WHERE t_temp_11_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_TS8_DASHBOARD_YEARLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_TS8_DASHBOARD_YEARLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_TS8_DASHBOARD_YEARLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying pl_yearly and db_yearly table distinct years'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts8_tc2_countDistinctYearsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying pl_yearly and db_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts8_tc3_checkTotalCountPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying no. of providers in db_yearly  and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts8_tc4_checkCountNoOfProvPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts8_tc6_checkTotalYellowCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying red counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts8_tc6_checkTotalYellowCountsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying yellow counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts8_tc7_checkGreenCountsPlYNDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying green counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11
			,'Verifying recovered money in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			11,
			'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_11_ts8_tc9]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_11_primToothExt_ts9_tc9A_testTableGen/t_11_primToothExt_ts9_tc9B_columnValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts8_tc1_checkDashboardYearlyResTabExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_yearly_table_exists, db_yearly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_yearly_results') INTO db_yearly_table_exists;
	
	select count(*) into db_yearly_table_empty from emihealth_final.dashboard_yearly_results where type=11;
	
	IF ( db_yearly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_yearly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_yearly_results) against algo id 11.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_yearly_results) against algo id 11.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.pl_primary_tooth_stats_yearly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=11;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.pl_primary_tooth_stats_yearly WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=11;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.pl_primary_tooth_stats_yearly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=11;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_primary_tooth_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=11;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_primary_tooth_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=11;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_primary_tooth_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=11;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_primary_tooth_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=11;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts9_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts9_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts9_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=11;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_primToothExt';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_11_ts9_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_11_ts9_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_11_ts9_tc9; 
	
	
	insert into test_cases_2.t_temp_11_ts9_tc9(year,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=11) ORDER BY(year)desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_11_ts9_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11_primToothExt_ts9_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11_primToothExt_ts9_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11_primToothExt_ts9_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_11_ts9_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_primary_tooth_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_primary_tooth_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
						
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_primary_tooth_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_11_ts9_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_11_ts9_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_11_ts9_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_11_ts9_tc9 WHERE t_temp_11_ts9_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_11_ts9_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_11_ts9_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_11_ts9_tc9 WHERE t_temp_11_ts9_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_11________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_11________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_11________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_MAIN`()
BEGIN
call t_12_thirdmolar_TS1_SOURCE_TABLE();
CALL t_12_thirdmolar_TS2_RESULT_TABLE();
call t_12_thirdmolar_TS3_PL_STATS_DAILY_TABLE();
CAll t_12_thirdmolar_TS4_DASHBOARD_DAILY_TABLE();
CAll t_12_thirdmolar_TS5_PL_MONTHLY_STATS_TABLE();
CAll t_12_thirdmolar_TS6_PL_STATS_YEARLY_TABLE();
CALL t_12_thirdmolar_TS7_DASHBOARD_MONTHLY_RES_TABLE();
CALL t_12_thirdmolar_TS8_DASHBOARD_YEARLY_RESULTS_TABLE();
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_TS1_SOURCE_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdMolar_ts1_tc1_baseSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying base and source table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdMolar_ts1_tc1_baseSrcCount'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdMolar_ts1_tc2_srcResCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying base and Result table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdMolar_ts1_tc2_srcResCount'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdMolar_ts1_tc1_baseSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdMolar_ts1_tc1_baseSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdMolar_ts1_tc1_baseSrcCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	SELECT COUNT(*) INTO src_count FROM emihealth_final.src_ext_3rd_molar;
	SELECT COUNT(*) INTO base_count FROM emihealth_final.procedure_performed WHERE proc_code IN('D7220','D7230')  AND is_invalid=0;
	
	IF(src_count=base_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in base and source table for (D7220,D7230).';
	ELSE
		SET test_status=FALSE;
		IF(src_count>base_count)THEN
			SET test_detail=CONCAT(src_count-base_count,' more counts  found in source table then base table for (D7220,D7230).');
		ELSE
			SET test_detail=CONCAT(base_count-src_count,' more counts found in base table then source table for (D7220,D7230).');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts1_tc2_srcResCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts1_tc2_srcResCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts1_tc2_srcResCount`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE res_count INT;
	SELECT COUNT(*) INTO src_count FROM emihealth_final.`src_ext_3rd_molar` ;
	SELECT COUNT(*) INTO res_count FROM emihealth_final.`results_third_molar` WHERE isactive=1;
	 
	IF(src_count=res_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and source table for (D7220,D7230).';
	ELSE
		SET test_status=FALSE;
		IF(src_count>res_count)THEN
			SET test_detail=CONCAT(src_count-res_count,' more counts  found in source table then base table for (D7220,D7230).');
		ELSE
			SET test_detail=CONCAT(res_count-src_count,' more counts found in result table then source table for (D7220,D7230).');
		END IF;
	END IF;
	
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_TS2_RESULT_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts2_tc3A_testTableGen`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts2_tc3B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12,'Verifying Columns for result table[emihealth_final.results_third_molar] by generating test table[test_cases_2.t_temp_thirdmolar_ts1_tc5]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts2_tc3A_testTableGen/t_12_thirdmolar_ts2_tc3B_resReasonsValidation'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts2_tc3A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts2_tc3A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts2_tc3A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE reason_percent DECIMAL(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        DECLARE selected_reason INT;
        DECLARE iterator INT;
        
        DROP TABLE IF EXISTS t_temp_thirdmolar_ts1_tc5;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_thirdmolar_ts1_tc5` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `tooth_no` VARCHAR(15) DEFAULT NULL,
	  `attend` VARCHAR(20) DEFAULT NULL,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` DATETIME DEFAULT NULL,
	  `reason_level` INT(2) DEFAULT NULL,
	  `test_reason_level` INT(2) DEFAULT NULL,
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_thirdmolar_ts1_tc5;
        
        
        -- set reason_percent =2;
        SET iterator = 1;
        
        
        WHILE(iterator < 3) DO
		SET selected_reason= iterator;
		
		SELECT reason_weight 
		INTO reason_percent 
		FROM test_cases_2.t_global_reasons_ratio 
		WHERE algo_id=12 AND reason_level=selected_reason;
		
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) 
		INTO reason_total_count 
		FROM emihealth_final.`results_third_molar` 
		WHERE reason_level=selected_reason;
		
		
		/*
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		*/
		
		SET reason_sample_count=(reason_total_count*reason_percent)/100;
		IF(reason_sample_count < 1)THEN
			SET reason_sample_count =50;
		END IF;
		
		INSERT INTO test_cases_2.t_temp_thirdmolar_ts1_tc5(tooth_no,attend,MID,date_of_service,reason_level)
		SELECT tooth_no,attend,MID,date_of_service,reason_level
		FROM emihealth_final.results_third_molar 
		WHERE reason_level=selected_reason AND isactive=1 
		ORDER BY RAND() 
		LIMIT reason_sample_count;
		
		
		
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_thirdmolar_ts1_tc5;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts2_tc3B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts2_tc3B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts2_tc3B_resReasonsValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  DECLARE t_id BIGINT(20); 
  DECLARE t_dos_d72 DATETIME DEFAULT "";
  DECLARE t_attend, t_mid VARCHAR (50) DEFAULT "" ;
  DECLARE t_tooth_no VARCHAR(15) DEFAULT "" ;
  
  DECLARE p_d72  VARCHAR(50) DEFAULT NULL ;
  DECLARE dos_d72 DATETIME DEFAULT "";
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id, attend, MID, date_of_service,tooth_no FROM test_cases_2.t_temp_thirdmolar_ts1_tc5 ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id, t_attend, t_mid, t_dos_d72,t_tooth_no;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    
		  --  SELECT tooth_no INTO t_tooth_no FROM argus.src_ext_3rd_molar   WHERE mid=t_mid and date_of_service = t_dos_d72 limit 1 ;-- (As one patient can have multiple codes on differnet tooth number )
		    IF (TRIM(t_tooth_no) IN ('01','1','16','17','32','51','66','67','82')) THEN	
				UPDATE test_cases_2.t_temp_thirdmolar_ts1_tc5 SET test_reason_level=1, test_detail='IN 1' WHERE id=t_id;
		    ELSE
				UPDATE test_cases_2.t_temp_thirdmolar_ts1_tc5 SET test_reason_level=2, test_detail='IN 2' WHERE id=t_id;
		    END IF;
		    -- UPDATE test_cases_2.t_temp_thirdmolar_ts1_tc5 SET test_reason_level=1;	
	         END LOOP ;
				                  
  CLOSE my_cursor ;
  
  
  -- setting up records counts
  SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_thirdmolar_ts1_tc5;
  SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_thirdmolar_ts1_tc5 WHERE  reason_level != test_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_thirdmolar_ts1_tc5 WHERE test_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_thirdmolar_ts1_tc5 WHERE reason_level != test_reason_level;
	IF(temp_count=0) THEN
		SET test_status=TRUE;
		SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
	ELSE
		SET test_status=FALSE;
		SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
	END IF;
  END IF;
  
  
  END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_TS3_PL_STATS_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_TS3_PL_STATS_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_TS3_PL_STATS_DAILY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts3_tc3_checkPlDailyTableExistsNpop`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying pl_daily Existence and data population'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
			,'t_12_thirdmolar_ts3_tc3_checkPlDailyTableExistsNpop'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying PL_table Daily Count',tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts3_tc4_resPlDailyCount'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying Paid Money',tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts3_tc5_resPlDailyEqualPaidMoney'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying red counts in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts3_tc7_resPlDailyEqualReds'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts3_tc8_resPlDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying result and pl table year count'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts3_tc8_resPlDailyDistinctYearsCount'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying table[emihealth_final.pl_third_molar_stats_daily] by generating test table[test_cases_2.t_12_pl_temp].'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts3_tc2_plTestTable'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts3_tc1_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts3_tc1_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts3_tc1_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT "";
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT '';
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_12_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_third_molar WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_third_molar WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_third_molar WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_third_molar WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_third_molar WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_third_molar WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_third_molar WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_12_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_12_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend='';
			SET t_dos= '';
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code ='';
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_12_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_12_pl_temp WHERE t_12_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_12_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_12_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_12_pl_temp WHERE t_12_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts3_tc2_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts3_tc2_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts3_tc2_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_third_molar_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='third_molar';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows < 1)then
		 set required_rows = 1;
	end if;
	
	
	 DROP TABLE IF EXISTS t_12_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_12_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2)  default NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) default NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_12_pl_temp; 
	
	
	insert into test_cases_2.t_12_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_third_molar_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_12_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts3_tc3_checkPlDailyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts3_tc3_checkPlDailyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts3_tc3_checkPlDailyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_daily_table_exists, pl_daily_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_third_molar_stats_daily') INTO pl_daily_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_third_molar_stats_daily') INTO pl_daily_table_empty;
	
	IF (pl_daily_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_daily_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_third_molar` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_third_molar_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_third_molar` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_third_molar_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_third_molar` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_third_molar_stats_daily` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_third_molar` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_third_molar_stats_daily` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
   
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	/*
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts4_tc3_checkDashboardDailyResExistsNpop`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(12,'Verifying pl_daily and db_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report');
	*/
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying pl_daily and db_daily dos counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts4_tc4_checkCountDosPlNDb'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying RYG counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts4_tc6_checkRygCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying red counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts4_tc7_checkRedCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts4_tc8_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying yellow counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts4_tc8_checkYellowCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts4_tc9_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying green counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts4_tc9_checkGreenCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_12_dashboard_temp]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts4_tc2_dashboardTestTable/t_12_thirdmolar_ts4_tc1_dashboardDailyValidation'
		);
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts4_tc1_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts4_tc1_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts4_tc1_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT "";
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_12_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_third_molar_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_third_molar_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_third_molar_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_third_molar_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_12_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_12_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos='';
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_12_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_12_dashboard_temp WHERE t_12_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_12_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_12_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_12_dashboard_temp WHERE t_12_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts4_tc2_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts4_tc2_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts4_tc2_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=12;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='third_molar';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_12_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_12_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_12_dashboard_temp; 
	
	
	insert into test_cases_2.t_12_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=12) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_12_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts4_tc3_checkDashboardDailyResExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts4_tc3_checkDashboardDailyResExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts4_tc3_checkDashboardDailyResExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_dialy_table_exists BOOL DEFAULT FALSE; 
	DECLARE db_dialy_table_empty INT DEFAULT NULL;
	SELECT t_check_if_table_exists_global_fun('dashboard_daily_results') INTO db_dialy_table_exists;
	
	SELECT COUNT(*) INTO db_dialy_table_empty FROM emihealth_final.dashboard_daily_results WHERE TYPE=12;
	
	IF ( db_dialy_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_dialy_table_empty = NULL) THEN
			SET test_detail='No record in table against algo id 12.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table against algo id 12.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts4_tc4_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts4_tc4_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts4_tc4_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.pl_third_molar_stats_daily WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=12	;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_third_molar_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=12;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_third_molar_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=12;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_third_molar_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=12;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts4_tc8_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts4_tc8_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts4_tc8_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_third_molar_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=12;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts4_tc9_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts4_tc9_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts4_tc9_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_third_molar_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=12;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying result and pl_monthly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts5_tc2_checkCountResNPlMonthly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying paid money in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts5_tc3_checkPaidMoneyResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying recovered money in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts5_tc4_checkRecoveredMoneyResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts5_tc5_checkEqualRedsResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying red counts in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts5_tc5_checkEqualRedsResNPlMontly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts5_tc6_distinctYearsCountResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying distinct years counts in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts5_tc6_distinctYearsCountResNPlMontly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying table[emihealth_final.pl_third_molar_stats_monthly] by generating test table[test_cases_2.t_temp_12_ts5_tc7]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts5_tc7A_testTableGen/t_12_thirdmolar_ts5_tc7B_columnValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts5_tc1_checkPlMonthlyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts5_tc1_checkPlMonthlyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts5_tc1_checkPlMonthlyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_monthly_table_exists, pl_monthly_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_third_molar_stats_monthly') INTO pl_monthly_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_third_molar_stats_monthly') INTO pl_monthly_table_empty;
	
	IF (pl_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_monthly_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_third_molar` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO plm_count FROM emihealth_final.`pl_third_molar_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_third_molar WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_third_molar_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_third_molar WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_third_molar_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts5_tc5_checkEqualRedsResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts5_tc5_checkEqualRedsResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts5_tc5_checkEqualRedsResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_third_molar WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.`pl_third_molar_stats_monthly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts5_tc6_distinctYearsCountResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts5_tc6_distinctYearsCountResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts5_tc6_distinctYearsCountResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_third_molar WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.`pl_third_molar_stats_monthly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_third_molar_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_third_molar';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_12_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_12_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_12_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_12_ts5_tc7(attend, MONTH,YEAR, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,MONTH,YEAR,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		FROM emihealth_final.`pl_third_molar_stats_monthly` WHERE isactive=1 ORDER BY (CONCAT(MONTH,YEAR)) DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_12_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check, temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_12_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.`results_third_molar` WHERE isactive=1 AND MONTH(results_third_molar.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.`results_third_molar` WHERE isactive=1 AND MONTH(results_third_molar.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_third_molar WHERE isactive=1 AND MONTH(results_third_molar.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_third_molar WHERE isactive=1 AND MONTH(results_third_molar.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_third_molar WHERE isactive=1 AND MONTH(results_third_molar.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_third_molar WHERE isactive=1 AND MONTH(results_third_molar.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				SET temp_expec_color_code='green';
			END IF;
	
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) INTO temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_third_molar` 
			WHERE isactive=1 AND MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_12_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF(round(temp_actual_recovered_money,0) != round(temp_expec_recovered_money,0)) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_12_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_12_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_12_ts5_tc7 WHERE t_temp_12_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_12_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_12_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_12_ts5_tc7 WHERE t_temp_12_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_TS6_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_TS6_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_TS6_PL_STATS_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying result and pl_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts6_tc1_checkCountResNPlYearly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying paid money in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts6_tc2_checkPaidMoneyResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying recovered money in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts6_tc3_checkRecoveredMoneyResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying red counts in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts6_tc4_checkEqualRedsResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts6_tc5_distinctYearsCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying distinct years counts in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts6_tc5_distinctYearsCountResNPlYearly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12,'Verifying table[emihealth_final.pl_third_molar_stats_yearly] by generating test table[test_cases_2.t_temp_12_ts6_tc6]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
			,'t_12_thirdmolar_ts6_tc6A_testTableGen/t_12_thirdmolar_ts6_tc6B_columnValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_third_molar` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_third_molar_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_third_molar` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_third_molar_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_third_molar`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_third_molar_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_third_molar` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_third_molar_stats_yearly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts6_tc5_distinctYearsCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts6_tc5_distinctYearsCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts6_tc5_distinctYearsCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.`results_third_molar` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.`pl_third_molar_stats_yearly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_third_molar_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_third_molar';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_12_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_12_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_12_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_12_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_third_molar_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_12_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check , temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_12_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_third_molar` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_third_molar` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_third_molar WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_third_molar WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_third_molar WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_third_molar WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
			
				if(temp_g_check!= 0) THEN	
					set temp_expec_color_code='green';
					
			End IF;			
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_third_molar` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_12_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF(round(temp_actual_recovered_money,0) != round(temp_expec_recovered_money,0)) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_12_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_12_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_12_ts6_tc6 WHERE t_temp_12_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_12_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_12_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_12_ts6_tc6 where t_temp_12_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_TS7_DASHBOARD_MONTHLY_RES_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_TS7_DASHBOARD_MONTHLY_RES_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_TS7_DASHBOARD_MONTHLY_RES_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying pl_monthly and db_monthly distinct years counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts7_tc2_countDistinctYearsPlMNDbM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying total count db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts7_tc3_checkTotalCountPlMNdbm'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying number of providers in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts7_tc4_checkCountNoOfProvPlMNdbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts7_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying yellow counts in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts7_tc6_checkYellowCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts7_tc7_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying green counts in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts7_tc7_checkGreenCountsPlMNDbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying total paid money in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_temp_12_ts7_tc9]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts7_tc9A_testTableGen'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts7_tc1_checkDashboardMonthlyResExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts7_tc1_checkDashboardMonthlyResExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts7_tc1_checkDashboardMonthlyResExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_monthly_table_exists, db_monthly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_monthly_results') INTO db_monthly_table_exists;
	
	select count(*) into db_monthly_table_empty from emihealth_final.dashboard_monthly_results where type=12;
	
	IF ( db_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_monthly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_monthly_results) against algo id 12.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_monthly_results) against algo id 12.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_third_molar_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=12;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_third_molar_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=12;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_third_molar_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=12;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_third_molar_stats_monthly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=12;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts7_tc7_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts7_tc7_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts7_tc7_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_third_molar_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=12;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_third_molar_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=12;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 and type=12;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_third_molar';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_12_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_12_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_12_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_12_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=12) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_12_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_12_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.`pl_third_molar_stats_monthly` WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.`pl_third_molar_stats_monthly` WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.`pl_third_molar_stats_monthly` WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_12_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_12_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_12_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_12_ts7_tc9 WHERE t_temp_12_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_12_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_12_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_12_ts7_tc9 WHERE t_temp_12_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_TS8_DASHBOARD_YEARLY_RESULTS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_TS8_DASHBOARD_YEARLY_RESULTS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_TS8_DASHBOARD_YEARLY_RESULTS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying pl_monthly and db_monthly distinct years'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts8_tc2_countDistinctYearsPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying total count db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts8_tc3_checkTotalCountPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying counting no. of providers in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts8_tc4_checkCountNoOfProvPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying red counts in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts8_tc5_checkTotalRedCountsPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12,'Verifying green counts in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts8_tc7_checkGreenCountsPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12
			,'Verifying total paid money in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY'
		);
			
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			12,
			'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_temp_12_ts7_tc9]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_12_thirdmolar_ts9_tc9A_testTableGen/t_12_thirdmolar_ts9_tc9B_columnValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts8_tc1_checkDashboardYearlyResTabExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_yearly_table_exists, db_yearly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_yearly_results') INTO db_yearly_table_exists;
	
	select count(*) into db_yearly_table_empty from emihealth_final.dashboard_yearly_results where type=12;
	
	IF ( db_yearly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_yearly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_yearly_results) against algo id 12.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_yearly_results) against algo id 12.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.pl_third_molar_stats_yearly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=12;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.pl_third_molar_stats_yearly WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=12;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.pl_third_molar_stats_yearly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=12;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_third_molar_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=12;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_third_molar_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=12;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_third_molar_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=12;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_third_molar_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=12;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts9_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts9_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts9_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=12;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_third_molar';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_12_ts9_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_12_ts9_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_12_ts9_tc9; 
	
	
	insert into test_cases_2.t_temp_12_ts9_tc9(year,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=12) ORDER BY(year)desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_12_ts9_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12_thirdmolar_ts9_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12_thirdmolar_ts9_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12_thirdmolar_ts9_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_12_ts9_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_third_molar_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_third_molar_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
						
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.`pl_third_molar_stats_yearly` WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_12_ts9_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_12_ts9_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_12_ts9_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_12_ts9_tc9 WHERE t_temp_12_ts9_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_12_ts9_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_12_ts9_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_12_ts9_tc9 WHERE t_temp_12_ts9_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_12________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_12________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_12________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_MAIN`()
BEGIN
	call `t_13_simpleProphy4a_TS1_SOURCE_TABLE`();
	
	call `t_13_simpleProphy4a_TS2_RESULT_TABLE`();
	
	call `t_13_simpleProphy4a_TS3_PL_DAILY_STATS_TABLE`();
	call `t_13_simpleProphy4a_TS4_DASHBOARD_DAILY_TABLE`();
	
	CALL `t_13_simpleProphy4a_TS5_PL_MONTHLY_STATS_TABLE`();
	CALL `t_13_simpleProphy4a_TS7_DASHBOARD_MONTHLY_TABLE`();
	
	call `t_13_simpleProphy4a_TS6_PL_STATS_YEARLY_TABLE`();
	call `t_13_simpleProphy4a_TS8_DASHBOARD_YEARLY_TABLE`();
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS1_SOURCE_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts1_tc1_baseSrcCntEqual`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying base and source table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts1_tc1_baseSrcCntEqual'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts1_tc2_impColValuesSrcNotNull`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying important column values in source table are not null'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts1_tc2_impColValuesSrcNotNull'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts1_tc3_srcHasRequiredProcCodesOnly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying source table contains only required procedure codes'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts1_tc3_srcHasRequiredProcCodesOnly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts1_tc4_srcHasUniqeAttendID`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying source table contains  Unique Attend ID'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts1_tc4_srcHasUniqeAttendID'
		);
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts1_tc1_baseSrcCntEqual` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts1_tc1_baseSrcCntEqual` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts1_tc1_baseSrcCntEqual`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	SELECT COUNT(*)into src_count FROM emihealth_final.src_perio_scaling_4a;
	
	SELECT COUNT(*) into base_count FROM emihealth_final.procedure_performed AS base 
        WHERE (base.`proc_code` IN ('D4342','D4341','D0180','D4320','D4321','D4381','D4355','D0210')OR base.`proc_code` LIKE'D42%') AND base.`is_invalid`=0;
	
	if(src_count=base_count) then
		set test_status=true;
		set test_detail='Equal counts found in base and source table.';
	else
		set test_status=False;
		if(src_count>base_count)then
			set test_detail=concat(src_count-base_count,' more counts  found in source table then base table.');
		else
			set test_detail=concat(base_count-src_count,' more counts found in result table then base table.');
		end if;
	end if;
	set success=true;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts1_tc2_impColValuesSrcNotNull` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts1_tc2_impColValuesSrcNotNull` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts1_tc2_impColValuesSrcNotNull`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a,count_b INT DEFAULT 0;
	DECLARE total_count INT;
	SELECT COUNT(*) INTO count_a FROM emihealth_final.src_perio_scaling_4a AS src
	WHERE (src.`attend`='' OR src.`date_of_service`='' OR src.`claim_id`='' OR src.`proc_code`='' OR src.`pid`='');
	
	SET total_count = count_a + count_b;
	
	IF(total_count=0) THEN
		SET test_status=TRUE;
		SET test_detail='No record found in result table having null value in important attributes.';
	ELSE
		SET test_status=FALSE;
	        SET test_detail=CONCAT(total_count,' records found in result table having null value in important attributes.');	
	END IF;
	SET success=TRUE;
  END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts1_tc3_srcHasRequiredProcCodesOnly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts1_tc3_srcHasRequiredProcCodesOnly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts1_tc3_srcHasRequiredProcCodesOnly`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE _count INT;
	SELECT COUNT(*) into _count FROM emihealth_final.src_perio_scaling_4a AS src 
	WHERE src.`proc_code` NOT IN ('D4342','D4341','D0180','D4320','D4321','D4381','D4355','D0210')
		AND src.`proc_code` NOT LIKE 'D42%';
	IF (_count=0) THEN
		SET test_status = TRUE;
		SET test_detail='Source table contains only required procedures data.';
	ELSE
		SET test_status = FALSE;
		SET test_detail=CONCAT(_count,' records found with extra procedure codes in source table.');
	END IF;
	SET success=TRUE;
end */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts1_tc4_srcHasUniqeAttendID` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts1_tc4_srcHasUniqeAttendID` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts1_tc4_srcHasUniqeAttendID`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a INT;
	DECLARE count_b INT;
	SELECT COUNT(DISTINCT(attend)) into count_a FROM emihealth_final.src_perio_scaling_4a;
        SELECT COUNT(DISTINCT(CONCAT(attend,attend_name))) into count_b FROM emihealth_final.src_perio_scaling_4a;
	
	IF(count_a=count_b) THEN
		SET test_status=TRUE;
		SET test_detail='Attend ID is unique in source table.';
	ELSE
		SET test_status=FALSE;
		SET test_detail='Attend Id is not unique in source table.';	
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts2_tc1_srcResCntEqual`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying results and source counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts2_tc1_srcResCntEqual'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts2_tc2_impColValuesResNotNull`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying important columns are not null in result table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts2_tc2_impColValuesResNotNull'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts2_tc3_resHasD4341D4342Only`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying base and source counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts2_tc3_resHasD4341D4342Only'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts2_tc4_checkSpecialty`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying attend has same specialty'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts2_tc4_checkSpecialty'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts2_tc5A_testTableGen`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_ts2_tc5B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying Columns for result table[emihealth_final.results_perio_scaling_4a] by generating test table[test_cases_2.t_temp_13_simpleProphy4a_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts2_tc5A_testTableGen/t_13_simpleProphy4a_ts2_tc5B_resReasonsValidation'
		);
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts2_tc1_srcResCntEqual` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts2_tc1_srcResCntEqual` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts2_tc1_srcResCntEqual`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE res_count INT;
	SELECT COUNT(*)into src_count FROM emihealth_final.src_perio_scaling_4a where proc_code in('D4341','D4342');
	
	SELECT COUNT(*) into res_count FROM emihealth_final.results_perio_scaling_4a where isactive=1;
	-- set src_count=4; -- for testing
	if(src_count=res_count) then
		set test_status=true;
		set test_detail='Equal counts found in result and source table.';
	else
		set test_status=False;
		if(src_count>res_count)then
			set test_detail=concat(src_count-res_count,' more counts  found in source table then result table.');
		else
			set test_detail=concat(res_count-src_count,' more counts found in result table then source table.');
		end if;
	end if;
	set success=true;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts2_tc2_impColValuesResNotNull` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts2_tc2_impColValuesResNotNull` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts2_tc2_impColValuesResNotNull`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a,count_b INT DEFAULT 0;
	DECLARE total_count INT;
	SELECT COUNT(*) INTO count_a FROM emihealth_final.src_perio_scaling_4a AS src
	WHERE (src.`attend`='' OR src.`date_of_service`='' OR src.`claim_id`='' OR src.`proc_code`='' OR src.`pid`='');
	
	-- set count_a=4; -- for testing
	SET total_count = count_a + count_b;
	
	IF(total_count=0) THEN
		SET test_status=TRUE;
		SET test_detail='No record found in result table having null value in important attributes.';
	ELSE
		SET test_status=FALSE;
	        SET test_detail=CONCAT(total_count,' records found in result table having null value in important attributes.');	
	END IF;
	SET success=TRUE;
  END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts2_tc3_resHasD4341D4342Only` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts2_tc3_resHasD4341D4342Only` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts2_tc3_resHasD4341D4342Only`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE _count INT;
	SELECT COUNT(*) into _count FROM emihealth_final.src_perio_scaling_4a AS src 
	WHERE src.`proc_code` NOT IN ('D4342','D4341','D0180','D4320','D4321','D4381','D4355','D0210')
		AND src.`proc_code` NOT LIKE 'D42%';
	IF (_count=0) THEN
		SET test_status = TRUE;
		SET test_detail='Source table contains only required procedures data.';
	ELSE
		SET test_status = FALSE;
		SET test_detail=CONCAT(_count,' records found with extra procedure codes in source table.');
	END IF;
	SET success=TRUE;
end */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts2_tc4_checkSpecialty` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts2_tc4_checkSpecialty` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts2_tc4_checkSpecialty`(OUT success int ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  -- Declarations For Holding Cursor Data
  declare cur_attend varchar(20) default '';
  DECLARE cur_specialty VARCHAR(15) default '';
  
  -- Declarations For Holding Processing Data
  DECLARE res_attend VARCHAR(20) DEFAULT '';
  DECLARE res_specialty VARCHAR(15) DEFAULT '';
  Declare count_ integer default 0;
  declare count_total_records_tested int default 0;
  DECLARE count_fault_records_tested INT DEFAULT 0;
  
  -- Declarations For Cursor
  DECLARE finished INTEGER DEFAULT 0;
  DECLARE my_cursor CURSOR FOR 
		    SELECT DISTINCT(attend),specialty 
		    FROM emihealth_final.src_perio_scaling_4a 
                    WHERE proc_code IN ('D4341','D4342') AND (specialty IS NOT NULL  OR specialty !='') LIMIT 20;	    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  
  -- Start Processing
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  cur_attend,cur_specialty;
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ; 
		    
		    select specialty into res_specialty
		    FROM emihealth_final.results_perio_scaling_4a where attend=cur_attend and (specialty !='' or specialty is not null) limit 1;
		    
		    if(res_specialty != cur_specialty) then
			set count_fault_records_tested=count_fault_records_tested +1;
		    end if;
		    set count_total_records_tested=count_total_records_tested +1;
		    
	        END LOOP ;
  CLOSE my_cursor ;
  
  
  -- set count_fault_records_tested=2; -- for testing
  -- setting up output variables
  IF(count_fault_records_tested=0)THEn
	SET test_status = true;
	set test_detail=concat(count_total_records_tested,' records are tested. All contain same specialty in source and result table.');
  else
	SET test_status = False;
	SET test_detail=CONCAT(count_total_records_tested,' records are tested.',count_fault_records_tested,' contain different specialty in source and result table.');
  END IF;
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts2_tc5A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts2_tc5A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts2_tc5A_testTableGen`(out success Bool)
BEGIN
	declare reason_percent decimal(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        drop table if exists t_temp_13_simpleProphy4a_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_13_simpleProphy4a_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(10) ZEROFILL NOT NULL,
	  `proc_code` VARCHAR(50) DEFAULT NULL,
	  `attend` varchar(20) Default Null,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` datetime default Null,
	  
	  
	  `actual_reason_level` int(2) default Null,
	  `expected_reason_level` INT(2) DEFAULT NULL,
	  
	  `actual_ryg_status` VARCHAR(30) DEFAULT NULL,
	  `expected_ryg_status` VARCHAR(30) DEFAULT NULL,
	  `actual_status` VARCHAR(250) DEFAULT NULL,
	  `expected_status` VARCHAR(250) DEFAULT NULL,
	  
	  `test_status` bool Default Null,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_13_simpleProphy4a_test_table;
        
        set iterator = 1;
        while(iterator < 11) Do
		SET selected_reason= iterator;
		select reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  where algo_id=13 and reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) into reason_total_count FROM emihealth_final.`results_perio_scaling_4a` where reason_level=selected_reason;
		
		IF(reason_total_count < 100) then
			set reason_sample_count=reason_total_count;
		else
			set reason_sample_count=(reason_total_count*reason_percent)/100;
		end if;
		
		insert into test_cases_2.t_temp_13_simpleProphy4a_test_table 
			(res_id,proc_code,attend,mid,date_of_service,actual_reason_level,actual_ryg_status,actual_status) 
		select  id,proc_code,attend,mid,date_of_service,reason_level,ryg_status,status
		FROM emihealth_final.results_perio_scaling_4a 
		where reason_level=selected_reason and isactive=1 ORDER BY RAND() limit reason_sample_count;
		
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_13_simpleProphy4a_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts2_tc5B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts2_tc5B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts2_tc5B_resReasonsValidation`(OUT success int ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0;
  -- ---------------------------------------------------------------------------
  -- Variables below are used for storting data from test Table
  DECLARE t_id BIGINT(20) default 0;
  declare t_attend varchar(20) default null;
  DECLARE t_mid VARCHAR(50) default Null;
  DECLARE t_dos DateTime default Null;
  DECLARE t_proc_code VARCHAR(50) default null;
  
  -- ------------------------------------------------------------------------------
  -- Variables below are used in if else blocks
  declare has_D0180 INTEGER DEFAULT 0;
  DECLARE dos_recent_D0180 DATETIME DEFAULT NULL; 
							-- used in block where D0180 donot exists  
  declare has_D0180_anotherDoc,is_dos_D4342_D4341_after_D0180, check_for_D42xx_others, is_dos_D4341_43_before_D42xx_Others integer default 0; -- used in block where D0180 donot exists  
  DECLARE dos_D0180_anotherDoc DATETIME DEFAULT NULL; 
							-- used in block where D0180 exists
  DECLARE has_D0210_within_2years  INTEGER DEFAULT 0; 
  DECLARE dos_recent_D0210 DATETIME DEFAULT NULL;
   
  -- ----------------------------------------------------------------------------
  -- Variables below are used after loop to hold stats of tested records
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  DECLARE test_row_cursor CURSOR FOR 
		    SELECT id,proc_code ,attend,mid,date_of_service FROM test_cases_2.t_temp_13_simpleProphy4a_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN test_row_cursor ;
  get_test_row :LOOP
		    set t_id=0;  set t_proc_code='';  set t_attend='';  set t_mid=''; -- set t_dos=null;
		    set check_for_D42xx_others=0;
		    
		    FETCH test_row_cursor INTO  t_id,t_proc_code, t_attend, t_mid,t_dos;
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    
		    -- SET t_attend='';
		    -- ----------------------------------------------------------Outer if starts----------------------------------------------------------------
		    if ((t_dos != '') and (t_dos IS not NULL) and (t_attend !='') and (t_mid !='') and (t_proc_code !='') and (t_attend is not null) and (t_mid is not null) and (t_proc_code is not null)) then
			-- checking D0180 Exists or not
			select count(*), max(date_of_service) into has_D0180,dos_recent_D0180 
			FROM emihealth_final.src_perio_scaling_4a 
			where proc_code='D0180' and attend=t_attend and pid=t_mid and date_of_service <= t_dos ;
			 
			if(has_D0180 = 0) then
			-- =====================================================N0 D0180========================================================================
				-- checking D0180 with another doctor
				select count(*) ,max(date_of_service) into has_D0180_anotherDoc, dos_D0180_anotherDoc
				FROM emihealth_final.src_perio_scaling_4a
				where proc_code='D0180' and attend != t_attend and pid=t_mid AND t_dos>date_of_service;
				-- ------------------------------------------IF A Starts-----------------------------------------------------
				if(has_D0180_anotherDoc=0) then
					-- >> REASON 1
					UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
					set expected_reason_level=1,
					    expected_ryg_status='red',
					    expected_status='Disallow Codes D4342 , D4341',
					    test_detail='No D0180 with other attend.'
					where id=t_id;
				else
				        -- --------------------------------IF B Starts------------------------------------------------
					-- checking dos of D4342,D4341 is less then D0180
					if(t_dos>dos_D0180_anotherDoc)then
					        -- -----------------------IF C Starts -------------------------------------
						-- checking dos of D4342,D4341 is within one year after D0180
						if(t_dos between (dos_D0180_anotherDoc) and (date_add(dos_D0180_anotherDoc,interval 1 year)) ) then
							-- Checking for D42xx, D4320, D4321, D4355, D4381
							select count(*)into check_for_D42xx_others 
							FROM emihealth_final.src_perio_scaling_4a
							where (proc_code like 'D42%' or proc_code in('D4320','D4321','D4355','D4381')) AND pid=t_mid
							and date_of_service <= t_dos;
							-- ---------------------- IF D Starts ---------------------
							if(check_for_D42xx_others=0) then
								-- >> REASON 3
								UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
								SET expected_reason_level=3,
								    expected_ryg_status='green',
					                            expected_status='Allow Codes D4342 , D4341',
					                            test_detail='Code found in D42xx, D4320, D4321, D4355, D4381.'
								 WHERE id=t_id;
							else
							     -- Does DOS D4341, D4342 occur before DOS D42xx, D4320, D4321, D4355, D4381 ?
							     select count(*)into is_dos_D4341_43_before_D42xx_Others
							     from  emihealth_final.src_perio_scaling_4a
							     where proc_code != t_proc_code and (proc_code in('D4320','D4321','D4355','D4381') or proc_code like 'D42%') 
								   and pid=t_mid 
								   AND (date_of_service BETWEEN (DATE_SUB(t_dos,INTERVAL 1 YEAR)) AND t_dos);
							     -- ------------- IF E Starts ---------------   
							     if(is_dos_D4341_43_before_D42xx_Others=0) then
							       -- >> Reason 4
							        UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
								SET expected_reason_level=4,
								    expected_ryg_status='red',
					                            expected_status='Disallow Codes D4342 , D4341',
					                            test_detail='No DOS for D4341, D4342 occur before DOS D42xx, D4320, D4321, D4355, D4381.'
						                WHERE id=t_id;
						              else
								-- >> Reason 5
								  UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
								  SET expected_reason_level=5,
								      expected_ryg_status='green',
					                              expected_status='Allow Codes D4342 , D4341',
					                              test_detail='DOS for D4341, D4342 occur before DOS D42xx, D4320, D4321, D4355, D4381.'
						                WHERE id=t_id; 
							     end if;
							     -- ------------- IF E Starts ---------------  
							end if;
							-- ---------------------- IF D Ends ---------------------
						else
							-- >> REASON 2
							UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
							SET expected_reason_level=2,
							    expected_ryg_status='red',
					                    expected_status='Disallow Codes D4342 , D4341',
					                    test_detail=concat('DOS D4342, D4341 does not occurs within 1 year after DOS D0180 with the other doctor.')
						         WHERE id=t_id;	
						end if;
						-- -----------------------IF C Ends -------------------------------------
					else
						-- >> REASON 1
						UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
						SET expected_reason_level=1,
						    expected_ryg_status='red',
					            expected_status='Disallow Codes D4342 , D4341',
					            test_detail='Has D0180 with other attend but DOS D4342, D4341 does not occurs after DOS D0180.'
						WHERE id=t_id;
					end if;
					-- ------------------------------------IF B Ends -------------------------------------------
				end if;	
			-- ------------------------------------------------------IF A Ends-------------------------------------------------------------
			-- ======================================================================================================================================
			else
		        -- ===================================================Yes D0180==========================================================================
		                -- Checking DOS for D0210 exists or not
				select max(date_of_service) into dos_recent_D0210
				FROM emihealth_final.src_perio_scaling_4a
				-- where pid=t_mid and proc_code='D0210' and date_of_service <=t_dos;
				where pid=t_mid and proc_code='D0210' and date_of_service <= dos_recent_D0180;
				
				-- -------------------------------------------------------- IF "F" Starts -----------------------------------------------------------
				if(dos_recent_D0210 is null or dos_recent_D0210='')then
					-- >> REASON 6
					UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
					SET expected_reason_level=6,
				            expected_ryg_status='red',
					    expected_status='Disallow Codes D4342 , D4341',
					    test_detail='Has Null DOS for procedure code (D0210).'
					WHERE id=t_id;
				else
					-- ----------------------------------------------- IF "G" Starts ---------------------------------------------------
					-- Checking if Full Mouth Xray D0210 is within 2 years of the date of the most current D0180 
					if ( Not(dos_recent_D0210 BETWEEN (DATE_sub(dos_recent_D0180,INTERVAL 2 YEAR)) AND (dos_recent_D0180) ) )then
					-- if ( Not(dos_recent_D0210 BETWEEN (dos_recent_D0180) AND (DATE_ADD(dos_recent_D0180,INTERVAL 2 YEAR)) ))then
						-- >> REASON 6
						UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
						SET expected_reason_level=6,
				                    expected_ryg_status='red',
					            expected_status='Disallow Codes D4342 , D4341',
					            test_detail= concat('DOS of D0210 [',dos_recent_D0210,'] is not within 2 years of the DOS of the most recent D0180 [',dos_recent_D0180,'].')
					         WHERE id=t_id;
					else
						-- -----------------------------------IF "H" Starts ------------------------------------------
						-- Compare DOS D4342, D4341 occurs within 1 year after DOS D0180?
						-- if (Not(t_dos BETWEEN (dos_recent_D0180) AND (DATE_ADD(dos_recent_D0180,INTERVAL 1 YEAR))))THEN
						IF ( NOT(	t_dos BETWEEN (dos_recent_D0180) AND (DATE_ADD(dos_recent_D0180,INTERVAL 1 YEAR)) and t_dos != dos_recent_D0180	 	))THEN
							-- >> REASON 7
							UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
							SET expected_reason_level=7,
							    expected_ryg_status='red',
					                    expected_status='Disallow Codes D4342 , D4341',
					                    test_detail=concat('DOS of ',t_proc_code,'[',t_dos,'] does not occurs within 1 year after DOS D0180 [',dos_recent_D0180,'].')
							WHERE id=t_id;
						else
							-- Checking for D42xx, D4320, D4321, D4355, D4381
							SELECT COUNT(*)INTO check_for_D42xx_others 
							FROM emihealth_final.src_perio_scaling_4a
							WHERE (proc_code LIKE 'D42%' OR proc_code IN('D4320','D4321','D4355','D4381')) AND pid=t_mid
							AND (date_of_service < t_dos OR date_of_service = t_dos);
							-- ---------------------- IF D Starts ---------------------
							IF(check_for_D42xx_others=0) THEN
								-- >> REASON 8
								UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
								SET expected_reason_level=8,
								    expected_ryg_status='green',
					                            expected_status='Allow Codes D4342 , D4341',
					                            test_detail='Code found in D42xx, D4320, D4321, D4355, D4381.'
								 WHERE id=t_id;
							ELSE
							     -- Does DOS D4341, D4342 occur before DOS D42xx, D4320, D4321, D4355, D4381 ?
							     SELECT COUNT(*)INTO is_dos_D4341_43_before_D42xx_Others
							     FROM  emihealth_final.src_perio_scaling_4a
							     WHERE proc_code != t_proc_code AND (proc_code IN('D4320','D4321','D4355','D4381') OR proc_code LIKE 'D42%') 
								   AND pid=t_mid 
								   AND (date_of_service between (DATE_SUB(t_dos,INTERVAL 1 YEAR)) and t_dos);
							     -- ------------- IF E Starts ---------------   
							     IF(is_dos_D4341_43_before_D42xx_Others=0) THEN
							       -- >> Reason 9
							        UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
								SET expected_reason_level=9,
								    expected_ryg_status='red',
					                            expected_status='Disallow Codes D4342 , D4341',
					                            test_detail='No DOS for D4341, D4342 occur before DOS D42xx, D4320, D4321, D4355, D4381.'
						                WHERE id=t_id;
						              ELSE
						               -- >> REASON 10
								  UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
								  SET expected_reason_level=10,
								      expected_ryg_status='green',
					                              expected_status='Allow Codes D4342 , D4341',
					                              test_detail='DOS for D4341, D4342 occur before DOS D42xx, D4320, D4321, D4355, D4381.'
						                WHERE id=t_id; 
							     END IF;
							     -- ------------- IF E Starts ---------------  
							END IF;
							-- ---------------------- IF D Ends ---------------------
						end if;
						-- -----------------------------------IF "H" Ends ------------------------------------------
					end if;
					-- ----------------------------------------------- IF "G" Ends ---------------------------------------------------
				end if;
				-- -------------------------------------------------------- IF "F" Ends -----------------------------------------------------------
			-- ======================================================================================================================================
			end if;	
		    else
			UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table 
			set expected_reason_level=-1, 
			    test_detail='Invalid Data in record.'
			where id=t_id;
		-- --------------------------------------------------------------Outer if Ends------------------------------------------------------
		    end if;
	        END LOOP ;
  CLOSE test_row_cursor ;
  
  -- setting up output parameters
  
  UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table SET test_status=TRUE WHERE actual_reason_level=expected_reason_level;
  UPDATE test_cases_2.t_temp_13_simpleProphy4a_test_table SET test_status=FALSE WHERE actual_reason_level!=expected_reason_level;
  
  -- setting up records counts
  select count(*) into count_total_records FROM test_cases_2.t_temp_13_simpleProphy4a_test_table;
  select count(*) into count_defective_records FROM test_cases_2.t_temp_13_simpleProphy4a_test_table where  actual_reason_level != expected_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_13_simpleProphy4a_test_table WHERE expected_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_13_simpleProphy4a_test_table where actual_reason_level != expected_reason_level;
	if(temp_count=0) then
		set test_status=true;
		set test_detail=concat(count_total_records,' records are tested.No ambiguous record found.');
	else
		SET test_status=False;
		SET test_detail=concat(count_defective_records,' ambiguous records found out of ',count_total_records);
	end if;
  END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying result and pl_daily table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts3_tc4_resPlDailyCount'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying paid money in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts3_tc5_resPlDailyEqualPaidMoney'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts3_tc6_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying recovered money in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts3_tc6_resPlDailyEqualRecoveredMoney'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying red counts in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts3_tc7_resPlDailyEqualReds'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying table[emihealth_final.pl_perio_scaling_stats_daily] by generating test table[test_cases_2.t_13_pl_temp].'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts3_tc2_plTestTable/t_13_simpleProphy4a_ts3_tc1_plDailyValidation'
		);
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts3_tc1_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts3_tc1_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts3_tc1_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT null;
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT null;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_13_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
	
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_perio_scaling_4a WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_perio_scaling_4a WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_perio_scaling_4a WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_perio_scaling_4a WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_perio_scaling_4a WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_perio_scaling_4a WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_perio_scaling_4a WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations = temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_13_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			UPDATE test_cases_2.t_13_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend='';
			-- SET t_dos= '';
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = null;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_13_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_13_pl_temp WHERE t_13_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_13_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_13_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_13_pl_temp WHERE t_13_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts3_tc2_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts3_tc2_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts3_tc2_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_perio_scaling_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='4a_pl';
	
	SET required_rows = weightage*total_counts/100;
	
	SET res=required_rows;
	
	
	 DROP TABLE IF EXISTS t_13_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_13_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  Default NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_13_pl_temp; 
	
	
	insert into test_cases_2.t_13_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_perio_scaling_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_13_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts3_tc3_checkPlDailyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts3_tc3_checkPlDailyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts3_tc3_checkPlDailyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_daily_table_exists, pl_daily_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_perio_scaling_stats_daily') INTO pl_daily_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_perio_scaling_stats_daily') INTO pl_daily_table_empty;
	
	IF (pl_daily_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_daily_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.results_perio_scaling_4a WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_perio_scaling_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_perio_scaling_4a` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_perio_scaling_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts3_tc6_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts3_tc6_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts3_tc6_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_perio_scaling_4a` WHERE isactive=1;
	SELECT SUM(recovered_money) INTO pld_rec_money FROM emihealth_final.`pl_perio_scaling_stats_daily` WHERE isactive=1;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_perio_scaling_4a` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_perio_scaling_stats_daily` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_perio_scaling_4a` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_perio_scaling_stats_daily` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying pl_daily and db_daily table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts4_tc4_checkCountDosPlNDb'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying paid money db_daily  and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts4_tc5_checkTotalCountPlNDb'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying recovered money in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts4_tc6_checkRygCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying red counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts4_tc7_checkRedCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc8_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying yellow counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts4_tc8_checkYellowCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc9_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying green counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts4_tc9_checkGreenCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_13_dashboard_temp]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts4_tc2_dashboardTestTable/t_13_simpleProphy4a_ts4_tc1_dashboardDailyValidation'
		);
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts4_tc1_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts4_tc1_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts4_tc1_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT Null;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_13_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_perio_scaling_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_perio_scaling_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_perio_scaling_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_perio_scaling_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_13_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_13_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos='';
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_13_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_13_dashboard_temp WHERE t_13_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_13_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_13_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_13_dashboard_temp WHERE t_13_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts4_tc2_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts4_tc2_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts4_tc2_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=13;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='4a_pl';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_13_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_13_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_13_dashboard_temp; 
	
	
	insert into test_cases_2.t_13_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=13) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_13_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts4_tc3_checkDashboardDailyResExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts4_tc3_checkDashboardDailyResExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts4_tc3_checkDashboardDailyResExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_dialy_table_exists BOOL DEFAULT FALSE; 
	DECLARE db_dialy_table_empty INT DEFAULT NULL;
	SELECT t_check_if_table_exists_global_fun('dashboard_daily_results') INTO db_dialy_table_exists;
	
	select count(*) into db_dialy_table_empty from emihealth_final.dashboard_daily_results where type=13;
	
	IF ( db_dialy_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_dialy_table_empty = NULL) THEN
			SET test_detail='No record in table against algo id 13.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table against algo id 13.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts4_tc4_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts4_tc4_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts4_tc4_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.`pl_perio_scaling_stats_daily` WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=13;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_perio_scaling_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=13;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_perio_scaling_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=13;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_perio_scaling_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=13;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts4_tc8_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts4_tc8_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts4_tc8_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=13;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts4_tc9_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts4_tc9_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts4_tc9_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_perio_scaling_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=13;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying result and pl_monthly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts5_tc2_checkCountResNPlMonthly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying paid money in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts5_tc3_checkPaidMoneyResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying recovered money in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts5_tc4_checkRecoveredMoneyResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts5_tc5_checkEqualRedsResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying red counts in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts5_tc5_checkEqualRedsResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts5_tc6_distinctYearsCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying distinct years counts in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts5_tc6_distinctYearsCountResNPlMonthly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying table[emihealth_final.pl_perio_scaling_stats_monthly] by generating test table[test_cases_2.t_temp_4a_ts5_tc7]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts5_tc7A_testTableGen'
		);
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts5_tc1_checkPlMonthlyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts5_tc1_checkPlMonthlyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts5_tc1_checkPlMonthlyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_monthly_table_exists, pl_monthly_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_perio_scaling_stats_monthly') INTO pl_monthly_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_perio_scaling_stats_monthly') INTO pl_monthly_table_empty;
	
	IF (pl_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_monthly_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_perio_scaling_4a` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO plm_count FROM emihealth_final.`pl_perio_scaling_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_perio_scaling_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_perio_scaling_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts5_tc5_checkEqualRedsResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts5_tc5_checkEqualRedsResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts5_tc5_checkEqualRedsResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_perio_scaling_4a WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.`pl_perio_scaling_stats_monthly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts5_tc6_distinctYearsCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts5_tc6_distinctYearsCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts5_tc6_distinctYearsCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.`pl_perio_scaling_stats_monthly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_perio_scaling_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='4a_pl_monthly_weightage';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_4a_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_4a_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_4a_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_4a_ts5_tc7(attend, MONTH,YEAR, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,MONTH,YEAR,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		FROM emihealth_final.`pl_perio_scaling_stats_monthly` WHERE isactive=1 ORDER BY (CONCAT(MONTH,YEAR)) DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_4a_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_4a_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.`results_perio_scaling_4a` WHERE isactive=1 AND MONTH(results_perio_scaling_4a.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.`results_perio_scaling_4a` WHERE isactive=1 AND MONTH(results_perio_scaling_4a.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1 AND MONTH(results_perio_scaling_4a.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1 AND MONTH(results_perio_scaling_4a.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1 AND MONTH(results_perio_scaling_4a.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1 AND MONTH(results_perio_scaling_4a.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1 AND MONTH(results_perio_scaling_4a.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) INTO temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_perio_scaling_4a` 
			WHERE isactive=1 AND MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_4a_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_4a_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4a_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4a_ts5_tc7 WHERE t_temp_4a_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4a_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_4a_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4a_ts5_tc7 WHERE t_temp_4a_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS6_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS6_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS6_PL_STATS_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying result and pl_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts6_tc1_checkCountResNPlYearly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying paid money in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts6_tc2_checkPaidMoneyResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying recovered money in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts6_tc3_checkRecoveredMoneyResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying red counts in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts6_tc4_checkEqualRedsResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts6_tc5_distinctYearsCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying distinct years counts in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts6_tc5_distinctYearsCountResNPlYearly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying table[emihealth_final.pl_perio_scaling_stats_yearly] by generating test table[test_cases_2.t_temp_4a_ts6_tc6]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts6_tc6A_testTableGen/t_13_simpleProphy4a_ts6_tc6B_columnValidation'
		);
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_perio_scaling_4a` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_perio_scaling_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_perio_scaling_4a` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_perio_scaling_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_perio_scaling_4a`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_perio_scaling_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_perio_scaling_4a` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_perio_scaling_stats_yearly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts6_tc5_distinctYearsCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts6_tc5_distinctYearsCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts6_tc5_distinctYearsCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.`results_perio_scaling_4a` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.`pl_perio_scaling_stats_yearly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_complex_perio_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='4a_pl_yearly_weightage';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_4a_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_4a_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_4a_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_4a_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_perio_scaling_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_4a_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_4a_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_perio_scaling_4a` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_perio_scaling_4a` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_perio_scaling_4a WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_perio_scaling_4a` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_4a_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_4a_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4a_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4a_ts6_tc6 WHERE t_temp_4a_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_4a_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_4a_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_4a_ts6_tc6 where t_temp_4a_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying distinct year counts in pl_monthly and db_monthly'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts7_tc2_countDistinctYearsPlMNDbM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying total_count db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts7_tc3_checkTotalCountPlMNdbm'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying providers count in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts7_tc4_checkCountNoOfProvPlMNdbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts7_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying yellow counts in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts7_tc4_checkCountNoOfProvPlMNdbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts7_tc7_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying green counts in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts7_tc7_checkGreenCountsPlMNDbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying paid_money  in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_TS7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_TS7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_4a_ts7_tc9]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_TS7_tc9A_testTableGen'
		);								
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts7_tc1_checkDashboardMonthlyResExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts7_tc1_checkDashboardMonthlyResExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts7_tc1_checkDashboardMonthlyResExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_monthly_table_exists, db_monthly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_monthly_results') INTO db_monthly_table_exists;
	
	select count(*) into db_monthly_table_empty from emihealth_final.dashboard_monthly_results where type=13;
	
	IF ( db_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_monthly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_monthly_results) against algo id 13.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_monthly_results) against algo id 13.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_perio_scaling_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=13;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
		set success = true;
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
		SET success = TRUE;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_perio_scaling_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=13;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_perio_scaling_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=13;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
	set success = true;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_perio_scaling_stats_monthly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=13;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts7_tc7_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts7_tc7_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts7_tc7_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_perio_scaling_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=13;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_perio_scaling_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=13;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_monthly_results WHERE isactive=1 and type=13;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='4a_db_monthly_weightage';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_13_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_13_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_13_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_13_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=13) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	select count(*)into temp_count FROM test_cases_2.t_temp_13_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_13_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_perio_scaling_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.`pl_perio_scaling_stats_monthly` WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_perio_scaling_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_perio_scaling_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_13_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_13_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_yellow=temp_actual_total_yellow=0; 
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_13_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_13_ts7_tc9 WHERE t_temp_13_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_13_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_13_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_13_ts7_tc9 WHERE t_temp_13_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying pl_yearly and db_yearly table distinct years'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts8_tc2_countDistinctYearsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying pl_yearly and db_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts8_tc3_checkTotalCountPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying no. of providers in db_yearly  and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts8_tc4_checkCountNoOfProvPlYNDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying red counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts8_tc5_checkTotalRedCountsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts8_tc6_checkTotalYellowCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying yellow counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts8_tc6_checkTotalYellowCountsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying green counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts8_tc7_checkGreenCountsPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying paid money money in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_13_simpleProphy4a_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_TS8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_TS8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			13
			,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_4a_ts8_tc9]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),
			't_report'
			,'t_13_simpleProphy4a_TS8_tc9A_testTableGen'
		);
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts8_tc1_checkDashboardYearlyResTabExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_yearly_table_exists, db_yearly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_yearly_results') INTO db_yearly_table_exists;
	
	select count(*) into db_yearly_table_empty from emihealth_final.dashboard_yearly_results where type=13;
	
	IF ( db_yearly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_yearly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_yearly_results) against algo id 13.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_yearly_results) against algo id 13.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.`pl_perio_scaling_stats_yearly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=13;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.`pl_perio_scaling_stats_yearly` WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=13;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.`pl_perio_scaling_stats_yearly` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=13;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_perio_scaling_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=13;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_perio_scaling_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=13;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_perio_scaling_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=13;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_perio_scaling_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=13;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS8_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS8_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS8_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=13;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='4a_db_yearly_weightage';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_4a_ts8_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_4a_ts8_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_4a_ts8_tc9; 
	
	
	insert into test_cases_2.t_temp_4a_ts8_tc9(year,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=13) ORDER BY(year)desc LIMIT required_rows;
	
	select count(*)into temp_count FROM test_cases_2.t_temp_4a_ts8_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13_simpleProphy4a_TS8_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13_simpleProphy4a_TS8_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13_simpleProphy4a_TS8_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_4a_ts8_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_perio_scaling_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_perio_scaling_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_perio_scaling_stats_yearly WHERE YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_perio_scaling_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_4a_ts8_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_4a_ts8_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4a_ts8_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4a_ts8_tc9 WHERE t_temp_4a_ts8_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4a_ts8_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_4a_ts8_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4a_ts8_tc9 WHERE t_temp_4a_ts8_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_13________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_13________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_13________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_check_preconditions` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_check_preconditions` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_check_preconditions`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	
	Declare base_count, src_count, res_count int Default 0;
	DECLARE base_ids_count, src_ids_count, res_ids_count INT DEFAULT 0;
	declare test_status_1,test_status_2 bool default false;
	declare base_D4910_count, src_D4910_count, res_D4910_count int default 0;
	DECLARE temp_count INT default 0; 
	
	
	
	select count(*) into base_count FROM emihealth_final.procedure_performed;
	SELECT COUNT(*) INTO src_count FROM emihealth_final.src_simple_prophy_4b;
	SELECT COUNT(*) INTO res_count FROM emihealth_final.results_simple_prophy_4b;
	
	
	
		
	if((base_count != 0) and (src_count != 0) and (res_count != 0) ) then
		set test_status=true;
		set test_status_1= true;
	else
		set test_status=False;
		set test_detail='Base or Source or Result table is/are empty.';
	end if;
	
	if(test_status_1=true) then
			SELECT COUNT(*) into base_ids_count FROM emihealth_final.procedure_performed WHERE attend IS NULL OR MID IS NULL;
			SELECT COUNT(*) INTO src_ids_count FROM emihealth_final.src_simple_prophy_4b WHERE attend IS NULL OR pid IS NULL;
			SELECT COUNT(*) INTO res_ids_count FROM emihealth_final.results_simple_prophy_4b WHERE attend IS NULL OR MID IS NULL and isactive=1;
		
			IF((base_ids_count = 0) AND (base_ids_count = 0) AND (res_ids_count = 0) ) THEN
				SET test_status=TRUE;
				set test_status_2=true;
			ELSE
				SET test_status=FALSE;
				SET test_detail='Base or Source or Result table contain empty pids/mids.';
			END IF;
			if(test_status_2 = true) then
					select count(*) INTO base_D4910_count FROM emihealth_final.procedure_performed where proc_code ='D4910';
					SELECT COUNT(*) INTO src_D4910_count FROM emihealth_final.src_simple_prophy_4b WHERE proc_code ='D4910';
					SELECT COUNT(*) INTO res_D4910_count FROM emihealth_final.results_simple_prophy_4b WHERE proc_code ='D4910' AND isactive=1;
					
					IF(( base_D4910_count = 0) AND (src_D4910_count = 0) AND (res_D4910_count = 0) ) THEN
						SET test_status=False;
						SET test_detail='Base or Source or Result contain zero D4 pids/mids.';
					ELSE
						SET test_status=True;
						SET test_detail="Preconditions are passed.";
					END IF;		
			end if;
	end if;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_drop_temp_tables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_drop_temp_tables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_drop_temp_tables`()
BEGIN
	   DROP TABLE IF EXISTS t_temp_4b_ts1_tc5;
	   drop table if Exists t_temp_4b_ts2_tc7;
	   DROP TABLE IF EXISTS t_temp_4b_ts3_tc7;
	   DROP TABLE IF EXISTS t_temp_4b_ts4_tc7;
	   DROP TABLE IF EXISTS t_temp_4b_ts5_tc8;
	   DROP TABLE IF EXISTS t_temp_4b_ts7_tc9;
	   DROP TABLE IF EXISTS t_temp_4b_ts9_tc9;
	   
	   DROP TABLE IF EXISTS t_temp_4b_ts1_output;
	   Drop Table if Exists t_temp_4b_ts2_output;
	   DROP TABLE IF EXISTS t_temp_4b_ts3_output;
	   DROP TABLE IF EXISTS t_temp_4b_ts4_output;
	   DROP TABLE IF EXISTS t_temp_4b_ts5_output;
	   DROP TABLE IF EXISTS t_temp_4b_ts7_output;
	   DROP TABLE IF EXISTS t_temp_4b_ts9_output;
	   
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_MAIN`()
BEGIN
	call `t_14_simpleProphy4b_TS1_RESULT_TABLE`();
	call `t_14_simpleProphy4b_TS2_PL_STATS_DAILY_TABLE`();
	call `t_14_simpleProphy4b_TS3_PL_STATS_MONTHLY_TABLE`();
	call `t_14_simpleProphy4b_TS4_PL_STATS_YEARLY_TABLE`();
	call `t_14_simpleProphy4b_TS5_DASHBOARD_DAILY_TABLE`();
	call `t_14_simpleProphy4b_TS7_DASHBOARD_MONTHLY_TABLE`();
	call `t_14_simpleProphy4b_TS9_DASHBOARD_YEARLY_RESUlTS_TABLE`();
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_TS1_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_TS1_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_TS1_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts1_tc1_checkBaseSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying base and source counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts1_tc1_checkBaseSrcCount'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts1_tc2_extraProcCodesSrc`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying no extra proc_codes in source table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts1_tc2_extraProcCodesSrc'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts1_tc3_srcResCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying source and results counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts1_tc3_srcResCount'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts1_tc4_onlyD4910Res`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying result table has only D4910'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts1_tc4_onlyD4910Res'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts1_tc5A_testTableGen`(@suc);
	CALL test_cases_2.`t_14_simpleProphy4b_ts1_tc5B_reasons`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying Columns for result table[emihealth_final.results_simple_prophy_4b] by generating test table[test_cases_2.t_temp_4b_ts1_tc5]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts1_tc5A_testTableGen/t_14_simpleProphy4b_ts1_tc5B_reasons'
		);
	-- t_temp_4b_ts1_tc5	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts1_tc1_checkBaseSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts1_tc1_checkBaseSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts1_tc1_checkBaseSrcCount`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	select count(*) into src_count FROM emihealth_final.src_simple_prophy_4b;
	select count(*) INTO base_count FROM emihealth_final.procedure_performed where (proc_code in('D4910','D0180') or proc_code like 'D4%') and is_invalid=0;
	
	if(src_count=base_count) then
		set test_status=true;
		set test_detail='Equal counts found in base and source table for (D4xxx,D0180).';
	else
		set test_status=False;
		if(src_count>base_count)then
			set test_detail=concat(src_count-base_count,' more counts  found in source table then base table for (D4xxx,D0180).');
		else
			set test_detail=concat(base_count-src_count,' more counts found in base table then source table for (D4xxx,D0180).');
		end if;
	end if;
	set success=true;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts1_tc2_extraProcCodesSrc` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts1_tc2_extraProcCodesSrc` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts1_tc2_extraProcCodesSrc`(out success bool,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	declare src_count int;
	SELECT COUNT(*) into src_count FROM emihealth_final.src_simple_prophy_4b WHERE NOT (proc_code IN('D4910','D0180') OR proc_code LIKE 'D4%');
	if (src_count=0) then
		set test_status = true;
		set test_detail='No record except (D4910,D0180,D4xxx) found in source table.';
	else
		SET test_status = False;
		SET test_detail=concat(src_count,' records found in source table which are not in (D4910,D0180,D4xxx).');
	end if;
	set success=true;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts1_tc3_srcResCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts1_tc3_srcResCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts1_tc3_srcResCount`(out success bool ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE res_count INT;
	SELECT COUNT(*) INTO src_count FROM emihealth_final.src_simple_prophy_4b where proc_code='D4910';
	SELECT COUNT(*) INTO res_count FROM emihealth_final.results_simple_prophy_4b where isactive=1;
	 
	IF(src_count=res_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and source table for (D4910).';
	ELSE
		SET test_status=FALSE;
		IF(src_count>res_count)THEN
			SET test_detail=CONCAT(src_count-res_count,' more counts  found in source table then base table for (D4xxx,D0180).');
		ELSE
			SET test_detail=CONCAT(res_count-src_count,' more counts found in result table then source table for (D4xxx,D0180).');
		END IF;
	END IF;
	
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts1_tc4_onlyD4910Res` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts1_tc4_onlyD4910Res` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts1_tc4_onlyD4910Res`(out success bool,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_count INT;
	SELECT COUNT(*) INTO res_count FROM emihealth_final.results_simple_prophy_4b WHERE  proc_code != 'D4910';
	IF (res_count>0) THEN
		SET test_status = False;
		SET test_detail=concat(res_count,' records exists result table other than D4910.');
	ELSE
		SET test_status = True;
		SET test_detail= 'No records found other than D4910 in result table.' ;
	END IF;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts1_tc5A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts1_tc5A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts1_tc5A_testTableGen`(out success Bool)
BEGIN
	declare reason_percent decimal(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        drop table if exists t_temp_4b_ts1_tc5;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_4b_ts1_tc5` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(20) DEFAULT -1,
	  `attend` varchar(20) Default Null,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` datetime default Null,
	  `act_reason_level` int(2) default Null,
	  `exp_reason_level` INT(2) DEFAULT NULL,
	  `test_status` bool Default Null,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_4b_ts1_tc5;
        
        
        -- set reason_percent =2;
        set iterator = 1;
        
        
        while(iterator < 7) Do
		SET selected_reason= iterator;
		select reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  
		where algo_id=14 and reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) into reason_total_count FROM emihealth_final.`results_simple_prophy_4b` where reason_level=selected_reason;
		
		/*
		IF(reason_total_count < 100) then
			set reason_sample_count=reason_total_count;
		else
			set reason_sample_count=(reason_total_count*reason_percent)/100;
		end if;
		*/
		SET reason_sample_count=(reason_total_count*reason_percent)/100;
		IF(reason_sample_count < 50)THEN
			SET reason_sample_count = 50;
		END IF;
		
				
		INSERT INTO test_cases_2.t_temp_4b_ts1_tc5(res_id,attend,MID,date_of_service,act_reason_level)
		SELECT id,attend,MID,date_of_service,reason_level
		FROM emihealth_final.results_simple_prophy_4b WHERE reason_level=selected_reason AND isactive=1 ORDER BY RAND() LIMIT reason_sample_count;
		
		/*insert into test_cases_2.t_ test_temp_4b(attend,mid,date_of_service,reason_level)
		select attend,mid,date_of_service,reason_level
		FROM emihealth_final.results_simple_prophy_4b 
		where reason_level=selected_reason and YEAR(date_of_service)=
                                             (SELECT FLOOR(RAND()*(
			                                             (SELECT YEAR(MAX(date_of_service)) FROM emihealth_final.results_simple_prophy_4b )-(SELECT YEAR(MIN(date_of_service)) FROM emihealth_final.results_simple_prophy_4b )+1 
		                                                   )
	                                                   )+(SELECT YEAR(MIN(date_of_service)) FROM emihealth_final.results_simple_prophy_4b )
                                              )
		limit reason_sample_count;
		*/
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_4b_ts1_tc5;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts1_tc5B_reasons` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts1_tc5B_reasons` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts1_tc5B_reasons`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
DECLARE finished INTEGER DEFAULT 0 ;
  DECLARE t_id BIGINT(20); 
  DECLARE t_dos DATETIME DEFAULT NULL;
  DECLARE t_attend, t_mid VARCHAR (50) DEFAULT "" ;
  
  
  DECLARE dos_D4xxx_caseA,dos_D4xxx_caseB,dos_D4xxx_caseC DATETIME DEFAULT NULL;
  
  DECLARE has_inst_D4xxx_except_D4355_D4921_caseA
	  ,has_inst_D4xxx_except_D4355_D4921_caseB
	  ,has_inst_D4xxx_except_D4355_D4921_caseC INT DEFAULT 0;
	  
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id, attend, MID, date_of_service FROM test_cases_2.t_temp_4b_ts1_tc5 ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id, t_attend, t_mid, t_dos;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    -- =========================================== IF "A" STARTS =============================================== --
		    if( (t_attend ='') or (t_attend is null) or (t_mid ='') 
			or (t_mid is null) or (t_dos ='' ) or (t_dos is null))then
			
			UPDATE 	test_cases_2.t_temp_4b_ts1_tc5 
			SET 	exp_act_reason_level=-1, test_detail='Invalid Data.' 
			WHERE 	id=t_id
				;
		    else
			select 	count(*), max(date_of_service)
			INTO 	has_inst_D4xxx_except_D4355_D4921_caseA, dos_D4xxx_caseA
			FROm 	emihealth_final.src_simple_prophy_4b
			Where 	(
					proc_code like 'D4%'
					AND proc_code NOT IN('D4355','D4921')
					AND proc_code != 'D4910'
					AND date_of_service <= t_dos
					and pid = t_mid
				)
				;
			
			SELECT 	COUNT(*), Max(date_of_service)
			INTO 	has_inst_D4xxx_except_D4355_D4921_caseB, dos_D4xxx_caseB
			FROM 	emihealth_final.src_simple_prophy_4b
			WHERE 	proc_code = 'D4910'
				AND date_of_service < t_dos
				AND pid = t_mid
				;
				
			SELECT 	COUNT(*), Max(date_of_service)
			INTO 	has_inst_D4xxx_except_D4355_D4921_caseC, dos_D4xxx_caseC
			FROM 	emihealth_final.src_simple_prophy_4b
			WHERE 	proc_code = 'D4910'
				AND date_of_service = t_dos
				AND pid = t_mid
				;
			
			if not( has_inst_D4xxx_except_D4355_D4921_caseA > 0 
				OR has_inst_D4xxx_except_D4355_D4921_caseB > 0
				OR has_inst_D4xxx_except_D4355_D4921_caseC > 1
			      )then
				update 	test_cases_2.t_temp_4b_ts1_tc5
				SET 	exp_reason_level = 1
				WHERE 	id = t_id
					;
					
			else
				if( (dos_D4xxx_caseA between DATE_SUB(t_dos, INTERVAL 90 DAY) and t_dos) 
				/*
				     OR (dos_D4xxx_caseB BETWEEN DATE_SUB(t_dos, INTERVAL 90 DAY) AND t_dos)
				     or (dos_D4xxx_caseC BETWEEN DATE_SUB(t_dos, INTERVAL 90 DAY) AND t_dos)
				     */
				  )THEN
					UPDATE 	test_cases_2.t_temp_4b_ts1_tc5
					SET 	exp_reason_level = 2
					WHERE 	id = t_id
						;
				 END IF;
				   
			end if;
			
		    end if;
		    -- =========================================== IF "A" ENDS =============================================== --       		    
	        END LOOP ;
  CLOSE my_cursor ;
  
  
  /*
  UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_status=TRUE WHERE act_reason_level=exp_reason_level;
  UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_status=FALSE WHERE act_reason_level!=exp_reason_level;
  -- setting up records counts
  SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4b_ts1_tc5;
  SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4b_ts1_tc5 WHERE  act_reason_level != exp_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts1_tc5 WHERE exp_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts1_tc5 WHERE act_reason_level != exp_reason_level;
	IF(temp_count=0) THEN
		SET test_status=TRUE;
		SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
	ELSE
		SET test_status=FALSE;
		SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
	END IF;
  END IF;
  
  
  */
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts1_tc5B_reasons_old` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts1_tc5B_reasons_old` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts1_tc5B_reasons_old`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
DECLARE finished INTEGER DEFAULT 0 ;
  DECLARE t_id BIGINT(20); 
  DECLARE t_dos_d4910 DATETIME DEFAULT NULL;
  DECLARE t_attend, t_mid VARCHAR (50) DEFAULT "" ;
  
  DECLARE p_d4910, p_d0180, temp_proc_code VARCHAR(50) DEFAULT NULL ;
  DECLARE dos_d4910, dos_d0180, dos_temp, dos_year_back,dos_d4xxx DATETIME DEFAULT NULL;
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id, attend, MID, date_of_service FROM test_cases_2.t_temp_4b_ts1_tc5 ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id, t_attend, t_mid, t_dos_d4910;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    if( (t_attend!='') and (t_attend is not null) and (t_mid !='') and (t_mid is not null) and (t_dos_d4910 !='' ) and (t_dos_d4910 is not null))then
			    SET temp_count =0;
			    SELECT COUNT(*) INTO temp_count FROM emihealth_final.src_simple_prophy_4b WHERE pid=t_mid AND attend=t_attend AND proc_code='D4910' AND date_of_service=t_dos_d4910 AND pid!='';
			    IF(temp_count != 0) THEN
					SET temp_count=0;
					SELECT COUNT(*) INTO temp_count FROM emihealth_final.src_simple_prophy_4b WHERE pid=t_mid AND proc_code='D0180' AND pid!='' AND (date_of_service < t_dos_d4910 OR date_of_service=t_dos_d4910);
					IF(temp_count != 0) THEN -- >> Reason 1 and 2
							SELECT MAX(date_of_service) INTO dos_d0180 FROM emihealth_final.src_simple_prophy_4b WHERE pid=t_mid AND proc_code='D0180' AND pid!='' AND (date_of_service < t_dos_d4910 OR date_of_service=t_dos_d4910);
							IF(dos_d0180 != '') THEN
								SET dos_year_back = DATE_SUB(t_dos_d4910, INTERVAL  1 year);
								IF((dos_d0180 BETWEEN dos_year_back AND t_dos_d4910 ) OR (dos_d0180 = t_dos_d4910 )) THEN
										UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_reason_level=1, test_detail='IN 1' WHERE id=t_id;
								ELSE
										UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_reason_level=2, test_detail='IN 2' WHERE id=t_id;
								END IF;	
							ELSE
								UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_reason_level=-1, test_detail='Dos for D0180 is null' WHERE id=t_id;
							END IF;	
						
					ELSE 			-- >> Reason 3 and 4
							SET temp_count = 0;
							SELECT COUNT(*), MAX(date_of_service) INTO temp_count,dos_d4xxx FROM emihealth_final.src_simple_prophy_4b WHERE ( pid=t_mid AND proc_code LIKE 'D4%' AND attend <> t_attend AND attend !=''  AND date_of_service <= t_dos_d4910 AND pid!='' );
							IF (temp_count != 0) THEN
									SET dos_temp = NULL;
									SET dos_temp=DATE_ADD(dos_d4xxx,INTERVAL 183 DAY);
									IF(t_dos_d4910 <= dos_temp )THEN
										UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_reason_level=3, test_detail=CONCAT('DOS(d4910) ',t_dos_d4910,' is less then DOS(d4xxx) ',dos_temp ,' plus 183 days') WHERE id=t_id;
									ELSE
										UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_reason_level=4, test_detail=CONCAT('DOS(d4910) ',t_dos_d4910,' is not less then DOS(d4xxx) ',dos_temp ,' plus 183 days') WHERE id=t_id;
									END IF;
									
							ELSE
									UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_reason_level=4, test_detail='No code for this patient like D4xxx found with other doctor.' WHERE id=t_id;
							END IF;
							
					END IF;
						
			    ELSE
					UPDATE test_cases_2.t_temp_4b_ts1_tc5
					SET test_reason_level=-1, test_detail='proc code D4910 or dos or both does not exist'
					WHERE id=t_id;
			    END IF;
		    else
			UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_reason_level=-1, test_detail='Invalid Data.' WHERE id=t_id;
		    end if;       		    
	        END LOOP ;
  CLOSE my_cursor ;
  
  UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_status=TRUE WHERE reason_level=test_reason_level;
  UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_status=FALSE WHERE reason_level!=test_reason_level;
  -- setting up records counts
  SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4b_ts1_tc5;
  SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4b_ts1_tc5 WHERE  reason_level != test_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts1_tc5 WHERE test_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts1_tc5 WHERE reason_level != test_reason_level;
	IF(temp_count=0) THEN
		SET test_status=TRUE;
		SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
	ELSE
		SET test_status=FALSE;
		SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
	END IF;
  END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts1_tc5B_reasons_old_2` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts1_tc5B_reasons_old_2` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts1_tc5B_reasons_old_2`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
DECLARE finished INTEGER DEFAULT 0 ;
  DECLARE t_id BIGINT(20); 
  DECLARE t_dos_d4910 DATETIME DEFAULT NULL;
  DECLARE t_attend, t_mid VARCHAR (50) DEFAULT "" ;
  
  DECLARE p_d4910, p_d0180, temp_proc_code VARCHAR(50) DEFAULT NULL ;
  DECLARE dos_d4910, dos_d0180, dos_temp, dos_year_back,dos_d4xxx DATETIME DEFAULT NULL;
  DECLARE temp_count,temp_count_1,temp_count_2,temp_count_3, count_total_records,count_defective_records INT DEFAULT 0;
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id, attend, MID, date_of_service FROM test_cases_2.t_temp_4b_ts1_tc5 ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id, t_attend, t_mid, t_dos_d4910;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    -- =========================================== IF "A" STARTS =============================================== --
		    if( (t_attend!='') and (t_attend is not null) and (t_mid !='') and (t_mid is not null) and (t_dos_d4910 !='' ) and (t_dos_d4910 is not null))then
			SET temp_count =0;
			SELECT 	COUNT(*) INTO temp_count 
			FROM 	emihealth_final.src_simple_prophy_4b 
			WHERE 	pid=t_mid 
				AND attend=t_attend 
				AND proc_code='D4910' 
				AND date_of_service=t_dos_d4910 
				;
			-- =========================================== IF "B" STARTS =============================================== --
			IF(temp_count != 0) THEN
				set temp_count = 0; set temp_count_1 = 0; set temp_count_2 = 0; SET temp_count_3 = 0;
				
				SELECT 	COUNT(*) INTO temp_count_1 
				FROM 	emihealth_final.src_simple_prophy_4b 
				WHERE 	pid=t_mid 
					and  proc_code like 'D4%' 
					AND (date_of_service between date_sub(t_dos_d4910, interval 180 day) and t_dos_d4910) 
					and date_of_service < t_dos_d4910
					;
				SELECT 	COUNT(*) INTO temp_count_2 
				FROM 	emihealth_final.src_simple_prophy_4b 
				WHERE 	pid = t_mid 
					AND  proc_code LIKE 'D4%' 
					AND  date_of_service = t_dos_d4910 
					and proc_code != 'D4910'
					;
				SELECT 	COUNT(*) INTO temp_count_3 
				FROM 	emihealth_final.src_simple_prophy_4b 
				WHERE 	pid = t_mid 
					AND  date_of_service = t_dos_d4910 
					AND proc_code = 'D4910'
					;
					if(temp_count_3 = 1)then
						set temp_count_3 = 0;
					end if;
				
				set temp_count = temp_count_1 + temp_count_2 + temp_count_3
					;
				-- =========================================== IF "C" STARTS =============================================== --
				IF(temp_count = 0) THEN
					SET temp_count=0;
					SELECT COUNT(*) INTO temp_count 
					FROM 	emihealth_final.src_simple_prophy_4b 
					WHERE 	pid=t_mid 
						AND proc_code='D0180' 
						AND (date_of_service < t_dos_d4910 OR date_of_service=t_dos_d4910)
						;
					-- =========================================== IF "D" STARTS =============================================== --
					IF(temp_count != 0) THEN -- >> Reason 1 and 2
						SELECT 	MAX(date_of_service) INTO dos_d0180 
						FROM 	emihealth_final.src_simple_prophy_4b 
						WHERE 	pid=t_mid 
							AND proc_code='D0180' 
							AND (date_of_service < t_dos_d4910 OR date_of_service=t_dos_d4910);
						IF(dos_d0180 != '') THEN
							SET dos_year_back = DATE_SUB(t_dos_d4910, INTERVAL  1 year);
							IF((dos_d0180 BETWEEN dos_year_back AND t_dos_d4910 ) OR (dos_d0180 = t_dos_d4910 )) THEN
								UPDATE 	test_cases_2.t_temp_4b_ts1_tc5 
								SET 	test_reason_level=1, 
									test_detail='IN 1' 
								WHERE 	id=t_id
									;
							ELSE
								UPDATE 	test_cases_2.t_temp_4b_ts1_tc5 
								SET 	test_reason_level=2, test_detail='IN 2' 
								WHERE 	id=t_id
									;
							END IF;	
						ELSE
							UPDATE 	test_cases_2.t_temp_4b_ts1_tc5 
							SET 	test_reason_level=-1, 
								test_detail='Dos for D0180 is null' 
							WHERE 	id=t_id
								;
						END IF;		
					ELSE 			-- >> Reason 3 and 4
						SET temp_count = 0;
						SELECT 	COUNT(*), MAX(date_of_service) INTO temp_count,dos_d4xxx 
						FROM 	emihealth_final.src_simple_prophy_4b 
						WHERE 	pid=t_mid 
							AND proc_code LIKE 'D4%' 
							AND attend <> t_attend 
							AND date_of_service <= t_dos_d4910 
							;
						IF (temp_count != 0) THEN
							SET dos_temp = NULL;
							SET dos_temp=DATE_ADD(dos_d4xxx,INTERVAL 183 DAY);
							IF(t_dos_d4910 <= dos_temp )THEN
								UPDATE 	test_cases_2.t_temp_4b_ts1_tc5 
								SET 	test_reason_level=3, 
									test_detail=CONCAT('DOS(d4910) ',t_dos_d4910,' is less then DOS(d4xxx) ',dos_temp ,' plus 183 days') 
								WHERE id=t_id;
							ELSE
								UPDATE 	test_cases_2.t_temp_4b_ts1_tc5 
								SET 	test_reason_level=4, 
									test_detail=CONCAT('DOS(d4910) ',t_dos_d4910,' is not less then DOS(d4xxx) ',dos_temp ,' plus 183 days') 
								WHERE 	id=t_id
									;
							END IF;		
						ELSE
							UPDATE 	test_cases_2.t_temp_4b_ts1_tc5 
							SET 	test_reason_level=4, test_detail='No code for this patient like D4xxx found with other doctor.' 
							WHERE 	id=t_id
								;
						END IF;			
					END IF;
					-- =========================================== IF "D" ENDS =============================================== --
				else
					UPDATE 	test_cases_2.t_temp_4b_ts1_tc5 
					SET 	test_reason_level=5, test_detail='There is D4xxx with in history of D4910' 
					WHERE 	id=t_id
						;
				END IF;
			-- =========================================== IF "C" ENDS =============================================== --		
			ELSE
				UPDATE 	test_cases_2.t_temp_4b_ts1_tc5
				SET 	test_reason_level=-1, test_detail='proc code D4910 or dos or both does not exist'
				WHERE 	id=t_id
					;
			END IF;
			-- =========================================== IF "B" ENDS =============================================== --
		    else
			UPDATE 	test_cases_2.t_temp_4b_ts1_tc5 
			SET 	test_reason_level=-1, test_detail='Invalid Data.' 
			WHERE 	id=t_id
				;
		    end if;
		    -- =========================================== IF "A" ENDS =============================================== --       		    
	        END LOOP ;
  CLOSE my_cursor ;
  
  UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_status=TRUE WHERE reason_level=test_reason_level;
  UPDATE test_cases_2.t_temp_4b_ts1_tc5 SET test_status=FALSE WHERE reason_level!=test_reason_level;
  -- setting up records counts
  SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4b_ts1_tc5;
  SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4b_ts1_tc5 WHERE  reason_level != test_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts1_tc5 WHERE test_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts1_tc5 WHERE reason_level != test_reason_level;
	IF(temp_count=0) THEN
		SET test_status=TRUE;
		SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
	ELSE
		SET test_status=FALSE;
		SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
	END IF;
  END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_TS2_PL_STATS_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_TS2_PL_STATS_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_TS2_PL_STATS_DAILY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts2_tc2_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying result and pl_daily table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts2_tc2_resPlDailyCount'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts2_tc3_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying paid money in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts2_tc3_resPlDailyEqualPaidMoney'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts2_tc4_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying recovered money in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts2_tc4_resPlDailyEqualRecoveredMoney'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts2_tc5_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying red counts in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts2_tc5_resPlDailyEqualReds'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts2_tc6_resPlDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying distinct years count in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts2_tc6_resPlDailyDistinctYearsCount'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts2_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_14_simpleProphy4b_ts2_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying table[emihealth_final.pl_simple_prophy_stats_daily] by generating test table[test_cases_2.t_temp_4b_ts2_tc7]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts2_tc7A_testTableGen'
		);
	-- test_cases_2.t_temp_4b_ts2_tc7
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts2_tc1_checkPlDailyTableExistNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts2_tc1_checkPlDailyTableExistNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts2_tc1_checkPlDailyTableExistNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	declare  pl_dialy_table_exists, pl_dialy_table_empty bool default false;
	
	SELECT t_check_if_table_exists_global_fun('pl_simple_prophy_stats_daily') into pl_dialy_table_exists;
	select test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_simple_prophy_stats_daily') into pl_dialy_table_empty;
	
	if (pl_dialy_table_exists = false) then
		set test_detail='Table does not exist.';
		set test_status= false;
	else
		if(pl_dialy_table_empty = false) then
			set test_detail='Table is empty.';
			set test_status= false;
		else
			set test_detail='Table exists and not empty.';
			set test_status= true;
		end if;
	end if;
	
	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts2_tc2_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts2_tc2_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts2_tc2_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT default 0;
	DECLARE pld_count INT default 0;
	SELECT COUNT(*) into res_count FROM  emihealth_final.results_simple_prophy_4b WHERE isactive=1;
	SELECT SUM(procedure_count) into pld_count from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts2_tc3_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts2_tc3_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts2_tc3_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1;
	SELECT SUM(income) INTO pld_income from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts2_tc4_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts2_tc4_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts2_tc4_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1;
	SELECT SUM(recovered_money) INTO pld_rec_money from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts2_tc5_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts2_tc5_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts2_tc5_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.results_simple_prophy_4b WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts2_tc6_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts2_tc6_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts2_tc6_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts2_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts2_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts2_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.pl_simple_prophy_stats_daily where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='4b_pl_daily_weightage';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows < 50) then
		SET required_rows = 50;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_4b_ts2_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_4b_ts2_tc7` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  default NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  default NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_4b_ts2_tc7; 
	
	
	insert into test_cases_2.t_temp_4b_ts2_tc7(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1 order by date_of_service desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_4b_ts2_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts2_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts2_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts2_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default "";
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default '';
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_temp_4b_ts2_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.results_simple_prophy_4b WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.results_simple_prophy_4b WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_simple_prophy_4b WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_simple_prophy_4b WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_simple_prophy_4b WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_simple_prophy_4b WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_simple_prophy_4b WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
			
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_temp_4b_ts2_tc7  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									set temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=True;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_4b_ts2_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend and date_of_service=t_dos;
			
			
			set t_attend='';
			set t_dos= '';
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code ='';
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4b_ts2_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4b_ts2_tc7 WHERE t_temp_4b_ts2_tc7.test_status !=TRUE;
        
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_4b_ts2_tc7;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_4b_ts2_tc7) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_4b_ts2_tc7 where t_temp_4b_ts2_tc7.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_TS3_PL_STATS_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_TS3_PL_STATS_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_TS3_PL_STATS_MONTHLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts3_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying result and pl_monthly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts3_tc2_checkCountResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts3_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying paid money in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts3_tc3_checkPaidMoneyResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts3_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying recovered money in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts3_tc4_checkRecoveredMoneyResNPlMonthly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts3_tc5_checkEqualRedsResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying red counts in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts3_tc5_checkEqualRedsResNPlMontly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts3_tc6_distinctYearsCountResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying distinct years in result and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts3_tc6_distinctYearsCountResNPlMontly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts3_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_14_simpleProphy4b_ts3_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying table[emihealth_final.pl_simple_prophy_stats_monthly] by generating test table[test_cases_2.t_temp_4b_ts3_tc7].'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts3_tc7A_testTableGent_14_simpleProphy4b_ts3_tc7B_columnValidation/'
		);
	-- test_cases_2.t_temp_4b_ts3_tc7
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts3_tc1_checkPlMonthlyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts3_tc1_checkPlMonthlyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts3_tc1_checkPlMonthlyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_monthly_table_exists, pl_monthly_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_simple_prophy_stats_monthly') INTO pl_monthly_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_simple_prophy_stats_monthly') INTO pl_monthly_table_empty;
	
	IF (pl_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_monthly_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts3_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts3_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts3_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT default 0;
	DECLARE plm_count INT default 0;
	SELECT COUNT(*) into res_count FROM  emihealth_final.results_simple_prophy_4b WHERE isactive=1;
	SELECT SUM(procedure_count) into plm_count from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts3_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts3_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts3_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1;
	SELECT SUM(income) INTO plm_income from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts3_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts3_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts3_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts3_tc5_checkEqualRedsResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts3_tc5_checkEqualRedsResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts3_tc5_checkEqualRedsResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.results_simple_prophy_4b WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts3_tc6_distinctYearsCountResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts3_tc6_distinctYearsCountResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts3_tc6_distinctYearsCountResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1;
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts3_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts3_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts3_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.pl_simple_prophy_stats_monthly where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='4b_pl_monthly_weightage';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=10;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_4b_ts3_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_4b_ts3_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` tinyint(2) zerofill Not Null ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) zerofill NOT NULL,
	  `expec_number_of_violations`INT(4) zerofill DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_4b_ts3_tc7; 
	
	
	insert into test_cases_2.t_temp_4b_ts3_tc7(attend, month,year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,month,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1 order by (concat(month,year)) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_4b_ts3_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts3_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts3_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts3_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default "";
	declare t_month tinyint default 0;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default '';
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,month,year FROM test_cases_2.t_temp_4b_ts3_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_simple_prophy_4b` WHERE isactive=1 AND MONTH(results_simple_prophy_4b.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_simple_prophy_4b` where isactive=1 AND MONTH(results_simple_prophy_4b.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1 AND MONTH(results_simple_prophy_4b.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1 AND MONTH(results_simple_prophy_4b.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1 AND MONTH(results_simple_prophy_4b.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1 AND MONTH(results_simple_prophy_4b.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1 AND MONTH(results_simple_prophy_4b.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_simple_prophy_4b` 
			WHERE isactive=1 and MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_4b_ts3_tc7  WHERE attend=t_attend AND year=t_year and month=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_4b_ts3_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend and month=t_month and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set t_month=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code ='';
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4b_ts3_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4b_ts3_tc7 WHERE t_temp_4b_ts3_tc7.test_status !=TRUE;
	
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_4b_ts3_tc7;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_4b_ts3_tc7) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_4b_ts3_tc7 where t_temp_4b_ts3_tc7.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_TS4_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_TS4_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_TS4_PL_STATS_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts4_tc2_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying result and pl_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts4_tc2_checkCountResNPlYearly'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts4_tc3_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying paid money in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts4_tc3_checkPaidMoneyResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts4_tc4_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying recovered money in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts4_tc4_checkRecoveredMoneyResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts4_tc5_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying red counts in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts4_tc5_checkEqualRedsResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts4_tc6_distinctYearsCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying distinct years counts in result and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts4_tc6_distinctYearsCountResNPlYearly'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts4_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_14_simpleProphy4b_ts4_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying table[emihealth_final.pl_simple_prophy_stats_yearly] by generating test table[test_cases_2.t_temp_4b_ts4_tc7]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts4_tc7A_testTableGen'
		);
	-- test_cases_2.t_temp_4b_ts4_tc7
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts4_tc2_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts4_tc2_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts4_tc2_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT default 0;
	DECLARE ply_count INT default 0;
	SELECT COUNT(*) into res_count FROM  emihealth_final.results_simple_prophy_4b WHERE isactive=1;
	SELECT SUM(procedure_count) into ply_count from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts4_tc3_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts4_tc3_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts4_tc3_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts4_tc4_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts4_tc4_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts4_tc4_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts4_tc5_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts4_tc5_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts4_tc5_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.results_simple_prophy_4b WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts4_tc6_distinctYearsCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts4_tc6_distinctYearsCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts4_tc6_distinctYearsCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts4_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts4_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts4_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.pl_simple_prophy_stats_yearly where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='4b_pl_yearly_weightage';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_4b_ts4_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_4b_ts4_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_4b_ts4_tc7; 
	
	
	insert into test_cases_2.t_temp_4b_ts4_tc7(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_4b_ts4_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts4_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts4_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts4_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default null;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default null;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_4b_ts4_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_simple_prophy_4b` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_simple_prophy_4b` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_simple_prophy_4b WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_simple_prophy_4b` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_4b_ts4_tc7  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			-- 
			
			
			
			UPDATE test_cases_2.t_temp_4b_ts4_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code =null;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4b_ts4_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4b_ts4_tc7 WHERE t_temp_4b_ts4_tc7.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_4b_ts4_tc7;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_4b_ts4_tc7) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_4b_ts4_tc7 where t_temp_4b_ts4_tc7.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_TS5_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_TS5_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_TS5_DASHBOARD_DAILY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts5_tc2_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying dos counts in pl_daily and db_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts5_tc2_checkCountDosPlNDb'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts5_tc3_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying total counts in db_daily  and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts5_tc3_checkTotalCountPlNDb'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts5_tc4_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying ryg_counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts5_tc4_checkRygCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts5_tc5_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying red counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts5_tc5_checkRedCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts5_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying yellow counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts5_tc6_checkYellowCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts5_tc7_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying green counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts5_tc7_checkGreenCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts5_tc8A_testTableGen`(@suc);
	CALL test_cases_2.`t_14_simpleProphy4b_ts5_tc8B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_temp_4b_ts5_tc8]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts5_tc8A_testTableGen'
		);
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts5_tc1_checkDashboardDailyResExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts5_tc1_checkDashboardDailyResExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts5_tc1_checkDashboardDailyResExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_dialy_table_exists BOOL DEFAULT FALSE; 
	DECLARE db_dialy_table_empty INT DEFAULT NULL;
	SELECT t_check_if_table_exists_global_fun('dashboard_daily_results') INTO db_dialy_table_exists;
	
	select count(*) into db_dialy_table_empty from emihealth_final.dashboard_daily_results where type=14;
	
	IF ( db_dialy_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_dialy_table_empty = NULL) THEN
			SET test_detail='No record in table against algo id 14.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table against algo id 14.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts5_tc2_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts5_tc2_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts5_tc2_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=14;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts5_tc3_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts5_tc3_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts5_tc3_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=14;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts5_tc4_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts5_tc4_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts5_tc4_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=14;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts5_tc5_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts5_tc5_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts5_tc5_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=14;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts5_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts5_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts5_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=14;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts5_tc7_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts5_tc7_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts5_tc7_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.pl_simple_prophy_stats_daily WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=14;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts5_tc8A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts5_tc8A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts5_tc8A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 and type=14;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='4b_db_daily_weightage';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_4b_ts5_tc8;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_4b_ts5_tc8` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_4b_ts5_tc8; 
	
	
	insert into test_cases_2.t_temp_4b_ts5_tc8(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 and type=14) ORDER BY (date_of_service) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_4b_ts5_tc8;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts5_tc8B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts5_tc8B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts5_tc8B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT "";
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_temp_4b_ts5_tc8 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) into temp_expec_no_of_providers from emihealth_final.pl_simple_prophy_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)into temp_expec_total_red  from emihealth_final.pl_simple_prophy_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_simple_prophy_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_simple_prophy_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			select actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			into temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_4b_ts5_tc8
			where date_of_service=t_dos limit 1;
			
			if(temp_expec_no_of_providers !=temp_actual_no_of_providers) then
				set test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			else
				if(temp_expec_total_red !=temp_actual_total_red) then
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				else
					if(temp_expec_total_yellow !=temp_actual_total_yellow) then
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					else
						IF(temp_expec_total_green !=temp_actual_total_green) then
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						else
							set test_detail='Data   in   against   all    columns   is   ok.';
							set temp_test_status=true;
						end if;
					end if;
				end if;
						
			end if;
			     
			
			
			UPDATE test_cases_2.t_temp_4b_ts5_tc8 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			set t_dos='';
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        close my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4b_ts5_tc8;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4b_ts5_tc8 WHERE t_temp_4b_ts5_tc8.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts5_tc8;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_4b_ts5_tc8) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts5_tc8 WHERE t_temp_4b_ts5_tc8.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts7_tc2_countDistinctYearsPlMnDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying distinct years count in pl_monthly and db_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts7_tc2_countDistinctYearsPlMnDbM'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts7_tc3_checkTotalCountPlMndbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying total counts in db_monthly  and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts7_tc3_checkTotalCountPlMndbm'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts7_tc4_checkCountNoOfProvPlMndbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying providers count in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts7_tc4_checkCountNoOfProvPlMndbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts7_tc5_checkTotalRedCountsPlMnDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying red counts in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts7_tc5_checkTotalRedCountsPlMnDbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts7_tc6_checkTotalYellowCountsPlMnDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying yellow counts in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts7_tc6_checkTotalYellowCountsPlMnDbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts7_tc7_checkGreenCountsPlMnDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying green counts in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts7_tc7_checkGreenCountsPlMnDbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts7_tc8_checkTotalPaidMoneyCountPlMnDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying paid_money in db_monthly and pl_monthly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts7_tc8_checkTotalPaidMoneyCountPlMnDbM'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_14_simpleProphy4b_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_4b_ts7_tc9]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts7_tc9A_testTableGen'
		);
	-- test_cases_2.t_temp_4b_ts7_tc9	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts7_tc1_checkDashboardMonthlyResExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts7_tc1_checkDashboardMonthlyResExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts7_tc1_checkDashboardMonthlyResExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_monthly_table_exists, db_monthly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_monthly_results') INTO db_monthly_table_exists;
	
	select count(*) into db_monthly_table_empty from emihealth_final.dashboard_monthly_results where type=14;
	
	IF ( db_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_monthly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_monthly_results) against algo id 14.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_monthly_results) against algo id 14.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts7_tc2_countDistinctYearsPlMnDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts7_tc2_countDistinctYearsPlMnDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts7_tc2_countDistinctYearsPlMnDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=14;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts7_tc3_checkTotalCountPlMndbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts7_tc3_checkTotalCountPlMndbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts7_tc3_checkTotalCountPlMndbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=14;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts7_tc4_checkCountNoOfProvPlMndbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts7_tc4_checkCountNoOfProvPlMndbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts7_tc4_checkCountNoOfProvPlMndbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=14;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts7_tc5_checkTotalRedCountsPlMnDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts7_tc5_checkTotalRedCountsPlMnDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts7_tc5_checkTotalRedCountsPlMnDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_red_count INT DEFAULT 0;
	DECLARE dbm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_red_count from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dbm_red_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=14;
	
	IF(plm_red_count = dbm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_red_count>dbm_red_count)THEN
			SET test_detail=CONCAT(plm_red_count-dbm_red_count,' more red counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_red_count-plm_red_count,' more red counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts7_tc6_checkTotalYellowCountsPlMnDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts7_tc6_checkTotalYellowCountsPlMnDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts7_tc6_checkTotalYellowCountsPlMnDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_yellow_count INT DEFAULT 0;
	DECLARE dbm_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_yellow_count from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dbm_yellow_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=14;
	
	IF(plm_yellow_count = dbm_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_yellow_count>dbm_yellow_count)THEN
			SET test_detail=CONCAT(plm_yellow_count-dbm_yellow_count,' more yellow counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_yellow_count-plm_yellow_count,' more yellow counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts7_tc7_checkGreenCountsPlMnDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts7_tc7_checkGreenCountsPlMnDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts7_tc7_checkGreenCountsPlMnDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=14;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts7_tc8_checkTotalPaidMoneyCountPlMnDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts7_tc8_checkTotalPaidMoneyCountPlMnDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts7_tc8_checkTotalPaidMoneyCountPlMnDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_simple_prophy_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=14;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_monthly_results WHERE isactive=1 and type=14;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='4b_db_monthly_weightage';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_4b_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_4b_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_4b_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_4b_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=14) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_4b_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_4b_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_simple_prophy_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_simple_prophy_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_simple_prophy_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_simple_prophy_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_4b_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_4b_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_yellow=temp_actual_total_yellow=0; 
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4b_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4b_ts7_tc9 WHERE t_temp_4b_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_4b_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts7_tc9 WHERE t_temp_4b_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_TS9_DASHBOARD_YEARLY_RESUlTS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_TS9_DASHBOARD_YEARLY_RESUlTS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_TS9_DASHBOARD_YEARLY_RESUlTS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts9_tc2_countDistinctYearsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying pl_yearly and db_yearly table distinct years'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts9_tc2_countDistinctYearsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts9_tc3_checkTotalCountPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying pl_yearly and db_yearly table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts9_tc3_checkTotalCountPlYnDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts9_tc4_checkCountNoOfProvPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying no. of providers in db_yearly  and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts9_tc4_checkCountNoOfProvPlYnDbY'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts9_tc5_checkTotalRedCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying red counts in db_yearly and pl_yearly table'
			,tc_status
			,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts9_tc5_checkTotalRedCountsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts9_tc6_checkTotalYellowCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying yellow counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts9_tc6_checkTotalYellowCountsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts9_tc7_checkGreenCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying green counts in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts9_tc7_checkGreenCountsPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts9_tc8_checkTotalPaidMoneyCountPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying paid money in db_yearly and pl_yearly table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts9_tc8_checkTotalPaidMoneyCountPlYnDbY'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_14_simpleProphy4b_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			14
			,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_4b_ts9_tc9]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_14_simpleProphy4b_ts9_tc9A_testTableGen/t_14_simpleProphy4b_ts9_tc9B_columnValidation'
		);
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts9_tc1_checkDashboardYearlyResTabExists&Pop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts9_tc1_checkDashboardYearlyResTabExists&Pop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts9_tc1_checkDashboardYearlyResTabExists&Pop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_yearly_table_exists, db_yearly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_yearly_results') INTO db_yearly_table_exists;
	
	select count(*) into db_yearly_table_empty from emihealth_final.dashboard_yearly_results where type=14;
	
	IF ( db_yearly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_yearly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_yearly_results) against algo id 14.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_yearly_results) against algo id 14.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts9_tc2_countDistinctYearsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts9_tc2_countDistinctYearsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts9_tc2_countDistinctYearsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=14;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts9_tc3_checkTotalCountPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts9_tc3_checkTotalCountPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts9_tc3_checkTotalCountPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=14;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts9_tc4_checkCountNoOfProvPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts9_tc4_checkCountNoOfProvPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts9_tc4_checkCountNoOfProvPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=14;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts9_tc5_checkTotalRedCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts9_tc5_checkTotalRedCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts9_tc5_checkTotalRedCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=14;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts9_tc6_checkTotalYellowCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts9_tc6_checkTotalYellowCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts9_tc6_checkTotalYellowCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=14;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts9_tc7_checkGreenCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts9_tc7_checkGreenCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts9_tc7_checkGreenCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=14;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts9_tc8_checkTotalPaidMoneyCountPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts9_tc8_checkTotalPaidMoneyCountPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts9_tc8_checkTotalPaidMoneyCountPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_simple_prophy_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=14;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts9_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts9_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts9_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=14;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='4b_db_yearly_weightage';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_4b_ts9_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_4b_ts9_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_4b_ts9_tc9; 
	
	
	insert into test_cases_2.t_temp_4b_ts9_tc9(year,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=14) ORDER BY(year)desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_4b_ts9_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14_simpleProphy4b_ts9_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14_simpleProphy4b_ts9_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14_simpleProphy4b_ts9_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_4b_ts9_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_simple_prophy_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_simple_prophy_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_simple_prophy_stats_yearly WHERE YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_simple_prophy_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_4b_ts9_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_4b_ts9_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_4b_ts9_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_4b_ts9_tc9 WHERE t_temp_4b_ts9_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts9_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_4b_ts9_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_4b_ts9_tc9 WHERE t_temp_4b_ts9_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_14________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_14________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_14________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_MAIN`()
BEGIN
call t_15_unJustFMX_TS1_SOURCE_TABLE();
CALL t_15_unJustFMX_TS2_RESULT_TABLE();
CAll t_15_unJustFMX_TS3_PL_DAILY_STATS_TABLE();
call t_15_unJustFMX_TS4_DASHBOARD_DAILY_TABLE();
call t_15_unJustFMX_TS5_PL_MONTHLY_STATS_TABLE();
call t_15_unJustFMX_TS6_PL_STATS_YEARLY_TABLE();
call t_15_unJustFMX_TS7_DASHBOARD_MONTHLY_RES_TABLE();
call t_15_unJustFMX_TS8_DASHBOARD_YEARLY_RESULTS_TABLE();
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_TS1_SOURCE_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts1_tc1_baseSrcCntEqual`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying base and source table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts1_tc1_baseSrcCntEqual'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts1_tc2_impColValueSrcNotNull`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying important column values in source table are not null'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts1_tc2_impColValueSrcNotNull'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts1_tc3_resHasD7140Only`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying source table contains only D7140 procedure codes'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts1_tc3_resHasD7140Only'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts1_tc4_srcHasUniqeAttendID`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying source table contains  Unique Attend ID'
			,tc_status,tc_detail
			,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts1_tc4_srcHasUniqeAttendID'
		);
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts1_tc1_baseSrcCntEqual` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts1_tc1_baseSrcCntEqual` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts1_tc1_baseSrcCntEqual`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	
	SELECT COUNT(*)into src_count FROM emihealth_final.src_full_mouth_xrays where procedure_code in('D0210','D0330');
	SELECT COUNT(*) into base_count FROM emihealth_final.procedure_performed where proc_code in('D0210','D0330') and is_invalid=0;
	
	if(src_count=base_count) then
		set test_status=true;
		set test_detail='Equal counts found in base and source table.';
	else
		set test_status=False;
		if(src_count>base_count)then
			set test_detail=concat(src_count-base_count,' more counts  found in source table then base table.');
		else
			set test_detail=concat(base_count-src_count,' more counts found in base table then source table.');
		end if;
	end if;
	set success=true;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts1_tc2_impColValueSrcNotNull` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts1_tc2_impColValueSrcNotNull` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts1_tc2_impColValueSrcNotNull`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a,count_b INT default 0;
	DECLARE total_count INT default 0;
	SELECT COUNT(*) INTO count_a FROM emihealth_final.src_full_mouth_xrays AS a 
	WHERE (a.`rendering_provider_npi`='' or a.`pid`='' or a.`date_of_service`='');
	
	
	
	set total_count = count_a + count_b;
	
	IF(total_count=0) THEN
		SET test_status=TRUE;
		SET test_detail='No record found in source table having null value in important attributes.';
	ELSE
		SET test_status=FALSE;
	        SET test_detail=CONCAT(total_count,' records found in source table having null value in important attributes.');	
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts1_tc3_resHasD7140Only` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts1_tc3_resHasD7140Only` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts1_tc3_resHasD7140Only`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE _count INT;
	SELECT COUNT(*)into _count FROM emihealth_final.src_primary_tooth_ext WHERE proc_code!='D7140';
	IF (_count=0) THEN
		SET test_status = TRUE;
		SET test_detail='No record found without procedure code (D7140) in source table.';
	ELSE
		SET test_status = FALSE;
		SET test_detail=CONCAT(_count,' records found without procedure code (D7140) in source table.');
	END IF;
	SET success=TRUE;
end */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts1_tc4_srcHasUniqeAttendID` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts1_tc4_srcHasUniqeAttendID` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts1_tc4_srcHasUniqeAttendID`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a INT;
	DECLARE count_b INT;
	SELECT COUNT(DISTINCT(rendering_provider_npi)) into count_a FROM emihealth_final.src_full_mouth_xrays;
        SELECT COUNT(DISTINCT(CONCAT(rendering_provider_npi,attend_name))) into count_b FROM emihealth_final.src_full_mouth_xrays;
	
	IF(count_a=count_b) THEN
		SET test_status=TRUE;
		SET test_detail='Attend ID is unique in source table.';
	ELSE
		SET test_status=FALSE;
		SET test_detail='Attend Id is not unique in source table.';	
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_TS2_RESULT_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts2_tc1_is_impColValueResNotNull`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying important columns are not null in result table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts2_tc1_is_impColValueResNotNull'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts2_tc2_resHasUniqeAttendID`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying result unique attend ids'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts2_tc2_resHasUniqeAttendID'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts2_tc3_resHasD0210D0330Only`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying result has d0210 and d0330 proc code only'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts2_tc3_resHasD0210D0330Only'
		);
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts2_tc4_checkRsnLvlRYGStatusStatusSame`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying Reason level RYG Status'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts2_tc4_checkRsnLvlRYGStatusStatusSame'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts2_tc5A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts2_tc5B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying Columns for result table[emihealth_final.results_full_mouth_xrays] by generating test table[test_cases_2.t_temp_15_unJustFMX_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts2_tc5A_testTableGen/t_15_unJustFMX_ts2_tc5B_resReasonsValidation'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts2_tc1_is_impColValueResNotNull` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts2_tc1_is_impColValueResNotNull` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts2_tc1_is_impColValueResNotNull`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a,count_b INT default 0;
	DECLARE total_count INT;
	SELECT COUNT(*) INTO count_a FROM emihealth_final.results_full_mouth_xrays AS res WHERE (res.`attend`='' or res.`mid`='' or res.`date_of_service`='' )and isactive=1;
	SELECT COUNT(*) INTO count_b FROM emihealth_final.results_full_mouth_xrays AS res WHERE (res.`reason_level`='' or res.`ryg_status`='' OR res.`proc_code`='') and isactive=1;
	-- set count_a=4; -- for testing
	set total_count = count_a + count_b;
	
	IF(total_count=0) THEN
		SET test_status=TRUE;
		SET test_detail='No record found in result table having null value in important attributes.';
	ELSE
		SET test_status=FALSE;
	        SET test_detail=CONCAT(total_count,' records found in result table having null value in important attributes.');	
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts2_tc2_resHasUniqeAttendID` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts2_tc2_resHasUniqeAttendID` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts2_tc2_resHasUniqeAttendID`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a INT;
	DECLARE count_b INT;
	SELECT COUNT(DISTINCT(attend)) into count_a FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1;
        SELECT COUNT(DISTINCT(CONCAT(attend,attend_name))) into count_b FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1;
	-- set src_count=4; -- for testing
	IF(count_a=count_b) THEN
		SET test_status=TRUE;
		SET test_detail='Attend ID is unique in source table.';
	ELSE
		SET test_status=FALSE;
		SET test_detail='Attend Id is not unique in source table.';	
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts2_tc3_resHasD0210D0330Only` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts2_tc3_resHasD0210D0330Only` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts2_tc3_resHasD0210D0330Only`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE res_count INT;
	SELECT COUNT(*)into res_count FROM emihealth_final.results_full_mouth_xrays WHERE proc_code NOT IN('D0210','D0330');
	IF (res_count=0) THEN
		SET test_status = TRUE;
		SET test_detail='No record found without procedure code (D0210,D0330) in result table.';
	ELSE
		SET test_status = FALSE;
		SET test_detail=CONCAT(res_count,' records found without procedure code (D0210,D0330) in result table.');
	END IF;
	SET success=TRUE;
end */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts2_tc4_checkRsnLvlRYGStatusStatusSame` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts2_tc4_checkRsnLvlRYGStatusStatusSame` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts2_tc4_checkRsnLvlRYGStatusStatusSame`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
        DECLARE count_1,count_2,count_3,count_4,count_5 INT;
	DECLARE reason_cnt VARCHAR(10) DEFAULT '';
	Declare pass_flag bool default True;
	
	SELECT count(*) into count_1 FROM emihealth_final.results_full_mouth_xrays WHERE reason_level = 1 AND (ryg_status != 'green' OR STATUS != 'Allow D0210 or D0330') AND isactive=1;
        SELECT count(*) INTO count_2 FROM emihealth_final.results_full_mouth_xrays WHERE reason_level = 2 AND (ryg_status != 'green' OR STATUS != 'Allow D0210 or D0330') AND isactive=1;
	SELECT count(*) INTO count_3 FROM emihealth_final.results_full_mouth_xrays WHERE reason_level = 3 AND (ryg_status != 'green' OR STATUS != 'Allow D0210 or D0330') AND isactive=1;
	SELECT count(*) INTO count_4 FROM emihealth_final.results_full_mouth_xrays WHERE reason_level = 4 AND (ryg_status != 'green' OR STATUS != 'Allow D0210 or D0330') AND isactive=1;
	sELECT count(*) INTO count_5 FROM emihealth_final.results_full_mouth_xrays WHERE reason_level = 5 AND (ryg_status != 'red' OR STATUS != 'Disallow D0210, D0330') AND isactive=1;
	
	-- set count_1=1;
	-- set count_2=1;
	-- set count_3=1;
	
	IF(count_1 !=0 ) THEN
		SET reason_cnt='[1]';
		set pass_flag=false;
	END IF;
	IF(count_2 !=0 ) THEN
		SET reason_cnt=CONCAT(reason_cnt,'[2]');
		SET pass_flag=FALSE;
	END IF;
	IF(count_3 !=0 ) THEN
		SET reason_cnt=CONCAT(reason_cnt,'[3]');
		SET pass_flag=FALSE;
	END IF;
	IF(count_4 !=0 ) THEN
		SET reason_cnt=CONCAT(reason_cnt,'[4]');
		SET pass_flag=FALSE;
	END IF;
	IF(count_5 !=0 ) THEN
		SET reason_cnt=CONCAT(reason_cnt,'[5]');
		SET pass_flag=FALSE;
	END IF;
	
	-- Setting Output Parameters
	if(pass_flag=True) then
		set test_status=true;
		set test_detail='Colunms(reason_level, ryg_status, status) are representing same output.';
	else
		SET test_status=False;
		SET test_detail=concat('In reasons(',reason_cnt,'), Colunms(reason_level, ryg_status, status) do not represent same output.');
	end if;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts2_tc5A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts2_tc5A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts2_tc5A_testTableGen`(out success Bool)
BEGIN
	declare reason_percent decimal(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
       
        drop table if exists t_temp_15_unJustFMX_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_15_unJustFMX_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(10) ZEROFILL NOT NULL,
	  `attend` varchar(20) Default Null,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` datetime default Null,
	  `proc_code`VARCHAR(50) DEFAULT NULL,
	  `tooth_no` VARCHAR(15) DEFAULT NULL,
	  `actual_reason_level` int(2) default Null,
	  `expected_reason_level` INT(2) DEFAULT NULL,
	  `test_status` bool Default Null,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_15_unJustFMX_test_table;
        
        set iterator = 1;
        while(iterator < 6) Do
		SET selected_reason= iterator;
		select reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  where algo_id=15 and reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) into reason_total_count FROM emihealth_final.`results_full_mouth_xrays` where reason_level=selected_reason;
		
		IF(reason_total_count < 100) then
			set reason_sample_count=reason_total_count;
		else
			set reason_sample_count=(reason_total_count*reason_percent)/100;
		end if;
		
		insert into test_cases_2.t_temp_15_unJustFMX_test_table(res_id,attend,mid,date_of_service,proc_code,tooth_no,actual_reason_level)
		select id,attend,mid,date_of_service,proc_code,'',reason_level
		FROM emihealth_final.results_full_mouth_xrays where reason_level=selected_reason and isactive=1 ORDER BY RAND() limit reason_sample_count;
		
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_15_unJustFMX_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts2_tc5B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts2_tc5B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts2_tc5B_resReasonsValidation`(OUT success int ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  -- variable with t_ are used for storting data from test table
  DECLARE t_id BIGINT(20);
  DECLARE t_attend, t_mid VARCHAR (50) DEFAULT "" ;
  DECLARE t_dos DATETIME DEFAULT null;
  DECLARE t_proc_code VARCHAR(15); 
  
  
  DECLARE is_oldPatient, is_inLast5year, has_D4xxx, has_D3xxx INT DEFAULT 0;  
  
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id, MID,date_of_service,proc_code FROM test_cases_2.t_temp_15_unJustFMX_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id, t_mid,t_dos,t_proc_code;
		    SET has_D3xxx=0;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    IF( (t_mid !='') AND (t_mid IS NOT NULL) AND (t_dos != '' ) AND (t_dos IS NOT NULL) and (t_proc_code != '') and (t_proc_code is not null) )THEN
			    -- Checking for patient is old or not
			    SELECT COUNT(*) INTO is_oldPatient FROM emihealth_final.procedure_performed WHERE MID=t_mid  AND date_of_service < t_dos AND (date_of_service !='' OR date_of_service IS NOT NULL)AND LENGTH(proc_code)=5 AND SUBSTRING(proc_code,1,1)='D' AND is_invalid=0;
			    IF(is_oldPatient=0) THEN
				 -- >> Reason 1
				 UPDATE test_cases_2.t_temp_15_unJustFMX_test_table 
				 SET expected_reason_level=1, 
				     test_detail='Patient is not old.'
				  WHERE id=t_id;
			    ELSE
					-- Checking for D0330 0r D0210 over last 5 years 
						-- QUERY STARTS
					SELECT COUNT(*) INTO is_inLast5year 
					FROM emihealth_final.src_full_mouth_xrays 
					WHERE pid=t_mid 
					AND date_of_service != t_dos 
					AND procedure_code IN ('D0330','D0210') 
					AND (date_of_service BETWEEN DATE_SUB(t_dos,INTERVAL 5 YEAR)  AND t_dos );
						-- QUERY ENDS
					IF(is_inLast5year = 0 ) THEN
						-- >> Reason 2
							-- QUERY STARTS
						UPDATE test_cases_2.t_temp_15_unJustFMX_test_table 
						SET expected_reason_level=2 , 
						    test_detail=CONCAT('No procedure code(D0330,D0210) found within [',DATE_ADD(t_dos,INTERVAL 1 DAY),' to ',DATE_SUB(t_dos,INTERVAL 5 YEAR),'].') 
						WHERE id=t_id;
							-- QUERY ENDS
					ELSE
						-- checking D4xxx(except 4910) over last 3 years
							-- QUERY STARTS
						SELECT COUNT(*)  INTO has_D4xxx 
						FROM emihealth_final.src_full_mouth_xrays 
						WHERE pid=t_mid AND procedure_code != 'D4910' 
						AND  procedure_code LIKE 'D4%' 
						AND (date_of_service BETWEEN  DATE_SUB(t_dos,INTERVAL 3 YEAR) AND t_dos);
							-- QUERY ENDS
						IF(has_D4xxx != 0) THEN
							-- >> Reason 3
								-- QUERY STARTS
							UPDATE test_cases_2.t_temp_15_unJustFMX_test_table 
							SET expected_reason_level=3 , 
							    test_detail=CONCAT('Found procedure code like D4xxx (Except D4910) within [',DATE_SUB(t_dos,INTERVAL 3 YEAR),' to ',DATE_ADD(t_dos,INTERVAL 1 DAY ),'].') 
							WHERE id=t_id;
								-- QUERY ENDS
						ELSE
							-- checking D3xxx over last 3 years
								-- QUERY STARTS
							SELECT COUNT(DISTINCT(claim_id))  INTO has_D3xxx 
							FROM emihealth_final.src_full_mouth_xrays 
							WHERE pid=t_mid 
							AND  procedure_code LIKE 'D3%' 
							AND (date_of_service BETWEEN  DATE_SUB(t_dos,INTERVAL 3 YEAR) AND t_dos)
							AND (date_of_service !='' OR date_of_service IS NOT NULL); 
								-- QUERY ENDS
							IF IFNULL(has_D3xxx, 0) >= 3 THEN
									-- QUERY STARTS
								UPDATE test_cases_2.t_temp_15_unJustFMX_test_table 
								SET expected_reason_level=4 , 
								test_detail=CONCAT('Found more than 3 claims procedure code like D3xxx within [',DATE_SUB(t_dos,INTERVAL 3 YEAR),' to ',t_dos,'].') 
								WHERE id=t_id;
									-- QUERY ENDS
							 ELSE
									-- QUERY STARTS
								UPDATE test_cases_2.t_temp_15_unJustFMX_test_table 
								SET expected_reason_level=5 , 
								test_detail=CONCAT('No procedure code like D3xxx found within [',DATE_SUB(t_dos,INTERVAL 3 YEAR),' to ',t_dos,'].') 
								WHERE id=t_id;
									-- QUERY ENDS
							END IF; -- reason 4
						END IF; -- reason 3
						  
					END IF; -- reason 2
				
			    END IF; -- reason 1
		    else
			UPDATE test_cases_2.t_temp_15_unJustFMX_test_table 
			SET expected_reason_level=-1 , 
			    test_detail='Invalid Data.' 
			WHERE id=t_id;
		    end if;
	        END LOOP ;
  CLOSE my_cursor ;
  
  UPDATE test_cases_2.t_temp_15_unJustFMX_test_table SET test_status=TRUE WHERE actual_reason_level=expected_reason_level;
  UPDATE test_cases_2.t_temp_15_unJustFMX_test_table SET test_status=FALSE WHERE actual_reason_level!=expected_reason_level;
  
  -- setting up algo success flag
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_15_unJustFMX_test_table WHERE expected_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	-- setting up (ok and defective) records
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_15_unJustFMX_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_15_unJustFMX_test_table WHERE  actual_reason_level != expected_reason_level;
        -- set count_defective_records=12; -- for testing
	IF(count_defective_records=0) THEN
		SET test_status=TRUE;
		SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
	ELSE
		SET test_status=FALSE;
		SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
	END IF;
  END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying result and pl_daily table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts3_tc4_resPlDailyCount'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying paid money in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts3_tc5_resPlDailyEqualPaidMoney'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts3_tc6_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying recovered money in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts3_tc6_resPlDailyEqualRecoveredMoney'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying red counts in result and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts3_tc7_resPlDailyEqualReds'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts3_tc8_resPlDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying result and pl daily distinct years count'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts3_tc8_resPlDailyDistinctYearsCount'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying table[emihealth_final.pl_full_mouth_xrays_daily] by generating test table[test_cases_2.t_15_pl_temp].'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts3_tc2_plTestTable'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts3_tc1_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts3_tc1_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts3_tc1_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT "";
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT '';
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_15_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_full_mouth_xrays WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_full_mouth_xrays WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_full_mouth_xrays WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_full_mouth_xrays WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_full_mouth_xrays WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_full_mouth_xrays WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_full_mouth_xrays WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_15_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_15_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend='';
			SET t_dos= '';
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code ='';
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_15_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_15_pl_temp WHERE t_15_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_15_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_15_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_15_pl_temp WHERE t_15_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts3_tc2_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts3_tc2_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts3_tc2_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_fmx_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='fmx';
	
	SET required_rows = weightage*total_counts/100;
	
	SET res=required_rows;
	
	
	 DROP TABLE IF EXISTS t_15_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_15_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_15_pl_temp; 
	
	
	insert into test_cases_2.t_15_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_fmx_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_15_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts3_tc3_checkPlDailyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts3_tc3_checkPlDailyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts3_tc3_checkPlDailyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_daily_table_exists, pl_daily_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_fmx_stats_daily') INTO pl_daily_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_fmx_stats_daily') INTO pl_daily_table_empty;
	
	IF (pl_daily_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_daily_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.results_full_mouth_xrays WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_fmx_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_full_mouth_xrays` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_fmx_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts3_tc6_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts3_tc6_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts3_tc6_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_full_mouth_xrays` WHERE isactive=1;
	SELECT SUM(recovered_money) INTO pld_rec_money FROM emihealth_final.`pl_fmx_stats_daily` WHERE isactive=1;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_full_mouth_xrays` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_fmx_stats_daily` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_full_mouth_xrays` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_fmx_stats_daily` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying pl_daily and db_daily table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts4_tc4_checkCountDosPlNDb'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying paid money db_daily  and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts4_tc5_checkTotalCountPlNDb'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying recovered money in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts4_tc6_checkRygCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying red counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts4_tc7_checkRedCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts4_tc8_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying green counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts4_tc8_checkGreenCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			15
			,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_15_dashboard_temp]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_15_unJustFMX_ts4_tc2_dashboardTestTable/t_15_unJustFMX_ts4_tc1_dashboardDailyValidation'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts4_tc1_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts4_tc1_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts4_tc1_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT "";
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_15_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_fmx_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_fmx_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_fmx_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_fmx_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_15_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_15_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos='';
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_15_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_15_dashboard_temp WHERE t_15_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_15_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_15_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_15_dashboard_temp WHERE t_15_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts4_tc2_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts4_tc2_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts4_tc2_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=15;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='fmx';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_15_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_15_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_15_dashboard_temp; 
	
	
	insert into test_cases_2.t_15_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		from emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=15) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_15_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts4_tc3_checkDashboardDailyResExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts4_tc3_checkDashboardDailyResExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts4_tc3_checkDashboardDailyResExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_dialy_table_exists BOOL DEFAULT FALSE; 
	DECLARE db_dialy_table_empty INT DEFAULT NULL;
	SELECT t_check_if_table_exists_global_fun('dashboard_daily_results') INTO db_dialy_table_exists;
	
	select count(*) into db_dialy_table_empty from emihealth_final.dashboard_daily_results where type=15;
	
	IF ( db_dialy_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_dialy_table_empty = NULL) THEN
			SET test_detail='No record in table against algo id 15.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table against algo id 15.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts4_tc4_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts4_tc4_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts4_tc4_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.pl_fmx_stats_daily WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=15;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_fmx_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=15;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_fmx_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=15;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_fmx_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=15;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts4_tc8_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts4_tc8_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts4_tc8_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_fmx_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=15;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying result and pl_monthly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts5_tc2_checkCountResNPlMonthly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying paid money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_15_unJustFMX_ts5_tc3_checkPaidMoneyResNPlMonthly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying recovered money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_15_unJustFMX_ts5_tc4_checkRecoveredMoneyResNPlMonthly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts5_tc5_checkEqualRedsResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying red counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts5_tc5_checkEqualRedsResNPlMontly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts5_tc6_distinctYearsCountResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying distinct years counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts5_tc6_distinctYearsCountResNPlMontly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.pl_full_mouth_xrays_stats_monthly] by generating test table[test_cases_2.t_temp_15_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts5_tc7A_testTableGen/ t_15_unJustFMX_ts5_tc7B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts5_tc1_checkPlMonthlyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts5_tc1_checkPlMonthlyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts5_tc1_checkPlMonthlyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_monthly_table_exists, pl_monthly_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_fmx_stats_monthly') INTO pl_monthly_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_fmx_stats_monthly') INTO pl_monthly_table_empty;
	
	IF (pl_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_monthly_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_full_mouth_xrays` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO plm_count FROM emihealth_final.`pl_fmx_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_fmx_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_fmx_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts5_tc5_checkEqualRedsResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts5_tc5_checkEqualRedsResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts5_tc5_checkEqualRedsResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_full_mouth_xrays WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.`pl_fmx_stats_monthly` WHERE isactive=1;
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts5_tc6_distinctYearsCountResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts5_tc6_distinctYearsCountResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts5_tc6_distinctYearsCountResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.`pl_fmx_stats_monthly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_fmx_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_FMX';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_15_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_15_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_15_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_15_ts5_tc7(attend, MONTH,YEAR, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,MONTH,YEAR,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		FROM emihealth_final.`pl_fmx_stats_monthly` WHERE isactive=1 ORDER BY (CONCAT(MONTH,YEAR)) DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_15_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check, temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_15_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.`results_full_mouth_xrays` WHERE isactive=1 AND MONTH(results_full_mouth_xrays.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.`results_full_mouth_xrays` WHERE isactive=1 AND MONTH(results_full_mouth_xrays.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1 AND MONTH(results_full_mouth_xrays.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1 AND MONTH(results_full_mouth_xrays.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1 AND MONTH(results_full_mouth_xrays.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1 AND MONTH(results_full_mouth_xrays.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				SET temp_expec_color_code='green';
			END IF;
	
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) INTO temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_full_mouth_xrays` 
			WHERE isactive=1 AND MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_15_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_15_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_15_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_15_ts5_tc7 WHERE t_temp_15_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_15_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_15_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_15_ts5_tc7 WHERE t_temp_15_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_TS6_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_TS6_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_TS6_PL_STATS_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying result and pl_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts6_tc1_checkCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying paid money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts6_tc2_checkPaidMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying recovered money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts6_tc3_checkRecoveredMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying red counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts6_tc4_checkEqualRedsResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts6_tc5_distinctYearsCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying distinct years counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts6_tc5_distinctYearsCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.pl_full_mouth_xrays_stats_yearly] by generating test table[test_cases_2.t_temp_15_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_15_unJustFMX_ts6_tc6A_testTableGen/t_15_unJustFMX_ts6_tc6B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_full_mouth_xrays` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_fmx_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_full_mouth_xrays` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_fmx_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_full_mouth_xrays`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_fmx_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_full_mouth_xrays` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_fmx_stats_yearly` WHERE isactive=1;
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts6_tc5_distinctYearsCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts6_tc5_distinctYearsCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts6_tc5_distinctYearsCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.`results_full_mouth_xrays` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.`pl_fmx_stats_yearly` WHERE isactive=1;
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_fmx_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_FMX';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_15_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_15_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_15_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_15_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_fmx_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_15_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check , temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_15_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_full_mouth_xrays` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_full_mouth_xrays` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_full_mouth_xrays WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
			
				if(temp_g_check!= 0) THEN	
					set temp_expec_color_code='green';
					
			End IF;			
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_full_mouth_xrays` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_15_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_15_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_15_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_15_ts6_tc6 WHERE t_temp_15_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_15_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_15_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_15_ts6_tc6 where t_temp_15_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_TS7_DASHBOARD_MONTHLY_RES_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_TS7_DASHBOARD_MONTHLY_RES_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_TS7_DASHBOARD_MONTHLY_RES_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying pl_monthly and db_monthly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts7_tc2_countDistinctYearsPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying paid money db_monthly  and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts7_tc3_checkTotalCountPlMNdbm ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying recovered money in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts7_tc4_checkCountNoOfProvPlMNdbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts7_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying red counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_15_unJustFMX_ts7_tc6_checkYellowCountsPlNDbTables');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts7_tc7_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying yellow counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts7_tc7_checkGreenCountsPlMNDbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying green counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_15_unJustFMX_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_15_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts7_tc9A_testTableGen/t_15_unJustFMX_ts7_tc9B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts7_tc1_checkDashboardMonthlyResExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts7_tc1_checkDashboardMonthlyResExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts7_tc1_checkDashboardMonthlyResExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_monthly_table_exists, db_monthly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_monthly_results') INTO db_monthly_table_exists;
	
	select count(*) into db_monthly_table_empty from emihealth_final.dashboard_monthly_results where type=15;
	
	IF ( db_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_monthly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_monthly_results) against algo id 15.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_monthly_results) against algo id 15.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_fmx_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=15;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_fmx_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=15;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_fmx_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=15;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_fmx_stats_monthly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=15;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts7_tc7_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts7_tc7_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts7_tc7_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_fmx_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=15;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_fmx_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=15;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 and type=15;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_FMX';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_15_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_15_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_15_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_15_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=15) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_15_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_15_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_fmx_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_fmx_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_fmx_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_15_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						
					END IF;
				END IF;
						
			END IF;
			     	
			UPDATE test_cases_2.t_temp_15_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_15_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_15_ts7_tc9 WHERE t_temp_15_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_15_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_15_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_15_ts7_tc9 WHERE t_temp_15_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_TS8_DASHBOARD_YEARLY_RESULTS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_TS8_DASHBOARD_YEARLY_RESULTS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_TS8_DASHBOARD_YEARLY_RESULTS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts8_tc2_countDistinctYearsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts8_tc4_checkCountNoOfProvPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts8_tc5_checkTotalRedCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts8_tc6_checkTotalYellowCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying yellow counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts8_tc6_checkTotalYellowCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts8_tc7_checkGreenCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying Paid money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_15_ts9_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_15_unJustFMX_ts9_tc9A_testTableGen/t_15_unJustFMX_ts9_tc9B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts8_tc1_checkDashboardYearlyResTabExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_yearly_table_exists, db_yearly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_yearly_results') INTO db_yearly_table_exists;
	
	select count(*) into db_yearly_table_empty from emihealth_final.dashboard_yearly_results where type=15;
	
	IF ( db_yearly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_yearly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_yearly_results) against algo id 15.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_yearly_results) against algo id 15.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.pl_fmx_stats_yearly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=15;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.pl_fmx_stats_yearly WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=15;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.pl_fmx_stats_yearly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=15;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_fmx_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=15;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_fmx_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=15;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_fmx_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=15;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_fmx_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=15;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;	
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts9_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts9_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts9_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=15;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_FMX';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_15_ts9_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_15_ts9_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_15_ts9_tc9; 
	
	
	insert into test_cases_2.t_temp_15_ts9_tc9(year,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=15) ORDER BY(year)desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_15_ts9_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15_unJustFMX_ts9_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15_unJustFMX_ts9_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15_unJustFMX_ts9_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_15_ts9_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_fmx_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_fmx_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
						
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_fmx_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_15_ts9_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_15_ts9_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_15_ts9_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_15_ts9_tc9 WHERE t_temp_15_ts9_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_15_ts9_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_15_ts9_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_15_ts9_tc9 WHERE t_temp_15_ts9_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_15________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_15________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_15________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_MAIN`()
BEGIN
call t_16_complexPerio_TS1_SOURCE_TABLE();
CALL t_16_complexPerio_TS2_RESULT_TABLE();
CALL t_16_complexPerio_TS3_PL_DAILY_STATS_TABLE();
CALL t_16_complexPerio_TS4_DASHBOARD_DAILY_TABLE();
CALL t_16_complexPerio_TS5_PL_MONTHLY_STATS_TABLE();
CALL t_16_complexPerio_TS6_PL_STATS_YEARLY_TABLE();
CALL t_16_complexPerio_TS7_DASHBOARD_MONTHLY_RES_TABLE();
CALL t_16_complexPerio_TS8_DASHBOARD_YEARLY_RESULTS_TABLE();
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_TS1_SOURCE_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts1_tc1_baseSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying base and source table counts.',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts1_tc1_baseSrcCount ');
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts1_tc1_baseSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts1_tc1_baseSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts1_tc1_baseSrcCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	SELECT COUNT(*) INTO src_count FROM emihealth_final.src_complex_perio;
	SELECT COUNT(*) INTO base_count FROM emihealth_final.procedure_performed WHERE proc_code IN('D0150','D0180','D0120','D0210') AND is_invalid=0;
	
	IF(src_count=base_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in base and source table ';
	ELSE
		SET test_status=FALSE;
		IF(src_count>base_count)THEN
			SET test_detail=CONCAT(src_count-base_count,' more counts  found in source table then base table .');
		ELSE
			SET test_detail=CONCAT(base_count-src_count,' more counts found in base table then source table .');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts2_tc1_resSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying Result and source counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts2_tc1_resSrcCount ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts2_tc4_checkSpecialty`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying attend has same specialty',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_13_simpleProphy4a_ts2_tc4_checkSpecialty ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts2_tc2A_testTableGen`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts2_tc2B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying Columns for result table[emihealth_final.results_complex_perio] by generating test table[test_cases_2.t_temp_16_complex_perio_test_table]'
	,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_16_complexPerio_ts2_tc2A_testTableGen/t_16_complexPerio_ts2_tc2B_resReasonsValidation');
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts2_tc1_resSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts2_tc1_resSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts2_tc1_resSrcCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE res_count INT;
	SELECT COUNT(*) INTO src_count FROM emihealth_final.src_complex_perio WHERE proc_code = 'D0180';
	SELECT COUNT(*) INTO res_count FROM emihealth_final.`results_complex_perio` WHERE isactive = '1';
	
	IF(src_count=res_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and source table ';
	ELSE
		SET test_status=FALSE;
		IF(src_count>res_count)THEN
			SET test_detail=CONCAT(src_count-res_count,' more counts  found in source table then res table .');
		ELSE
			SET test_detail=CONCAT(res_count-src_count,' more counts found in res table then source table .');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts2_tc2A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts2_tc2A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts2_tc2A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE reason_percent DECIMAL(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        DECLARE selected_reason INT;
        DECLARE iterator INT;
       
        DROP TABLE IF EXISTS t_temp_16_complex_perio_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_16_complex_perio_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(10) ZEROFILL NOT NULL,
	  `attend` VARCHAR(20) DEFAULT NULL,
	  `specialty` VARCHAR(20) DEFAULT NULL,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` DATETIME DEFAULT NULL,
	  `proc_code`VARCHAR(50) DEFAULT NULL,
	  `actual_reason_level` INT(2) DEFAULT NULL,
	  `expected_reason_level` INT(2) DEFAULT NULL,
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_16_complex_perio_test_table;
        
        SET iterator = 1;
        WHILE(iterator < 7) DO
		SET selected_reason= iterator;
		SELECT reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=16 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_complex_perio` WHERE reason_level=selected_reason;
		
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		
		insert into test_cases_2.t_temp_16_complex_perio_test_table(res_id,attend,specialty,MID,date_of_service,proc_code,actual_reason_level)
		SELECT id,attend,specialty,MID,date_of_service,proc_code,reason_level
		FROM emihealth_final.results_complex_perio WHERE reason_level=selected_reason AND isactive=1 ORDER BY RAND() LIMIT reason_sample_count;
		
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  emihealth_final.results_complex_perio;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts2_tc2B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts2_tc2B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts2_tc2B_resReasonsValidation`(OUT success int ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  -- variable with t_ are used for storing data from test table record by record
  DECLARE t_id BIGINT(20);
  DECLARE t_attend, t_mid VARCHAR (50) DEFAULT "" ;
  DECLARE t_dos DATETIME DEFAULT NULL;
  DECLARE t_proc_code VARCHAR(15); 
  DECLARE t_specialty  VARCHAR(20);
  
  -- variables used in processing
  DECLARE date_D0180_2Rmore_yearAgo, date_D0210_withIn_2year, date_D0150rD0120_lastYear datetime DEFAULT null;
  
  
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id, MID,date_of_service,attend,specialty,proc_code FROM test_cases_2.t_temp_16_complex_perio_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  -- Record Processing Starts
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id, t_mid,t_dos,t_attend,t_specialty,t_proc_code;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    
		    -- ---------------------------------------------------------------------------- IF # A Starts--------------------------------------------------------------------------
		    if(t_mid is null or t_mid='' or t_attend is null or t_attend='' or t_dos is null or t_dos='' or t_proc_code is null or t_proc_code='')then
			UPDATE test_cases_2.t_temp_16_complex_perio_test_table
			set expected_reason_level=-1,
			    test_detail='Data is not valid.'
			where id=t_id;
		    else
			-- ----------------------------------------------------------IF # B Starts ------------------------------------------------------------------
			if(t_specialty='1223P0300X')then
				UPDATE test_cases_2.t_temp_16_complex_perio_test_table
				SET expected_reason_level=1,
				    test_detail=concat('Specialty is [',t_specialty,'].Doctor is periodontist.')
				WHERE id=t_id; 
			else
				select max(date_of_service)into date_D0180_2Rmore_yearAgo
				FROM emihealth_final.src_complex_perio
				where proc_code='D0180' and
				      (date_of_service is not null or date_of_service !='') and
				      date_of_service != t_dos and
				      date_of_service < t_dos AND
				      date_of_service != '0000-00-00 00:00:00' and
				      pid=t_mid ;    
				-- ---------------------------------------IF # C Starts -------------------------------------------
				if((date_D0180_2Rmore_yearAgo != '') and (date_D0180_2Rmore_yearAgo <= DATE_SUB(t_dos,INTERVAL 2 YEAR))) then -- Yes
					select max(date_of_service) into date_D0210_withIn_2year
					FROM emihealth_final.src_complex_perio
					where proc_code='D0210' AND
				              (date_of_service IS NOT NULL OR date_of_service !='') AND
				              date_of_service <= t_dos AND
				              date_of_service != '0000-00-00 00:00:00' and
				              pid=t_mid;
				        -- --------------------IF # D Starts -----------------------------------------
				        if((date_D0210_withIn_2year !='') and (date_D0210_withIn_2year between DATE_SUB(t_dos,INTERVAL 2 YEAR) AND t_dos)) then -- Yes (reason 3)
						UPDATE test_cases_2.t_temp_16_complex_perio_test_table
						SET expected_reason_level=3,
						    test_detail=CONCAT('Has D0180 on [',date_D0180_2Rmore_yearAgo,'] and D0210 on [',date_D0210_withIn_2year,'].')
						WHERE id=t_id;
					else                                -- No (reason 2)
						UPDATE test_cases_2.t_temp_16_complex_perio_test_table
						SET expected_reason_level=2,
						    test_detail=CONCAT('Has D0180 on [',date_D0180_2Rmore_yearAgo,'] and No D0210 in last two years.')
						WHERE id=t_id;
					end if;
				        -- --------------------IF # D Ends   -----------------------------------------
				else 
					SELECT MAX(date_of_service) INTO date_D0150rD0120_lastYear
					FROM emihealth_final.src_complex_perio
					WHERE proc_code in('D0120','D0150') AND
				              (date_of_service IS NOT NULL OR date_of_service !='') AND
				              date_of_service <= t_dos AND
				              date_of_service != '0000-00-00 00:00:00' AND
				              pid=t_mid;
				       -- --------------------IF # F Starts -----------------------------------------
					if((date_D0150rD0120_lastYear !='') and (date_D0150rD0120_lastYear between date_sub(t_dos,interval 1 year) and t_dos))then
						SELECT MAX(date_of_service) INTO date_D0210_withIn_2year
						FROM emihealth_final.src_complex_perio
						WHERE proc_code='D0210' AND
						(date_of_service IS NOT NULL OR date_of_service !='') AND
						date_of_service <= t_dos AND
						date_of_service != '0000-00-00 00:00:00' AND
						pid=t_mid;
						-- --------------------IF # G Starts -----------------------------------------
						IF((date_D0210_withIn_2year !='') AND (date_D0210_withIn_2year BETWEEN DATE_SUB(t_dos,INTERVAL 2 YEAR) AND t_dos)) THEN -- Yes (reason 5)
							UPDATE test_cases_2.t_temp_16_complex_perio_test_table
							SET expected_reason_level=5,
							    test_detail=CONCAT('D0150 or D0120 exists on [',date_D0150rD0120_lastYear,'] and D0210 on [',date_D0210_withIn_2year,'].')
							WHERE id=t_id;
						ELSE                                -- No (reason 2)
							UPDATE test_cases_2.t_temp_16_complex_perio_test_table
							SET expected_reason_level=4,
							    test_detail=CONCAT('No D0150 or D0120 exists and No D0210 exists with in last year.]')
							WHERE id=t_id;
						END IF;
						-- -------------------- IF # G Ends -------------------------------------------
					else
						UPDATE test_cases_2.t_temp_16_complex_perio_test_table
						SET expected_reason_level=6,
						    test_detail=CONCAT('Has no D0180 two year ago and has no D0150 or D0210 in last year.')
						WHERE id=t_id;
					end if;
				       -- --------------------IF # F Ends   -----------------------------------------
				end if;
				-- ---------------------------------------IF # C Ends   -------------------------------------------
			end if;
			-- ----------------------------------------------------------IF # B Ends ---------------------------------------------------------------------
		    end if;
		    -- ---------------------------------------------------------------------------- IF # A Ends----------------------------------------------------------------------------
		   
		 end loop;
  CLOSE my_cursor ;
  -- Processing Ends
  
    -- setting up output parameters
  
  UPDATE test_cases_2.t_temp_16_complex_perio_test_table SET test_status=TRUE WHERE actual_reason_level=expected_reason_level;
  UPDATE test_cases_2.t_temp_16_complex_perio_test_table SET test_status=FALSE WHERE actual_reason_level!=expected_reason_level;
  
  -- setting up records counts
  SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_16_complex_perio_test_table;
  SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_16_complex_perio_test_table WHERE  actual_reason_level != expected_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_16_complex_perio_test_table WHERE expected_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_16_complex_perio_test_table WHERE actual_reason_level != expected_reason_level;
	IF(temp_count=0) THEN
		SET test_status=TRUE;
		SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
	ELSE
		SET test_status=FALSE;
		SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
	END IF;
  END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts2_tc3_results2` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts2_tc3_results2` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts2_tc3_results2`(OUT success INT ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  -- variable with t_ are used for storting data from test table
  DECLARE t_id BIGINT(20);
  DECLARE t_attend, t_mid VARCHAR (50) DEFAULT "" ;
  DECLARE t_dos DATETIME DEFAULT "";
  DECLARE t_proc_code VARCHAR(15); 
  DECLARE t_specialty  VARCHAR(20);
  
  
  DECLARE is_periodontist, is_inLast2year, has_D0180, has_D0120, has_D0210,v_dos,v_history_2x, v_dos_2x  INT DEFAULT 0;  
  
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id, MID,date_of_service,attend,proc_code FROM test_cases_2.t_temp_complex_perio_TS1_tc5 ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id, t_mid,t_dos,t_attend,t_proc_code;
		    
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    
		    -- Checking for patient is old or not
		    SELECT specialty INTO t_specialty FROM emihealth_final.src_complex_perio WHERE attend = t_attend  LIMIT 1;
		    IF t_specialty='1223P0300X' THEN
		         -- >> Reason 1
			 UPDATE test_cases_2.t_temp_complex_perio_TS1_tc5 
			 SET expected_reason_level=1, 
			     test_detail='is periodontist.'
			  WHERE id=t_id;
		 ELSE
		           -- Checking for D0180 over last 2 years 
					-- QUERY STARTS
				SELECT COUNT(*), MAX(date_of_service) INTO has_D0180, v_dos 
			FROM emihealth_final.src_complex_perio
			WHERE pid = p_mid
			AND proc_code = 'D0180'
			AND date_of_service <= t_dos
			AND attend <> '';
				        -- QUERY ENDS
				
				-- check 456
				 IF has_D0180 != 0 
				 
				 THEN 
				 
				 SELECT COUNT(*), MAX(date_of_service) INTO v_history_2x, v_dos_2x 
				FROM emihealth_final.src_complex_perio
				WHERE pid = p_mid
				AND proc_code  IN ('D0150','D0120')
				AND date_of_service <= t_dos
				AND attend <> '';
				        -- QUERY ENDS
				IF v_history_2x != 0 
				
				then
				
					-- >> Reason 6
						-- QUERY STARTS
					UPDATE test_cases_2.t_temp_complex_perio_TS1_tc5 
					SET expected_reason_level=6 , 
					    test_detail=CONCAT(' procedure code(D0210) found within [',DATE_ADD(t_dos,INTERVAL 1 DAY),' to ',DATE_SUB(t_dos,INTERVAL 5 YEAR),'].') 
					WHERE id=t_id;
					
					ELSE
					       
				                
					
					
					UPDATE test_cases_2.t_temp_complex_perio_TS1_tc5 
					SET expected_reason_level=4 , 
					    test_detail=CONCAT(' procedure code(D0210) not found found within [',DATE_ADD(t_dos,INTERVAL 1 DAY),' to ',DATE_SUB(t_dos,INTERVAL 5 YEAR),'].') 
					WHERE id=t_id;
		    
                                   	
					
					
					
		  END IF;
		   
		   END IF;
			
		    END IF; -- reason 1
	        END LOOP ;
  CLOSE my_cursor ;
  
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying result and pl_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_16_complexPerio_ts3_tc4_resPlDailyCount');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying paid money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts3_tc5_resPlDailyEqualPaidMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts3_tc6_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying recovered money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_16_complexPerio_ts3_tc6_resPlDailyEqualRecoveredMoney');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying red counts in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts3_tc7_resPlDailyEqualReds ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts3_tc8_resPlDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying distict years counts in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts3_tc8_resPlDailyDistinctYearsCount ');
		
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.pl_complex_perio_stats_daily] by generating test table[test_cases_2.t_16_pl_temp].'
	,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts3_tc2_plTestTable/t_16_complexPerio_ts3_tc1_plDailyValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts3_tc1_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts3_tc1_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts3_tc1_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT "";
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT '';
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_16_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_complex_perio WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_complex_perio WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_complex_perio WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_complex_perio WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_complex_perio WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_complex_perio WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_complex_perio WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_16_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_16_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend='';
			SET t_dos= '';
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code ='';
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_16_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_16_pl_temp WHERE t_16_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_16_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_16_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_16_pl_temp WHERE t_16_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts3_tc2_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts3_tc2_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts3_tc2_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_complex_perio_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='complex_perio';
	
	SET required_rows = weightage*total_counts/100;
	
	
	if(required_rows < 100)then
	set required_rows=100;
	End if;
	
	
	
	 DROP TABLE IF EXISTS t_16_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_16_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  default NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_16_pl_temp; 
	
	
	insert into test_cases_2.t_16_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_complex_perio_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_16_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts3_tc3_checkPlDailyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts3_tc3_checkPlDailyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts3_tc3_checkPlDailyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_daily_table_exists, pl_daily_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_complex_perio_stats_daily') INTO pl_daily_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_complex_perio_stats_daily') INTO pl_daily_table_empty;
	
	IF (pl_daily_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_daily_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.results_complex_perio WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_complex_perio_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;	
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_complex_perio` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_complex_perio_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts3_tc6_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts3_tc6_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts3_tc6_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_complex_perio` WHERE isactive=1;
	SELECT SUM(recovered_money) INTO pld_rec_money FROM emihealth_final.`pl_complex_perio_stats_daily` WHERE isactive=1;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_complex_perio` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_complex_perio_stats_daily` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_complex_perio` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_complex_perio_stats_daily` WHERE isactive=1;
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying pl_daily and db_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts4_tc4_checkCountDosPlNDb ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying paid money db_daily  and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts4_tc5_checkTotalCountPlNDb ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying recovered money in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_16_complexPerio_ts4_tc6_checkRygCountsPlNDbTables');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying red counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts4_tc7_checkRedCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts4_tc8_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying green counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_16_complexPerio_ts4_tc8_checkGreenCountsPlNDbTables');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_16_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts4_tc2_dashboardTestTable/ t_16_complexPerio_ts4_tc1_dashboardDailyValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts4_tc1_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts4_tc1_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts4_tc1_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT "";
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_16_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_complex_perio_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_complex_perio_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_complex_perio_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_complex_perio_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_16_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_16_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos='';
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_16_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_16_dashboard_temp WHERE t_16_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_16_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_16_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_16_dashboard_temp WHERE t_16_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts4_tc2_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts4_tc2_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts4_tc2_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=16;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='complex_perio';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_16_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_16_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_16_dashboard_temp; 
	
	
	insert into test_cases_2.t_16_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		from emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=16) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_16_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts4_tc3_checkDashboardDailyResExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts4_tc3_checkDashboardDailyResExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts4_tc3_checkDashboardDailyResExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_dialy_table_exists BOOL DEFAULT FALSE; 
	DECLARE db_dialy_table_empty INT DEFAULT NULL;
	SELECT t_check_if_table_exists_global_fun('dashboard_daily_results') INTO db_dialy_table_exists;
	
	select count(*) into db_dialy_table_empty from emihealth_final.dashboard_daily_results where type=16;
	
	IF ( db_dialy_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_dialy_table_empty = NULL) THEN
			SET test_detail='No record in table against algo id 16.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table against algo id 16.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts4_tc4_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts4_tc4_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts4_tc4_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.pl_complex_perio_stats_daily WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=16;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_complex_perio_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=16;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_complex_perio_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=16;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_complex_perio_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=16;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts4_tc8_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts4_tc8_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts4_tc8_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_complex_perio_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=16;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying result and pl_monthly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts5_tc2_checkCountResNPlMonthly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying paid money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts5_tc3_checkPaidMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying recovered money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts5_tc4_checkRecoveredMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts5_tc5_checkEqualRedsResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying red counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_16_complexPerio_ts5_tc5_checkEqualRedsResNPlMontly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts5_tc6_distinctYearsCountResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying distinct years counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts5_tc6_distinctYearsCountResNPlMontly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.pl_complex_perio_stats_monthly] by generating test table[test_cases_2.t_temp_16_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts5_tc7A_testTableGen/t_16_complexPerio_ts5_tc7B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts5_tc1_checkPlMonthlyTableExistsNpop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts5_tc1_checkPlMonthlyTableExistsNpop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts5_tc1_checkPlMonthlyTableExistsNpop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  pl_monthly_table_exists, pl_monthly_table_empty BOOL DEFAULT FALSE;
	
	SELECT t_check_if_table_exists_global_fun('pl_complex_perio_stats_monthly') INTO pl_monthly_table_exists;
	SELECT test_cases_2.`t_check_if_table_not_empty_global_fun`('pl_complex_perio_stats_monthly') INTO pl_monthly_table_empty;
	
	IF (pl_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(pl_monthly_table_empty = FALSE) THEN
			SET test_detail='Table is empty.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Table exists and not empty.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_complex_perio` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO plm_count FROM emihealth_final.`pl_complex_perio_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_complex_perio WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_complex_perio_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_complex_perio WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_complex_perio_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts5_tc5_checkEqualRedsResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts5_tc5_checkEqualRedsResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts5_tc5_checkEqualRedsResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_complex_perio WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.`pl_complex_perio_stats_monthly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts5_tc6_distinctYearsCountResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts5_tc6_distinctYearsCountResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts5_tc6_distinctYearsCountResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_complex_perio WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.`pl_complex_perio_stats_monthly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_complex_perio_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_complex_perio';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_16_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_16_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_16_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_16_ts5_tc7(attend, MONTH,YEAR, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,MONTH,YEAR,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		FROM emihealth_final.`pl_complex_perio_stats_monthly` WHERE isactive=1 ORDER BY (CONCAT(MONTH,YEAR)) DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_16_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_16_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.`results_complex_perio` WHERE isactive=1 AND MONTH(results_complex_perio.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.`results_complex_perio` WHERE isactive=1 AND MONTH(results_complex_perio.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_complex_perio WHERE isactive=1 AND MONTH(results_complex_perio.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_complex_perio WHERE isactive=1 AND MONTH(results_complex_perio.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_complex_perio WHERE isactive=1 AND MONTH(results_complex_perio.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_complex_perio WHERE isactive=1 AND MONTH(results_complex_perio.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				SET temp_expec_color_code='green';
			END IF;
	
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) INTO temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_complex_perio` 
			WHERE isactive=1 AND MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_16_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_16_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_16_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_16_ts5_tc7 WHERE t_temp_16_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_16_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_16_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_16_ts5_tc7 WHERE t_temp_16_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_TS6_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_TS6_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_TS6_PL_STATS_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying result and pl_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts6_tc1_checkCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying paid money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts6_tc2_checkPaidMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying recovered money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts6_tc3_checkRecoveredMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying red counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts6_tc4_checkEqualRedsResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts6_tc5_distinctYearsCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying distinct years counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts6_tc5_distinctYearsCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.pl_complex_perio_stats_yearly] by generating test table[test_cases_2.t_temp_16_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts6_tc6A_testTableGen/t_16_complexPerio_ts6_tc6B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_complex_perio` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_complex_perio_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_complex_perio` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_complex_perio_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_complex_perio`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_complex_perio_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_complex_perio` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_complex_perio_stats_yearly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts6_tc5_distinctYearsCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts6_tc5_distinctYearsCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts6_tc5_distinctYearsCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.`results_complex_perio` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.`pl_complex_perio_stats_yearly` WHERE isactive=1;
	
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_complex_perio_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_complex_perio';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_16_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_16_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_16_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_16_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_complex_perio_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_16_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_16_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_complex_perio` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_complex_perio` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_complex_perio WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_complex_perio WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_complex_perio WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_complex_perio WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
			
				if(temp_g_check!= 0) THEN	
					set temp_expec_color_code='green';
					
			End IF;			
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_complex_perio` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_16_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_16_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_16_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_16_ts6_tc6 WHERE t_temp_16_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_16_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_16_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_16_ts6_tc6 where t_temp_16_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_TS7_DASHBOARD_MONTHLY_RES_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_TS7_DASHBOARD_MONTHLY_RES_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_TS7_DASHBOARD_MONTHLY_RES_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying distinct year counts in pl_monthly and db_monthly',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts7_tc2_countDistinctYearsPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying total_count db_monthly  and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts7_tc3_checkTotalCountPlMNdbm ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying providers count in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_16_complexPerio_ts7_tc4_checkCountNoOfProvPlMNdbM');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts7_tc6_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying green counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts7_tc6_checkGreenCountsPlMNDbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying paid_money  in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_16_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts7_tc9A_testTableGen/t_16_complexPerio_ts7_tc9B_columnValidation ');		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts7_tc1_checkDashboardMonthlyResExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts7_tc1_checkDashboardMonthlyResExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts7_tc1_checkDashboardMonthlyResExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_monthly_table_exists, db_monthly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_monthly_results') INTO db_monthly_table_exists;
	
	select count(*) into db_monthly_table_empty from emihealth_final.dashboard_monthly_results where type=16;
	
	IF ( db_monthly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_monthly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_monthly_results) against algo id 16.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_monthly_results) against algo id 16.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_complex_perio_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=16;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_complex_perio_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=16;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_complex_perio_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=16;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts7_tc6_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts7_tc6_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts7_tc6_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.`pl_complex_perio_stats_monthly` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=16;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts7_tc7_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_complex_perio_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=16;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 and type=16;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_complex_perio';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_16_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_16_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_16_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_16_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=16) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_16_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_16_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_complex_perio_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_complex_perio_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_complex_perio_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_16_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_16_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_16_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_16_ts7_tc9 WHERE t_temp_16_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_16_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_16_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_16_ts7_tc9 WHERE t_temp_16_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_TS8_DASHBOARD_YEARLY_RESULTS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_TS8_DASHBOARD_YEARLY_RESULTS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_TS8_DASHBOARD_YEARLY_RESULTS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts8_tc2_countDistinctYearsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts8_tc4_checkCountNoOfProvPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts8_tc5_checkTotalRedCountsPlYNDbY ');
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts8_tc6_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts8_tc6_checkGreenCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts8_tc7_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying recovered money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts8_tc7_checkTotalPaidMoneyCountPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_16_ts9_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_16_complexPerio_ts9_tc9A_testTableGen/t_16_complexPerio_ts9_tc9B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts8_tc1_checkDashboardYearlyResTabExistsNPop` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts8_tc1_checkDashboardYearlyResTabExistsNPop`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE  db_yearly_table_exists, db_yearly_table_empty BOOL DEFAULT FALSE;
	SELECT t_check_if_table_exists_global_fun('dashboard_yearly_results') INTO db_yearly_table_exists;
	
	select count(*) into db_yearly_table_empty from emihealth_final.dashboard_yearly_results where type=16;
	
	IF ( db_yearly_table_exists = FALSE) THEN
		SET test_detail='Table does not exist.';
		SET test_status= FALSE;
	ELSE
		IF(db_yearly_table_empty = FALSE) THEN
			SET test_detail='No record in table(dashboard_yearly_results) against algo id 16.';
			SET test_status= FALSE;
		ELSE
			SET test_detail='Records exist in table(dashboard_yearly_results) against algo id 16.';
			SET test_status= TRUE;
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.pl_complex_perio_stats_yearly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=16;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.pl_complex_perio_stats_yearly WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=16;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.pl_complex_perio_stats_yearly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=16;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_complex_perio_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=16;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts8_tc6_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts8_tc6_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts8_tc6_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_complex_perio_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=16;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts8_tc7_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts8_tc7_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts8_tc7_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_complex_perio_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=16;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts9_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts9_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts9_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=16;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_complex_perio';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_16_ts9_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_16_ts9_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_16_ts9_tc9; 
	
	
	insert into test_cases_2.t_temp_16_ts9_tc9(year,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=16) ORDER BY(year)desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_16_ts9_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16_complexPerio_ts9_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16_complexPerio_ts9_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16_complexPerio_ts9_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_16_ts9_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers 
			from emihealth_final.pl_complex_perio_stats_yearly 
			WHERE year=t_year AND isactive= 1;
			
			SELECT COUNT(*)INTO temp_expec_total_red  
			from emihealth_final.pl_complex_perio_stats_yearly 
			WHERE YEAR=t_year  AND color_code='red' AND isactive=1;
						
			SELECT COUNT(*)INTO temp_expec_total_green  
			from emihealth_final.pl_complex_perio_stats_yearly 
			WHERE  YEAR=t_year  AND color_code='green' AND isactive=1;
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_16_ts9_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_16_ts9_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_16_ts9_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_16_ts9_tc9 WHERE t_temp_16_ts9_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_16_ts9_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_16_ts9_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_16_ts9_tc9 WHERE t_temp_16_ts9_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_16________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_16________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_16________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_MAIN`()
BEGIN
  call `t_17_simpCompExtCodeDist_TS1_SOURCE_TABLE`();
  call `t_17_simpCompExtCodeDist_RESULT_TABLE`();
  call `t_17_simpCompExtCodeDist_TS8_DASHBOARD_YEARLY_TABLE`();	
  
  
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	call test_cases_2.`t_17_simpCompExtCodeDist_step1_src_table_gen`();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step2_test_table_gen`(@a);
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step2_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,
	     'Verifying source table[emihealth_final.`results_ext_code_distribution`] using test table[test_cases_2.`t_temp_17_simpCompCodeDist_test_table`]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_17_simpCompExtCodeDist_step1_src_table_gen/t_17_simpCompExtCodeDist_step2_test_table_gen/t_17_simpCompExtCodeDist_step2_validation');
	     
	
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step3_meansd_test_table_gen`(@a);
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step3_meansd_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,
	     'Verifying all mean table[emihealth_final.`results_ext_code_distribution_all_meansd`] using test table[test_cases_2.`t_temp_17_simpCompExtCodeDist_meansd_test_table`]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_17_simpCompExtCodeDist_step3_meansd_test_table_gen/t_17_simpCompExtCodeDist_step3_meansd_validation');
	  
	  
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step4_test_table_gen`(@a);
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step4_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,
	     'Verifying results table[emihealth_final.`results_ext_code_distribution`] using test table[test_cases_2.`t_temp_17_simpCompExtCodeDist_test_table_4`]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_17_simpCompExtCodeDist_step4_test_table_gen/t_17_simpCompExtCodeDist_step4_validation ');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_step1_src_table_gen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_step1_src_table_gen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_step1_src_table_gen`()
BEGIN
	DROP TABLE IF EXISTS t_temp_simpCompExtCodeDist_src_table;
	CREATE TABLE t_temp_simpCompExtCodeDist_src_table
	(
		id  BIGINT UNSIGNED DEFAULT 0,
		attend VARCHAR(99) DEFAULT NULL,
		YEAR SMALLINT UNSIGNED DEFAULT 0,
		specialty VARCHAR(99) DEFAULT NULL,
		proc_code VARCHAR(99) DEFAULT NULL,
		PRIMARY KEY(id),
		INDEX year_specialty_attend_proc_code USING BTREE (YEAR,specialty,attend,proc_code)	
	)ENGINE = MYISAM;
	INSERT INTO t_temp_simpCompExtCodeDist_src_table(id,YEAR,specialty,attend,proc_code ) 
	SELECT  id,YEAR,specialty,attend,proc_code FROM emihealth_final.src_ext_code_distribution;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_step2_test_table_gen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_step2_test_table_gen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_step2_test_table_gen`(out success Bool)
BEGIN
	declare reason_percent decimal(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        drop table if exists test_cases_2.`t_temp_17_simpCompCodeDist_test_table`;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_17_simpCompCodeDist_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(10) ZEROFILL NOT NULL,
	  `year` int(11) default 0,
	  `specialty` VARCHAR(50) DEFAULT NULL,
	  `attend` varchar(40) default null,
	
	  `act_d7140_count` int(11) default 0,
	  `exp_d7140_count` INT(11) DEFAULT 0, 
	   
	  `act_d7210_count` int(11) default 0,
	  `exp_d7210_count` INT(11) DEFAULT 0,
	  	  
	  `act_ratio_d7210_to_d7140` double default 0,
	  `exp_ratio_d7210_to_d7140` DOUBLE DEFAULT 0,
	  
	  `test_status` bool Default Null,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=innodb DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE test_cases_2.`t_temp_17_simpCompCodeDist_test_table`;
        
        insert into test_cases_2.`t_temp_17_simpCompCodeDist_test_table`
		(res_id, year, specialty, attend, act_d7140_count, act_d7210_count, act_ratio_d7210_to_d7140) 
	select  sr_no, year, specialty, attend, d7140_count, d7210_count, ratio_d7210_to_d7140
	FROM emihealth_final.`results_ext_code_distribution`
	where isactive=1; -- and specialty != '' and specialty !='N/A';
		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_step2_validation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_step2_validation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_step2_validation`(out out_success bool, out out_test_status bool, out out_test_detail tinytext)
BEGIN
	declare t_year int(11) default null;
	declare t_specialty VARCHAR(50) DEFAULT NULL;
	declare t_attend VARCHAR(40) DEFAULT NULL;
	
	declare d7140_count int(11) default 0;
	declare d7210_count int(11) default 0;
	
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	-- t_temp_17_simpCompCodeDist_test_table
	DECLARE finished INT DEFAULT 0;
	declare my_cur cursor for
				select year, specialty, attend from test_cases_2.t_temp_17_simpCompCodeDist_test_table;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
	
	open my_cur;
	get_row:loop
			fetch my_cur into t_year, t_specialty, t_attend;
			if(finished = 1)then
				leave get_row;
			end if;
			
			select	count(*) into d7140_count
			from 	t_temp_simpCompExtCodeDist_src_table
			where 	year = t_year
				and specialty = t_specialty
				and attend = t_attend
				and proc_code = 'D7140';
				
			SELECT	COUNT(*) INTO d7210_count
			FROM 	t_temp_simpCompExtCodeDist_src_table
			WHERE 	YEAR = t_year
				AND specialty = t_specialty
				AND attend = t_attend
				AND proc_code = 'D7210';
				
			update	test_cases_2.t_temp_17_simpCompCodeDist_test_table
			set 	exp_d7140_count = d7140_count,
				exp_d7210_count = d7210_count
			where 	YEAR = t_year
				AND specialty = t_specialty
				AND attend = t_attend;	
		end loop;
	close my_cur;
	
	UPDATE	test_cases_2.t_temp_17_simpCompCodeDist_test_table
			SET 	exp_d7140_count = 1
			WHERE 	exp_d7140_count = 0;
		
	UPDATE	test_cases_2.t_temp_17_simpCompCodeDist_test_table
	SET 	exp_ratio_d7210_to_d7140 = round(exp_d7210_count/exp_d7140_count,2);
	
	update 	test_cases_2.t_temp_17_simpCompCodeDist_test_table
	set 	test_status = 1
	where 	act_d7140_count = exp_d7140_count and
		act_d7210_count = exp_d7210_count and
		act_ratio_d7210_to_d7140 = exp_ratio_d7210_to_d7140;
		
	UPDATE 	test_cases_2.t_temp_17_simpCompCodeDist_test_table
	SET 	test_status = 0
	WHERE 	test_status != 1;
	
	
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_17_simpCompCodeDist_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_17_simpCompCodeDist_test_table WHERE test_status=0;
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_17_simpCompCodeDist_test_table WHERE  test_status IS NULL;
	IF(temp_count != 0) THEN
		SET out_success=FALSE;
	ELSE
		SET out_success=TRUE;
		
		IF(count_defective_records=0) THEN
			SET out_test_status=TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_step3_meansd_test_table_gen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_step3_meansd_test_table_gen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_step3_meansd_test_table_gen`(out success Bool)
BEGIN
	declare reason_percent decimal(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_samplexp_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        drop table if exists test_cases_2.`t_temp_17_simpCompExtCodeDist_meansd_test_table`;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_17_simpCompExtCodeDist_meansd_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(10) ZEROFILL NOT NULL,
	  `year` int(11) default 0,
	  `specialty` VARCHAR(50) DEFAULT NULL,
	  
	  `act_specialty_mean` DOUBLE DEFAULT 0,
	  `exp_specialty_mean` DOUBLE DEFAULT 0,
	  
	  `act_specialty_sd` DOUBLE DEFAULT 0,
	  `exp_specialty_sd` DOUBLE DEFAULT 0,
	  
	  `act_specialty_sd_min` DOUBLE DEFAULT 0,
	  `exp_specialty_sd_min` DOUBLE DEFAULT 0,
	  
	  `act_specialty_sd_max` DOUBLE DEFAULT 0,
	  `exp_specialty_sd_max` DOUBLE DEFAULT 0,
	  
	  `test_status` bool Default Null,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=innodb DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE test_cases_2.`t_temp_17_simpCompExtCodeDist_meansd_test_table`;
        
        insert into test_cases_2.`t_temp_17_simpCompExtCodeDist_meansd_test_table`
			(res_id, year, specialty, act_specialty_mean, act_specialty_sd, act_specialty_sd_min, act_specialty_sd_max) 
	select  sr_no, year, specialty, specialty_mean, specialty_sd, specialty_sd_min, specialty_sd_max
	FROM emihealth_final.`results_ext_code_distribution_all_meansd`
	where 	isactive=1 
		-- and specialty != '' 
		-- and specialty !='N/A'
		;
		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_step3_meansd_validation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_step3_meansd_validation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_step3_meansd_validation`(out out_success bool ,out out_test_status bool, out out_test_detail tinytext )
BEGIN
	declare t_year int(11) default 0;
	declare t_specialty varchar(50) default 0;
	declare specialty_mean DOUBLE DEFAULT 0;
	declare specialty_sd double default 0;
	
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	declare finished int(11) default 0;
	declare my_cur cursor for
				select year,specialty from t_temp_17_simpCompExtCodeDist_meansd_test_table;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
	
	
	open my_cur;
	get_row :loop
			Fetch my_cur into t_year, t_specialty;
			if(finished = 1)then
				leave get_row;
			end if;
			
			select	round(avg(exp_ratio_d7210_to_d7140),2),round(STDDEV_SAMP(exp_ratio_d7210_to_d7140),2) into specialty_mean,specialty_sd
			from 	t_temp_17_simpCompCodeDist_test_table
			where 	year = t_year
				and specialty = t_specialty
				AND exp_ratio_d7210_to_d7140 > 0;
			
			update 	t_temp_17_simpCompExtCodeDist_meansd_test_table
			set	exp_specialty_mean = specialty_mean,
				exp_specialty_sd = ifnull(specialty_sd,0)
			where 	YEAR = t_year
				AND specialty = t_specialty;
		end loop;
	close my_cur;
	-- Updation for calculating [exp_specialty_sd_min] and [exp_specialty_sd_min] using [exp_specialty_sd_max]
	UPDATE 	t_temp_17_simpCompExtCodeDist_meansd_test_table
	SET	exp_specialty_sd_min = round(exp_specialty_mean + exp_specialty_sd,2),
		exp_specialty_sd_max = round(exp_specialty_mean + 1.5 * exp_specialty_sd,2)
	where 	exp_specialty_sd != 0 -- important
		;
	
	
	-- Updation for column [test_status]
	update 	test_cases_2.t_temp_17_simpCompExtCodeDist_meansd_test_table
	set 	test_status = 1
	where 	truncate(act_specialty_mean,0) = truncate(exp_specialty_mean,0) and
		truncate(act_specialty_sd,0) = truncate(exp_specialty_sd,0) and
		truncate(act_specialty_sd_min,0) = truncate(exp_specialty_sd_min,0) and
		truncate(act_specialty_sd_max,0) = truncate(exp_specialty_sd_max,0)
		;
	 -- Updating for [test_status] column
	UPDATE 	test_cases_2.t_temp_17_simpCompExtCodeDist_meansd_test_table
	SET 	test_status = 0
	WHERE 	test_status is null
		;
		
	-- ------------------
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_17_simpCompExtCodeDist_meansd_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_17_simpCompExtCodeDist_meansd_test_table WHERE test_status=0;
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_17_simpCompExtCodeDist_meansd_test_table WHERE  test_status IS NULL;
	IF(temp_count != 0) THEN
		SET out_success=FALSE;
	ELSE
		SET out_success=TRUE;
		
		IF(count_defective_records=0) THEN
			SET out_test_status=TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_step4_test_table_gen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_step4_test_table_gen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_step4_test_table_gen`(OUT success BOOL)
BEGIN
	DECLARE reason_percent DECIMAL(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        DECLARE selected_reason INT;
        declare _ryg_status varchar(15) default null;
        DECLARE iterator INT;
        
        DROP TABLE IF EXISTS test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4;
	CREATE TABLE test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4
	(
		id BIGINT AUTO_INCREMENT NOT NULL PRIMARY KEY,
		res_id BIGINT DEFAULT 0,
		year smallint default 0,
		attend VARCHAR(99) DEFAULT NULL,
		specialty varchar(99) default null,
		
		ratio_d7210_to_d7140 DOUBLE DEFAULT 0,
		specialty_min_sd DOUBLE DEFAULT 0,
		specialty_max_sd DOUBLE DEFAULT 0,
		
		act_ryg_status VARCHAR(15) DEFAULT NULL,
		exp_ryg_status VARCHAR(15) DEFAULT NULL,
		
		test_status BOOL DEFAULT NULL,
		test_detail TINYTEXT DEFAULT NULL	
	)ENGINE=innodb  CHARSET=latin1
	;  
	
        TRUNCATE TABLE test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4;
        
        SET iterator = 1;
        WHILE(iterator < 4) DO
		SET selected_reason= iterator;
		SELECT reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=17 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		if(selected_reason = 1) then
			SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_ext_code_distribution` WHERE ryg_status="red";
			set _ryg_status = 'red';
		end if;
		IF(selected_reason = 2) THEN
			SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_ext_code_distribution` WHERE ryg_status="yellow";
			SET _ryg_status = 'yellow';
		END IF;
		IF(selected_reason = 3) THEN
			SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_ext_code_distribution` WHERE ryg_status="green";
			SET _ryg_status = 'green';
		END IF;
		
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		
		-- Inserting Records in Test Table
		insert into test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4
					(
					res_id,
					year,
					attend,
					specialty,
					ratio_d7210_to_d7140,
					specialty_min_sd, 
					specialty_max_sd,
					act_ryg_status
					)
		SELECT a.sr_no, a.year, a.attend, a.specialty, a.ratio_d7210_to_d7140, b.specialty_sd_min, b.specialty_sd_max, a.ryg_status
		FROM 	emihealth_final.`results_ext_code_distribution` as a inner join emihealth_final.`results_ext_code_distribution_all_meansd` as b 
			on a.year = b.year and
			   a.specialty = b.specialty 
		WHERE 	a.ryg_status = _ryg_status AND 
			a.isactive = 1 
		ORDER BY RAND() 
		LIMIT reason_sample_count;
		
				
		SET iterator = iterator + 1;
		
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  emihealth_final.results_ext_code_distribution;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_step4_validation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_step4_validation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_step4_validation`(OUT out_success BOOL ,OUT out_test_status BOOL, OUT out_test_detail TINYTEXT)
BEGIN
	declare t_year int default 0; 
	declare t_specialty varchar(99) default null;
	declare t_attend varchar(15) default null;
	declare t_ratio_d7210_to_d7140 double default 0;
	declare t_specialty_min_sd double default 0;
	declare t_specialty_max_sd double default 0;
	
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	-- For Cursor
	
	declare finished int default 0;
	declare my_cur cursor for
				select year, specialty, attend, ratio_d7210_to_d7140, specialty_min_sd, specialty_max_sd
				from test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4;
	declare continue handler for not found set finished = 1;
	
	-- >> Core Processing Starts
	open my_cur;
	get_row:loop
			fetch my_cur into t_year, t_specialty, t_attend, t_ratio_d7210_to_d7140, t_specialty_min_sd, t_specialty_max_sd; 
			if(finished = 1) then
				leave get_row;
			end if;
			
			
			if(t_ratio_d7210_to_d7140 >= t_specialty_max_sd)then
				update 	test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4
				set 	exp_ryg_status = 'red',
					test_detail = 'ratio_d7210_to_d7140 >= specialty_max_sd'
				where 	year = t_year and
					specialty = t_specialty and
					attend = t_attend;
			else
				if(t_ratio_d7210_to_d7140 >= t_specialty_min_sd and t_ratio_d7210_to_d7140 < t_specialty_max_sd) then
					UPDATE 	test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4
					SET 	exp_ryg_status = 'yellow',
						test_detail = 'ratio_d7210_to_d7140 >= specialty_min_sd AND t_ratio_d7210_to_d7140 < specialty_max_sd'
					WHERE 	YEAR = t_year AND
						specialty = t_specialty AND
						attend = t_attend;
				else
					UPDATE 	test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4
					SET 	exp_ryg_status = 'green',
						test_detail = 'ratio_d7210_to_d714 < specialty_min_sd'
					WHERE 	YEAR = t_year AND
						specialty = t_specialty AND
						attend = t_attend;
				end if;
			end if;
		end loop;
	close my_cur;
	
	
	UPDATE	test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4
	SET 	exp_ryg_status = 'green',
		test_detail = 'ratio_d7210_to_d7140 = specialty_min_sd = specialty_max_sd =0'
	WHERE 	ratio_d7210_to_d7140 = 0 and
		specialty_min_sd = 0 and
		specialty_max_sd =0 
	;
	
	UPDATE	test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4
	SET 	test_status = 0
	WHERE 	act_ryg_status != exp_ryg_status
	;
	UPDATE 	test_cases_2.`t_temp_17_simpCompExtCodeDist_test_table_4`
	SET 	test_status = 1
	WHERE 	act_ryg_status = exp_ryg_status
			;
	
	-- << Core Processing Ends 
	
	
	
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4 WHERE test_status=0;
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4 WHERE  test_status IS NULL;
	IF(temp_count != 0) THEN
		SET out_success=FALSE;
	ELSE
		SET out_success=TRUE;
		
		IF(count_defective_records=0) THEN
			SET out_test_status=TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
  END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_TS1_SOURCE_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdMolar_ts1_tc1_baseSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			17
			,'Verifying base and source table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_17_simpCompExtCodeDist_ts1_tc1_baseSrcCount'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_ts1_tc1_baseSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_ts1_tc1_baseSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_ts1_tc1_baseSrcCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	
	SELECT count(*) 
	INTO src_count  FROM emihealth_final.src_ext_code_distribution;
	
	SELECT COUNT(*) INTO base_count FROM emihealth_final.procedure_performed
	 WHERE proc_code IN('D7140','D7210') 
	AND is_invalid=0 
	AND tooth_no != "";	
	
	IF(src_count=base_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in base and source table ';
	ELSE
		SET test_status=FALSE;
		IF(src_count>base_count)THEN
			SET test_detail=CONCAT(src_count-base_count,' more counts  found in source table then base table .');
		ELSE
			SET test_detail=CONCAT(base_count-src_count,' more counts found in base table then source table .');
		END IF;
	END IF;
	SET success=TRUE;
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_ts8_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_17_simpCompExtCodeDist_ts8_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_17_simpCompExtCodeDist_dbYearly_test_table]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_17_simpCompExtCodeDist_ts8_tc1A_testTableGen/t_17_simpCompExtCodeDist_ts8_tc1B_columnValidation');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_ts8_tc2_countDistinctYearsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_17_simpCompExtCodeDist_ts8_tc2_countDistinctYearsPlYnDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_17_simpCompExtCodeDist_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_ts8_tc4_checkCountNoOfProvPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_17_simpCompExtCodeDist_ts8_tc4_checkCountNoOfProvPlYnDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_ts8_tc5_checkTotalRedCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_17_simpCompExtCodeDist_ts8_tc5_checkTotalRedCountsPlYnDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_ts8_tc6_checkTotalYellowCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,'Verifying yellow counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_17_simpCompExtCodeDist_ts8_tc6_checkTotalYellowCountsPlYnDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_ts8_tc7_checkGreenCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_17_simpCompExtCodeDist_ts8_tc7_checkGreenCountsPlYnDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_ts8_tc8_totalPaidMoneyPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,'Verifying paid money money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_17_simpCompExtCodeDist_ts8_tc8_totalPaidMoneyPlYNDbY ');
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_ts8_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_ts8_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_ts8_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=17;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_simpCompExtCodeDist';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_17_simpCompExtCodeDist_dbYearly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_17_simpCompExtCodeDist_dbYearly_test_table` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill default 0,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT null,
	  
	  `actual_total_red` INT(11)zerofill  default 0,
	  `expec_total_red` INT(11) zerofill DEFAULT null,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  DEFAULT 0,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  default 0,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT null,
	  
	  `actual_paid_money` double default 0,
	  `expec_paid_money` double default 0,
	  
	  `actual_recovered_money` double default 0,
	  `expec_recovered_money` double default 0,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_17_simpCompExtCodeDist_dbYearly_test_table; 
	
	
	insert into test_cases_2.t_temp_17_simpCompExtCodeDist_dbYearly_test_table
		(
			year
			,actual_no_of_providers
			,actual_total_red
			,actual_total_yellow
			,actual_total_green 
			,actual_paid_money
			,actual_recovered_money
		)
	SELECT 
			year
			,number_of_providers
			,total_red
			,total_yellow
			,total_green
			,total_paid_money
			,total_red_recovered_money
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 and type = 17
	ORDER 	BY(year)desc 
	LIMIT 	required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_17_simpCompExtCodeDist_dbYearly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_ts8_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_ts8_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_ts8_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	declare temp_expec_paid_money,temp_actual_paid_money double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_17_simpCompExtCodeDist_dbYearly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
     
        -- t_temp_17_simpCompExtCodeDist_dbYearly_test_table 
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT	COUNT(distinct(attend)) 
			INTO 	temp_expec_no_of_providers 
			from 	emihealth_final.results_ext_code_distribution 
			WHERE 	year=t_year AND isactive= 1;
			
			
			
		
			SELECT   COUNT(DISTINCT(attend))
			INTO 	temp_expec_total_red  
			FROM     emihealth_final.results_ext_code_distribution 
			WHERE      YEAR=t_year  AND ryg_status='red' AND isactive = 1;
			
		
			SELECT     COUNT(DISTINCT(attend))
			INTO 	temp_expec_total_yellow  
			FROM     emihealth_final.results_ext_code_distribution 
			WHERE      YEAR=t_year  AND ryg_status='yellow' 
			    AND attend NOT IN(
				SELECT DISTINCT(attend)
				FROM emihealth_final.results_ext_code_distribution 
				WHERE ryg_status = 'red'
				 AND YEAR = t_year
			    )
			;
			
			
			SELECT  COUNT(DISTINCT(attend))
			INTO 	temp_expec_total_green  
			FROM    emihealth_final.results_ext_code_distribution 
			WHERE   isactive = 1
				AND YEAR=t_year  
			    AND ryg_status='green' 
			    AND attend NOT IN(
				    SELECT     DISTINCT(attend)
				    FROM     emihealth_final.results_ext_code_distribution 
				    WHERE      YEAR=t_year  AND ryg_status='yellow'     
				    )
			    AND attend NOT IN(
				    SELECT     DISTINCT(attend)
				    FROM     emihealth_final.results_ext_code_distribution 
				    WHERE      YEAR=t_year  AND ryg_status='red'     
				    )
			    ;
						
			
			
			SELECT 	sum(paid_money)
			INTO 	temp_expec_paid_money
			FROM 	emihealth_final.results_ext_code_distribution
			WHERE  	YEAR=t_year AND isactive=1;
			set temp_expec_paid_money = round(temp_expec_paid_money,2);
			
			SELECT 	SUM(money_saved)
			INTO 	temp_expec_recovered_money
			FROM 	emihealth_final.results_ext_code_distribution 
			WHERE  	YEAR=t_year AND isactive=1 and ryg_status = 'red';
			
			
			set temp_expec_recovered_money = round(temp_expec_recovered_money,2);
			
			SELECT 
				actual_no_of_providers
				,actual_total_red
				,actual_total_yellow
				,actual_total_green
				,actual_paid_money
				,actual_recovered_money
			INTO 	
				temp_actual_no_of_providers
				,temp_actual_total_red
				,temp_actual_total_yellow
				,temp_actual_total_green
				,temp_actual_paid_money
				,temp_actual_recovered_money
				
			FROM 	test_cases_2.t_temp_17_simpCompExtCodeDist_dbYearly_test_table
			WHERE 	YEAR=t_year 
			lIMIT 	1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET temp_test_detail='Column(no_of_providers) values are not matched';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET temp_test_detail='Column(total_red)    values  are  not  matched';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_green !=temp_actual_total_green) THEN
						SET temp_test_detail='Column(total_green) values   are  not matched';
						SET temp_test_status=FALSE;
					ELSE
						if(temp_expec_paid_money != temp_actual_paid_money)then
							SET temp_test_detail='Column(paid_money) values   are  not matched';
							SET temp_test_status=FALSE;
						else
							if(temp_expec_recovered_money != temp_actual_recovered_money)then
								SET temp_test_detail='Column(recovered_money) values   are  not matched';
								SET temp_test_status=FALSE;
							else
								SET temp_test_detail='Data   in   against   all    columns   is   ok';
								SET temp_test_status=TRUE;
							end if;
						end if;
					END IF;
				END IF;		
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_17_simpCompExtCodeDist_dbYearly_test_table 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red = temp_expec_total_red, 
					expec_total_green = temp_expec_total_green,
					expec_total_yellow = temp_expec_total_yellow,
					expec_paid_money = temp_expec_paid_money,
					expec_recovered_money = temp_expec_recovered_money,
					test_status = temp_test_status,
					test_detail = temp_test_detail
			WHERE YEAR = t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail=null;
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_17_simpCompExtCodeDist_dbYearly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_17_simpCompExtCodeDist_dbYearly_test_table WHERE t_temp_17_simpCompExtCodeDist_dbYearly_test_table.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_17_simpCompExtCodeDist_dbYearly_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_17_simpCompExtCodeDist_dbYearly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_17_simpCompExtCodeDist_dbYearly_test_table WHERE t_temp_17_simpCompExtCodeDist_dbYearly_test_table.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_ts8_tc2_countDistinctYearsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_ts8_tc2_countDistinctYearsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_ts8_tc2_countDistinctYearsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(year)) 
	into 	ply_dist_years_count 
	from 	emihealth_final.`results_ext_code_distribution` 
	WHERE 	isactive=1;
	
	SELECT 	COUNT(DISTINCT(Year)) 
	into 	dby_dist_years_count 
	from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=17;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
	set success = 1;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT  COUNT(*) 
	INTO 	ply_total_count
	from
		(
			select 	count(*)
			from 	emihealth_final.results_ext_code_distribution
			where 	isactive = 1
			GROUP 	by YEAR	
		) as myTab;
	
	SELECT 	count(*) 
	INTO 	dby_total_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE= 17;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_ts8_tc4_checkCountNoOfProvPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_ts8_tc4_checkCountNoOfProvPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_ts8_tc4_checkCountNoOfProvPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT 	sum(yearly_attends)
	INTO 	ply_total_count 
	from 	(
			select 	count(distinct(attend)) as yearly_attends
			from 	emihealth_final.`results_ext_code_distribution`
			where 	isactive = 1
			group 	by year
		) as result
	;
	
	SELECT 	SUM(number_of_providers) 
	INTO 	dby_total_prov_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=17;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_ts8_tc5_checkTotalRedCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_ts8_tc5_checkTotalRedCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_ts8_tc5_checkTotalRedCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	into 	ply_red_count 
	from 	emihealth_final.results_ext_code_distribution 
	WHERE 	isactive=1 AND ryg_status='red'
		;
	
	SELECT 	SUM(total_red) 
	into 	dby_red_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=17
		;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_ts8_tc6_checkTotalYellowCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_ts8_tc6_checkTotalYellowCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_ts8_tc6_checkTotalYellowCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	ply_yellow_count 
	from 	emihealth_final.results_ext_code_distribution 
	WHERE 	isactive=1 AND ryg_status ='yellow'
		;
	SELECT 	SUM(total_yellow) 
	into 	dby_yellow_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=17;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_ts8_tc7_checkGreenCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_ts8_tc7_checkGreenCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_ts8_tc7_checkGreenCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	ply_green_count 
	from 	emihealth_final.results_ext_code_distribution 
	WHERE 	isactive=1 AND ryg_status='green'
		;
	SELECT 	SUM(total_green) 
	into 	dby_green_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=17
		;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17_simpCompExtCodeDist_ts8_tc8_totalPaidMoneyPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17_simpCompExtCodeDist_ts8_tc8_totalPaidMoneyPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17_simpCompExtCodeDist_ts8_tc8_totalPaidMoneyPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT 	SUM(paid_money) 
	INTO 	ply_total_paid_money 
	from 	emihealth_final.results_ext_code_distribution WHERE isactive=1
		;
	SELECT 	SUM(total_paid_money) 
	INTO 	dby_total_paid_money 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=17;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table');
		END IF;
	END IF;
	
	set success = 1;	
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_17________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_17________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_17________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_MAIN`()
BEGIN
	CALL `t_18_extUpcodeAxomatic_TS1_SOURCE_TABLE`();
	CALL t_18_extUpcodeAxomatic_TS2_RESULT_TABLE();
	CALL `t_18_extUpcodeAxomatic_TS3_PL_DAILY_STATS_TABLE`();
	CALL `t_18_extUpcodeAxomatic_TS4_DASHBOARD_DAILY_TABLE`();
	CALL `t_18_extUpcodeAxomatic_TS5_PL_MONTHLY_STATS_TABLE`();
	CALL `t_18_extUpcodeAxomatic_TS6_PL_STATS_YEARLY_TABLE`();
	CALL `t_18_extUpcodeAxomatic_TS7_DASHBOARD_MONTHLY_TABLE`();
	CALL `t_18_extUpcodeAxomatic_TS8_DASHBOARD_YEARLY_TABLE`();
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_TS1_SOURCE_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdMolar_ts1_tc1_baseSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			18
			,'Verifying base and source table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_18_extUpcodeAxomatic_ts1_tc1_baseSrcCount'
		);
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts1_tc1_baseSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts1_tc1_baseSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts1_tc1_baseSrcCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN	
	
	
	
	DECLARE src_count INT;
	DECLARE base_count INT;
	
	
	SELECT COUNT(*)  INTO src_count FROM emihealth_final.ext_upcode_procedure_performed_final;	-- 138810
	SELECT COUNT(*) INTO base_count FROM emihealth_final.procedure_performed 
	WHERE ( ( proc_code LIKE  'D71%' 
	OR   proc_code LIKE  'D721%'
	OR  proc_code LIKE  'D722%'
	OR proc_code LIKE  'D723%'
	OR proc_code LIKE  'D724%'
	OR proc_code LIKE  'D725%'
	OR proc_code LIKE 'D33%'
	OR proc_code LIKE 'D295%'
	OR proc_code LIKE 'D424%'
	OR proc_code LIKE 'D427%'
	OR proc_code IN('D2161','D2335','D2394','D2644','D2664','D4260', 'D4261', 'D4268', 
	'D4265', 'D4266', 'D4267' , 'D4263', 'D4264','D7210')
	 ) AND tooth_no !='' )
	 AND is_invalid=0;
	IF(src_count=base_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in base and source table ';
	ELSE
		SET test_status=FALSE;
		IF(src_count>base_count)THEN
			SET test_detail=CONCAT(src_count-base_count,' more counts  found in source table then base table .');
		ELSE
			SET test_detail=CONCAT(base_count-src_count,' more counts found in base table then source table .');
		END IF;
	END IF;
	SET success=TRUE;
   
   
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts2_tc1A_srcTableGen`();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts2_tc1B_testTableGen`(@a);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts2_tc1C_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,
	     'Verifying result table[emihealth_final.surg_ext_final_results] using test table[test_cases_2.`t_temp_18_extUpcodeAxomatic_test_table`]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts2_tc1A_srcTableGen/t_18_extUpcodeAxomatic_ts2_tc1B_testTableGen/ t_18_extUpcodeAxomatic_ts2_tc1C_resReasonsValidation');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts2_tc1A_srcTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts2_tc1A_srcTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts2_tc1A_srcTableGen`()
BEGIN
	DROP TABLE IF EXISTS test_cases_2.t_temp_18_ext_upcode_procedure_performed_final;
	CREATE TABLE test_cases_2.t_temp_18_ext_upcode_procedure_performed_final
	(
		id  BIGINT UNSIGNED DEFAULT 0,
		attend VARCHAR(99) DEFAULT NULL,
		mid VARCHAR(99) DEFAULT NULL,
		proc_code VARCHAR(99) DEFAULT NULL,
		date_of_service datetime default null,
		tooth_no varchar(5)default null,
		remarks varchar(1000) default null,
		PRIMARY KEY(id),
		INDEX tooth_no_proc_code_dos USING BTREE (tooth_no,proc_code,date_of_service)	
	)ENGINE = MYISAM;
	
	INSERT INTO test_cases_2.t_temp_18_ext_upcode_procedure_performed_final(id, attend, MID,proc_code, date_of_service, tooth_no, remarks ) 
	SELECT  id, attend, MID,proc_code, date_of_service, tooth_no, remarks FROM emihealth_final.ext_upcode_procedure_performed_final
	where 	is_invalid = 0
		;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts2_tc1B_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts2_tc1B_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts2_tc1B_testTableGen`(out success Bool)
BEGIN
	-- =================================================
	--            Declaring All Variables 
	-- =================================================
	declare reason_percent decimal(5,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        
        -- =================================================
	--            Creating Table Structure
	-- =================================================
	DROP TABLE IF EXISTS test_cases_2.`t_temp_18_extUpcodeAxomatic_test_table`;
	CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_18_extUpcodeAxomatic_test_table` (
	`id` BIGINT(20) UNSIGNED  NOT NULL AUTO_INCREMENT ,
	`res_id` BIGINT(20)  DEFAULT NULL,
	`attend` VARCHAR(40) DEFAULT NULL,
	`specialty` VARCHAR(250) DEFAULT NULL,
	`mid` VARCHAR(99) DEFAULT NULL,
	`proc_code` VARCHAR(99) DEFAULT NULL,
	`date_of_service` datetime default null,
	
	`tooth_no` VARCHAR(99) DEFAULT NULL,
	
	`act_reason_level` INT(2) DEFAULT NULL,
	`exp_reason_level` INT(2) DEFAULT NULL,
	`act_ryg_status` VARCHAR(15) DEFAULT NULL,
	`exp_ryg_status` VARCHAR(15) DEFAULT NULL,
	`test_status` BOOL DEFAULT NULL,
	`test_detail` TINYTEXT DEFAULT NULL,
	PRIMARY KEY (`id`)
	) ENGINE=INNODB DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE test_cases_2.`t_temp_18_extUpcodeAxomatic_test_table`;
	
	
	-- =================================================
	--           Sampling And Inserting Data 
	-- =================================================
	SET iterator = 1;
        WHILE(iterator < 10) DO
		SET selected_reason= iterator;
		SELECT reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=18 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`surg_ext_final_results` WHERE reason_level=selected_reason;
		
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		
		INSERT INTO test_cases_2.`t_temp_18_extUpcodeAxomatic_test_table`
		(
			res_id,
			attend,
			specialty,
			MID,
			date_of_service,
			proc_code,
			tooth_no,
			act_reason_level,
			act_ryg_status
		)
		SELECT 	id, attend,specialty, MID,date_of_service, proc_code, tooth_no, reason_level, ryg_status
		FROM 	emihealth_final.surg_ext_final_results 
		WHERE 	reason_level=selected_reason AND isactive=1 and proc_code='D7210'
		ORDER 	
		BY 	RAND() 
		LIMIT 	reason_sample_count;	
	
		SET iterator = iterator + 1;
	END WHILE;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts2_tc1C_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts2_tc1C_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts2_tc1C_resReasonsValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	-- =====================================================================================================================
	--            					Declaring All Variables 
	-- =====================================================================================================================
	-- For Holdind Data From Cursor
	declare t_id BIGINT(20) default 0 ;
	declare t_attend VARCHAR(40) default '' ;
	declare t_mid VARCHAR(99) DEFAULT '';
	declare t_specialty varchar(250) default '';
	declare t_dos datetime default null;
	Declare t_proc_code VARCHAR(99) DEFAULT '';
	declare t_patient_age INT DEFAULT 0;
	declare t_tooth_no VARCHAR(99) default '' ;
	
	-- For Holding Results of Queries
	
	declare has_any_claim_prior_D7210 int default 0;
			-- >> NOT BELONGS TO ANY GROUP << --
	DECLARE has_D71xx_D721x_D722x_d723x_D724x_D725x_overPast3Years INT DEFAULT 0;
	declare has_explian_group, has_filling_group, has_rootCanal_group, has_pinPostCore_group, has_sum_all_group int Default 0;
	declare has_claims_on_sameTooth_withOtherDoc int Default 0;
			-- >> BELONGS TO SOME GROUP << --
	DECLARE has_D424x_D4260_D4261_D4268_overPast3Years INT DEFAULT 0;
	DECLARE has_same_DOS_for_D424x_D4260_D4261_D4268_as_D7210 INT DEFAULT 0;
	
	DECLARE has_D4263_D4264_D4265_D4266_D4267_D427x_overPast3Years INT DEFAULT 0;
	DECLARE has_same_DOS_for_D4263_D4264_D4265_D4266_D4267_D427x_as_D7210 INT DEFAULT 0;
	
			
	-- Variables below are used for setting Output parameters
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	-- Cursor Declarations
	declare finished bool default false;
	declare test_row_cursor cursor for
				select 	id, attend, proc_code, specialty, mid, date_of_service, tooth_no
				from  	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table;
	declare continue handler for not found set finished = true;
	
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Starts 
	-- =====================================================================================================================
	open test_row_cursor;
	get_test_row:loop
	
		fetch test_row_cursor into t_id, t_attend, t_proc_code,t_specialty ,t_mid, t_dos, t_tooth_no;
		if(finished = true)then
			leave get_test_row;
		end if;
		
		-- >> Visio [Are there any claims for this patient prior to the DOS for the D7210?]
		select 	count(*) 
		into 	has_any_claim_prior_D7210
		from 	emihealth_final.`procedure_performed`
		where 	(
				is_invalid = 0
				and date_of_service < t_dos
				and mid = t_mid
			)
			
			
			;
		-- -------------------------------------------------IF [A] STARTS------------------------------------------------------------ --
		if (has_any_claim_prior_D7210 = 0)then 
			update 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
			set 	exp_reason_level = 9
				,exp_ryg_status = 'green'
				,test_detail = concat('No claim found prior to [',t_dos,']')
			where 	id = t_id
				;
		else
			-- >> Visio [Check for code D71xx, D721x, D722x, d723x, D724x, D725x over the past 3 years for this tooth]
			select 	count(*) , max(date_of_service)
			into 	has_D71xx_D721x_D722x_d723x_D724x_D725x_overPast3Years, @temp_dos_for_detail
			FROM 	emihealth_final.`ext_upcode_procedure_performed_final`
			WHERE 	tooth_no = t_tooth_no
				AND (proc_code like 'D71%' or proc_code like 'D721%' or proc_code like 'D722%' 
				     or proc_code like 'D723%' or proc_code like 'D724%' or proc_code like 'D725%' )
				AND date_of_service < t_dos
				AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
				and MID = t_mid
				;
			-- ------------------------------------------------IF [B] STARTS--------------------------------------------------------- --
			if (has_D71xx_D721x_D722x_d723x_D724x_D725x_overPast3Years != 0)then 
				UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
				SET 	exp_reason_level = 1
					,exp_ryg_status = 'red'
					,test_detail = concat('Has proc code like  D71xx, D721x, D722x, d723x, D724x, D725x max[',@temp_dos_for_detail,']')
				wHERE 	id = t_id
					;
			else
				-- >> Visio [For Explain Group] [Does the Comment / Remarks section of the claim include the tooth number of the D7210 AND contains 
				-- >> any of the following words â€œbrokenâ€, â€œrootâ€, â€œresidualâ€ or â€œdilacerationâ€ or â€œNEAâ€]
				select 	count(*)
				into 	has_explian_group
				from 	emihealth_final.`ext_upcode_procedure_performed_final`
				where 	tooth_no = t_tooth_no
					and proc_code = 'D7210'
					and date_of_service = t_dos
					and (
						remarks LIKE '%brok%' OR remarks LIKE '%root%' OR remarks LIKE '%residu%' 
						OR remarks LIKE '%dilacer%' OR remarks LIKE '%nea%'
					     )
					AND MID = t_mid
					 ;
					 
				-- >> Visio [For Filling Group][Check for code D2161, D2335, D2394, D2644, D2664 over the past 3 years for this tooth]
				SELECT 	COUNT(*)
				INTO 	has_filling_group
				FROM 	emihealth_final.`ext_upcode_procedure_performed_final`
				WHERE 	tooth_no = t_tooth_no
					AND proc_code like 'D33%'
					AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
					and mid = t_mid
					 ;
					 
				-- >> Visio [For Root Cannal Group] [Check for code D33xx over the past 3 years for this tooth]
				SELECT 	COUNT(*)
				INTO 	has_rootCanal_group
				FROM 	emihealth_final.`ext_upcode_procedure_performed_final`
				WHERE 	tooth_no = t_tooth_no
					AND proc_code IN ('D2161', 'D2335', 'D2394', 'D2644', 'D2664')
					AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
					and MID = t_mid
					 ;
				
				-- >> Visio [For Pin and Post Core Group][Check for code D295x over the past 3 years for this tooth]
				SELECT 	COUNT(*)
				INTO 	has_pinPostCore_group
				FROM 	emihealth_final.`ext_upcode_procedure_performed_final`
				WHERE 	tooth_no = t_tooth_no
					AND proc_code like 'D295%'
					AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
					and MID = t_mid
					 ;
					 	 
				set has_sum_all_group = has_explian_group + has_filling_group + has_rootCanal_group + has_pinPostCore_group;
				-- --------------------------------------IF [C] STARTS------------------------------------------------- --			
				if(has_sum_all_group = 0) then
							-- >> NOT BELONGS TO ANY GROUP << --
					-- >> Visio [Is the provider an Oral Surgeon (Provider taxonomy code = 1223S0112X)]
					-- -------------------------IF [D] STARTS--------------------------------- --
					if(t_specialty = '1223S0112X')then
						UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
						SET 	exp_reason_level = 4
							,exp_ryg_status = 'green'
							,test_detail = CONCAT('Dentist has the specialty[',t_specialty,']')
						WHERE 	id = t_id
							;
					else
						-- >> [Are there any other claims for this tooth on this patient by ANY other doctor over the last 3 years?]
						select 	count(*)
						into 	has_claims_on_sameTooth_withOtherDoc
						from 	emihealth_final.`procedure_performed`
						WHERE 	is_invalid = 0
							AND date_of_service <= t_dos
							and (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
							and attend != t_attend
							AND MID = t_mid
							and tooth_no = t_tooth_no
							;
						if (has_claims_on_sameTooth_withOtherDoc = 0)then
							-- >> No
							UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
							SET 	exp_reason_level = 5
								,exp_ryg_status = 'yellow'
								,test_detail = CONCAT('Patient has no claimns the other doctor')
							WHERE 	id = t_id
								;
						else
							-- >> Yes
							UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
							SET 	exp_reason_level = 6
								,exp_ryg_status = 'red'
								,test_detail = CONCAT('Found claimns with other doctor')
							WHERE 	id = t_id
								;
						end if;
					end if;
					-- -------------------------IF [D] ENDS--------------------------------- --
			        else 				
							-- >> BELONGS TO SOME GROUP << --
					-- >> Visio [Check for code D4263, D4264, D4265, D4266, D4267, D427x,  over the past 3 years for this tooth]
					SELECT 	COUNT(*)
					INTO 	has_D424x_D4260_D4261_D4268_overPast3Years
					FROM 	emihealth_final.`ext_upcode_procedure_performed_final`
					WHERE 	tooth_no = t_tooth_no
						AND (proc_code LIKE 'D424%' OR proc_code IN ('D4260','D4261','D4268'))
						AND date_of_service < t_dos
						AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
						AND MID = t_mid
						-- is_invalid = 0
						;
					-- -------------------------IF [E] STARTS--------------------------------- --
					if(has_D424x_D4260_D4261_D4268_overPast3Years != 0)then -- >>YES
						-- >> Visio [Is the DOS for the codes D424x, D4260, D4261, D4268, the same as the DOS for the D7210  for this tooth?]
						SELECT 	COUNT(*), proc_code
						INTO 	has_same_DOS_for_D424x_D4260_D4261_D4268_as_D7210, @temp_proc_code_for_detail
						FROM 	emihealth_final.`ext_upcode_procedure_performed_final`
						WHERE 	tooth_no = t_tooth_no
							AND (proc_code LIKE 'D424%' OR proc_code IN ('D4260','D4261','D4268'))
							AND date_of_service = t_dos
							AND MID = t_mid
							
							-- and is_invalid = 0
							;
						if(has_same_DOS_for_D4263_D4264_D4265_D4266_D4267_D427x_as_D7210 = 0)then
							UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
							SET 	exp_reason_level = 2
								,exp_ryg_status = 'red'
								,test_detail = CONCAT('Has no proc code on same date of service of D7210')
							WHERE 	id = t_id
								;
						else
							UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
							SET 	exp_reason_level = 7
								,exp_ryg_status = 'green'
								,test_detail = CONCAT('Has no proc code[',@temp_proc_code_for_detail,'] on same date of service of D7210')
							WHERE 	id = t_id
								;
						end if;
					else -- >> NO
						-- >> Visio [Check for code D4263, D4264, D4265, D4266, D4267, D427x,  over the past 3 years for this tooth]
						SELECT 	COUNT(*)
						INTO 	has_D4263_D4264_D4265_D4266_D4267_D427x_overPast3Years
						FROM 	emihealth_final.`ext_upcode_procedure_performed_final`
						WHERE 	-- is_invalid = 0
							tooth_no = t_tooth_no
							AND (proc_code IN ('D4263','D4264','D4265','D4266','D4267') OR proc_code LIKE 'D427%')
							-- AND date_of_service < t_dos
							AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
							AND MID = t_mid
							;
						-- ------------------ IF [F] STARTS ----------------- -- 
						if(has_D4263_D4264_D4265_D4266_D4267_D427x_overPast3Years = 0) then
							UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
							SET 	exp_reason_level = 3
								,exp_ryg_status = 'green'
								,test_detail = CONCAT('Has no proc_code like [D4263,D4264,D4265,D4266,D4267,D427x] over last 3 years')
							WHERE 	id = t_id ;
						else
							-- >> Visio [Is the DOS for the codes D4263, D4264, D4265, D4266, D4267, D427x, the same as the DOS for the D7210  for this tooth?]
							SELECT 	COUNT(*),proc_code
							INTO 	has_same_DOS_for_D4263_D4264_D4265_D4266_D4267_D427x_as_D7210, @temp_proc_code_for_detail
							FROM 	emihealth_final.`ext_upcode_procedure_performed_final`
							WHERE 	-- is_invalid = 0
								tooth_no = t_tooth_no
								AND (proc_code IN ('D4263','D4264','D4265','D4266','D4267') OR proc_code LIKE 'D427%')
								AND date_of_service = t_dos
								AND MID = t_mid
								
								;
							if(has_same_DOS_for_D4263_D4264_D4265_D4266_D4267_D427x_as_D7210 = 0) then
								UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
								SET 	exp_reason_level = 2
									,exp_ryg_status = 'red'
									,test_detail = CONCAT('Has no proc code like [D4263,D4264,D4265,D4266,D4267,D427] on same dos of D210')
								WHERE 	id = t_id
									;
							else
								if(t_proc_code = 'D7210')then
									UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
									SET 	exp_reason_level = 8
										,exp_ryg_status = 'green'
										,test_detail = CONCAT('Has no proc code[',@temp_proc_code_for_detail,'] on same dos of D210')
									WHERE 	id = t_id
										;
								else
									UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
									SET 	exp_reason_level = 8
										,exp_ryg_status = 'red'
										,test_detail = CONCAT('Has no proc code[',@temp_proc_code_for_detail,'] on same dos of D210')
									WHERE 	id = t_id
										;
								end if;
							end if;
						end if;
						-- ------------------ IF [F] ENDS ----------------- -- 
					end if;
					-- -------------------------IF [E] ENDS --------------------------------- --
					
				end if;
				-- --------------------------------------IF [C] ENDS ------------------------------------------------- --
				
			end if;
			-- ------------------------------------------------IF [B] ENDS----------------------------------------------------------- --
		end if;
		-- -------------------------------------------------IF [A] ENDS------------------------------------------------------------ --
	end loop;
	close test_row_cursor;
	-- =====================================================================================================================
	--            				    Algo Core Processing Ends
	-- =====================================================================================================================
	
	UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
	SET 	test_status = 1
	WHERE 	act_reason_level = exp_reason_level
		;
	
	UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
	SET 	test_status = 0
	WHERE 	act_reason_level != exp_reason_level
		;
		
	-- Setting Up Output parameters [success, test_status, test_detail]
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_18_extUpcodeAxomatic_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_18_extUpcodeAxomatic_test_table WHERE  act_reason_level != exp_reason_level;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_18_extUpcodeAxomatic_test_table WHERE exp_reason_level IS NULL;
	
	IF(temp_count>0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_18_extUpcodeAxomatic_test_table WHERE act_reason_level != exp_reason_level;
		IF(temp_count=0) THEN
			SET test_status=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts2_tc1C_resReasonsValidation_opti` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts2_tc1C_resReasonsValidation_opti` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts2_tc1C_resReasonsValidation_opti`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	-- =====================================================================================================================
	--            					Declaring All Variables 
	-- =====================================================================================================================
	-- For Holdind Data From Cursor
	declare t_id BIGINT(20) default 0 ;
	declare t_attend VARCHAR(40) default '' ;
	declare t_mid VARCHAR(99) DEFAULT '';
	declare t_specialty varchar(250) default '';
	declare t_dos datetime default null;
	Declare t_proc_code VARCHAR(99) DEFAULT '';
	declare t_patient_age INT DEFAULT 0;
	declare t_tooth_no VARCHAR(99) default '' ;
	
	-- For Holding Results of Queries
	
	declare has_any_claim_prior_D7210 int default 0;
			-- >> NOT BELONGS TO ANY GROUP << --
	DECLARE has_D71xx_D721x_D722x_d723x_D724x_D725x_overPast3Years INT DEFAULT 0;
	declare has_explian_group, has_filling_group, has_rootCanal_group, has_pinPostCore_group, has_sum_all_group int Default 0;
	declare has_claims_on_sameTooth_withOtherDoc int Default 0;
			-- >> BELONGS TO SOME GROUP << --
	DECLARE has_D424x_D4260_D4261_D4268_overPast3Years INT DEFAULT 0;
	DECLARE has_same_DOS_for_D424x_D4260_D4261_D4268_as_D7210 INT DEFAULT 0;
	
	DECLARE has_D4263_D4264_D4265_D4266_D4267_D427x_overPast3Years INT DEFAULT 0;
	DECLARE has_same_DOS_for_D4263_D4264_D4265_D4266_D4267_D427x_as_D7210 INT DEFAULT 0;
	
			
	-- Variables below are used for setting Output parameters
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	-- Cursor Declarations
	declare finished bool default false;
	declare test_row_cursor cursor for
				select 	id, attend, specialty, mid, date_of_service, tooth_no
				from  	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table;
	declare continue handler for not found set finished = true;
	
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Starts 
	-- =====================================================================================================================
	open test_row_cursor;
	get_test_row:loop
	
		fetch test_row_cursor into t_id, t_attend, t_specialty ,t_mid, t_dos, t_tooth_no;
		if(finished = true)then
			leave get_test_row;
		end if;
		
		-- >> Visio [Are there any claims for this patient prior to the DOS for the D7210?]
		select 	count(*) 
		into 	has_any_claim_prior_D7210
		from 	emihealth_final.`procedure_performed`
		where 	is_invalid = 0
			and date_of_service < t_dos
			and mid = t_mid;
		-- -------------------------------------------------IF [A] STARTS------------------------------------------------------------ --
		if (has_any_claim_prior_D7210 = 0)then 
			update 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
			set 	exp_reason_level = 9
				,exp_ryg_status = 'green'
				,test_detail = concat('No claim found prior to [',t_dos,']')
			where 	id = t_id
				;
		else
			-- >> Visio [Check for code D71xx, D721x, D722x, d723x, D724x, D725x over the past 3 years for this tooth]
			select 	count(*) , max(date_of_service)
			into 	has_D71xx_D721x_D722x_d723x_D724x_D725x_overPast3Years, @temp_dos_for_detail
			FROM 	test_cases_2.t_temp_18_ext_upcode_procedure_performed_final
			WHERE 	tooth_no = t_tooth_no
				AND (proc_code like 'D71%' or proc_code like 'D721%' or proc_code like 'D722%' 
				     or proc_code like 'D723%' or proc_code like 'D724%' or proc_code like 'D725%' )
				AND date_of_service < t_dos
				AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
				and MID = t_mid
				;
			-- ------------------------------------------------IF [B] STARTS--------------------------------------------------------- --
			if (has_D71xx_D721x_D722x_d723x_D724x_D725x_overPast3Years != 0)then 
				UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
				SET 	exp_reason_level = 1
					,exp_ryg_status = 'red'
					,test_detail = concat('Has proc code like  D71xx, D721x, D722x, d723x, D724x, D725x max[',@temp_dos_for_detail,']')
				wHERE 	id = t_id
					;
			else
				-- >> Visio [For Explain Group] [Does the Comment / Remarks section of the claim include the tooth number of the D7210 AND contains 
				-- >> any of the following words â€œbrokenâ€, â€œrootâ€, â€œresidualâ€ or â€œdilacerationâ€ or â€œNEAâ€]
				select 	count(*)
				into 	has_explian_group
				from 	test_cases_2.t_temp_18_ext_upcode_procedure_performed_final
				where 	tooth_no = t_tooth_no
					and proc_code = 'D7210'
					and date_of_service = t_dos
					and (
						remarks LIKE '%brok%' OR remarks LIKE '%root%' OR remarks LIKE '%residu%' 
						OR remarks LIKE '%dilacer%' OR remarks LIKE '%nea%'
					     )
					AND MID = t_mid
					 ;
					 
				-- >> Visio [For Filling Group][Check for code D2161, D2335, D2394, D2644, D2664 over the past 3 years for this tooth]
				SELECT 	COUNT(*)
				INTO 	has_filling_group
				FROM 	test_cases_2.t_temp_18_ext_upcode_procedure_performed_final
				WHERE 	tooth_no = t_tooth_no
					AND proc_code like 'D33%'
					AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
					and mid = t_mid
					 ;
					 
				-- >> Visio [For Root Cannal Group] [Check for code D33xx over the past 3 years for this tooth]
				SELECT 	COUNT(*)
				INTO 	has_rootCanal_group
				FROM 	test_cases_2.t_temp_18_ext_upcode_procedure_performed_final
				WHERE 	tooth_no = t_tooth_no
					AND proc_code IN ('D2161', 'D2335', 'D2394', 'D2644', 'D2664')
					AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
					and MID = t_mid
					 ;
				
				-- >> Visio [For Pin and Post Core Group][Check for code D295x over the past 3 years for this tooth]
				SELECT 	COUNT(*)
				INTO 	has_pinPostCore_group
				FROM 	test_cases_2.t_temp_18_ext_upcode_procedure_performed_final
				WHERE 	tooth_no = t_tooth_no
					AND proc_code like 'D295%'
					AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
					and MID = t_mid
					 ;
					 	 
				set has_sum_all_group = has_explian_group + has_filling_group + has_rootCanal_group + has_pinPostCore_group;
				-- --------------------------------------IF [C] STARTS------------------------------------------------- --			
				if(has_sum_all_group = 0) then
							-- >> NOT BELONGS TO ANY GROUP << --
					-- >> Visio [Is the provider an Oral Surgeon (Provider taxonomy code = 1223S0112X)]
					-- -------------------------IF [D] STARTS--------------------------------- --
					if(t_specialty = '1223S0112X')then
						UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
						SET 	exp_reason_level = 4
							,exp_ryg_status = 'green'
							,test_detail = CONCAT('Dentist has the specialty[',t_specialty,']')
						WHERE 	id = t_id
							;
					else
						-- >> [Are there any other claims for this tooth on this patient by ANY other doctor over the last 3 years?]
						select 	count(*)
						into 	has_claims_on_sameTooth_withOtherDoc
						from 	emihealth_final.`procedure_performed`
						WHERE 	is_invalid = 0
							AND date_of_service < t_dos
							and (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
							and attend != t_attend
							AND MID = t_mid
							and tooth_no = t_tooth_no
							;
						if (has_claims_on_sameTooth_withOtherDoc = 0)then
							-- >> No
							UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
							SET 	exp_reason_level = 5
								,exp_ryg_status = 'yellow'
								,test_detail = CONCAT('Patient has no claimns the other doctor')
							WHERE 	id = t_id
								;
						else
							-- >> Yes
							UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
							SET 	exp_reason_level = 6
								,exp_ryg_status = 'red'
								,test_detail = CONCAT('Found claimns with other doctor')
							WHERE 	id = t_id
								;
						end if;
					end if;
					-- -------------------------IF [D] ENDS--------------------------------- --
			        else 				
							-- >> BELONGS TO SOME GROUP << --
					-- >> Visio [Check for code D4263, D4264, D4265, D4266, D4267, D427x,  over the past 3 years for this tooth]
					SELECT 	COUNT(*)
					INTO 	has_D424x_D4260_D4261_D4268_overPast3Years
					FROM 	test_cases_2.t_temp_18_ext_upcode_procedure_performed_final
					WHERE 	tooth_no = t_tooth_no
						AND (proc_code LIKE 'D424%' OR proc_code IN ('D4260','D4261','D4268'))
						AND date_of_service < t_dos
						AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
						AND MID = t_mid
						-- is_invalid = 0
						;
					-- -------------------------IF [E] STARTS--------------------------------- --
					if(has_D424x_D4260_D4261_D4268_overPast3Years != 0)then -- >>YES
						-- >> Visio [Is the DOS for the codes D424x, D4260, D4261, D4268, the same as the DOS for the D7210  for this tooth?]
						SELECT 	COUNT(*), proc_code
						INTO 	has_same_DOS_for_D424x_D4260_D4261_D4268_as_D7210, @temp_proc_code_for_detail
						FROM 	test_cases_2.t_temp_18_ext_upcode_procedure_performed_final
						WHERE 	tooth_no = t_tooth_no
							AND (proc_code LIKE 'D424%' OR proc_code IN ('D4260','D4261','D4268'))
							AND date_of_service = t_dos
							AND MID = t_mid
							
							-- and is_invalid = 0
							;
						if(has_same_DOS_for_D4263_D4264_D4265_D4266_D4267_D427x_as_D7210 = 0)then
							UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
							SET 	exp_reason_level = 2
								,exp_ryg_status = 'red'
								,test_detail = CONCAT('Has no proc code on same date of service of D7210')
							WHERE 	id = t_id
								;
						else
							UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
							SET 	exp_reason_level = 7
								,exp_ryg_status = 'green'
								,test_detail = CONCAT('Has no proc code[',@temp_proc_code_for_detail,'] on same date of service of D7210')
							WHERE 	id = t_id
								;
						end if;
					else -- >> NO
						-- >> Visio [Check for code D4263, D4264, D4265, D4266, D4267, D427x,  over the past 3 years for this tooth]
						SELECT 	COUNT(*)
						INTO 	has_D4263_D4264_D4265_D4266_D4267_D427x_overPast3Years
						FROM 	test_cases_2.t_temp_18_ext_upcode_procedure_performed_final
						WHERE 	-- is_invalid = 0
							tooth_no = t_tooth_no
							AND (proc_code IN ('D4264','D4265','D4266','D4267') OR proc_code LIKE 'D427%')
							AND date_of_service < t_dos
							AND (date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos)
							AND MID = t_mid
							;
						-- ------------------ IF [F] STARTS ----------------- -- 
						if(has_D4263_D4264_D4265_D4266_D4267_D427x_overPast3Years = 0) then
							UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
							SET 	exp_reason_level = 3
								,exp_ryg_status = 'green'
								,test_detail = CONCAT('Has no proc_code like [D4263,D4264,D4265,D4266,D4267,D427x] over last 3 years')
							WHERE 	id = t_id ;
						else
							-- >> Visio [Is the DOS for the codes D4263, D4264, D4265, D4266, D4267, D427x, the same as the DOS for the D7210  for this tooth?]
							SELECT 	COUNT(*),proc_code
							INTO 	has_same_DOS_for_D4263_D4264_D4265_D4266_D4267_D427x_as_D7210, @temp_proc_code_for_detail
							FROM 	test_cases_2.t_temp_18_ext_upcode_procedure_performed_final
							WHERE 	-- is_invalid = 0
								tooth_no = t_tooth_no
								AND (proc_code IN ('D4264','D4265','D4266','D4267') OR proc_code LIKE 'D427%')
								AND date_of_service = t_dos
								AND MID = t_mid
								
								;
							if(has_same_DOS_for_D4263_D4264_D4265_D4266_D4267_D427x_as_D7210 = 0) then
								UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
								SET 	exp_reason_level = 2
									,exp_ryg_status = 'red'
									,test_detail = CONCAT('Has no proc code like [D4263,D4264,D4265,D4266,D4267,D427] on same dos of D210')
								WHERE 	id = t_id
									;
							else
								UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
								SET 	exp_reason_level = 8
									,exp_ryg_status = 'green'
									,test_detail = CONCAT('Has no proc code[',@temp_proc_code_for_detail,'] on same dos of D210')
								WHERE 	id = t_id
									;
							end if;
						end if;
						-- ------------------ IF [F] ENDS ----------------- -- 
					end if;
					-- -------------------------IF [E] ENDS --------------------------------- --
					
				end if;
				-- --------------------------------------IF [C] ENDS ------------------------------------------------- --
				
			end if;
			-- ------------------------------------------------IF [B] ENDS----------------------------------------------------------- --
		end if;
		-- -------------------------------------------------IF [A] ENDS------------------------------------------------------------ --
	end loop;
	close test_row_cursor;
	-- =====================================================================================================================
	--            				    Algo Core Processing Ends
	-- =====================================================================================================================
	
	UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
	SET 	test_status = 1
	WHERE 	act_reason_level = exp_reason_level
		;
	
	UPDATE 	test_cases_2.t_temp_18_extUpcodeAxomatic_test_table
	SET 	test_status = 0
	WHERE 	act_reason_level != exp_reason_level
		;
		
	-- Setting Up Output parameters [success, test_status, test_detail]
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_18_extUpcodeAxomatic_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_18_extUpcodeAxomatic_test_table WHERE  act_reason_level != exp_reason_level;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_18_extUpcodeAxomatic_test_table WHERE exp_reason_level IS NULL;
	
	IF(temp_count>0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_18_extUpcodeAxomatic_test_table WHERE act_reason_level != exp_reason_level;
		IF(temp_count=0) THEN
			SET test_status=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying result and pl_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts3_tc4_resPlDailyCount ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying paid money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts3_tc5_resPlDailyEqualPaidMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts3_tc6_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying recovered money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts3_tc6_resPlDailyEqualRecoveredMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying red counts in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts3_tc7_resPlDailyEqualReds ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts3_tc8_resPlDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying Distinct years in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts3_tc8_resPlDailyDistinctYearsCount ');
		
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.pl_ext_upcode_axiomatic_stats_daily] by generating test table[test_cases_2.t_18_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts3_tc2_plTestTable/t_18_extUpcodeAxomatic_ts3_tc1_plDailyValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts3_tc1_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts3_tc1_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts3_tc1_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT null;
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT null;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_18_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
	
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.surg_ext_final_results WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.surg_ext_final_results WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.surg_ext_final_results WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.surg_ext_final_results WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.surg_ext_final_results WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.surg_ext_final_results WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.surg_ext_final_results WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations = temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_18_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			UPDATE test_cases_2.t_18_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend='';
			-- SET t_dos= '';
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = null;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_18_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_18_pl_temp WHERE t_18_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_18_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_18_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_18_pl_temp WHERE t_18_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts3_tc2_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts3_tc2_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts3_tc2_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_ext_upcode_axiomatic_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_daily_extUpcodeAxiomatic';
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows < 50)then
		set required_rows = 50;
	end if;
	
	
	 DROP TABLE IF EXISTS t_18_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_18_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  Default NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_18_pl_temp; 
	
	
	insert into test_cases_2.t_18_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_ext_upcode_axiomatic_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_18_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.surg_ext_final_results WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_ext_upcode_axiomatic_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`surg_ext_final_results` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_ext_upcode_axiomatic_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts3_tc6_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts3_tc6_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts3_tc6_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`surg_ext_final_results` WHERE isactive=1;
	SELECT SUM(recovered_money) INTO pld_rec_money FROM emihealth_final.`pl_ext_upcode_axiomatic_stats_daily` WHERE isactive=1;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`surg_ext_final_results` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_ext_upcode_axiomatic_stats_daily` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`surg_ext_final_results` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_ext_upcode_axiomatic_stats_daily` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying pl_daily and db_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_18_extUpcodeAxomatic_ts4_tc4_checkCountDosPlNDb');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying paid money db_daily  and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts4_tc5_checkTotalCountPlNDb ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying recovered money in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts4_tc6_checkRygCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying red counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts4_tc7_checkRedCountsPlNDbTables ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_18_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts4_tc2_dashboardTestTable/ t_18_extUpcodeAxomatic_ts4_tc1_dashboardDailyValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts4_tc1_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts4_tc1_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts4_tc1_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT Null;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_18_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_ext_upcode_axiomatic_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_ext_upcode_axiomatic_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_ext_upcode_axiomatic_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_ext_upcode_axiomatic_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_18_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_18_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos='';
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_18_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_18_dashboard_temp WHERE t_18_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_18_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_18_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_18_dashboard_temp WHERE t_18_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts4_tc2_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts4_tc2_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts4_tc2_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=18;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_daily_extUpcodeAxomatic';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_18_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_18_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_18_dashboard_temp; 
	
	
	insert into test_cases_2.t_18_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=18) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_18_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts4_tc4_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts4_tc4_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts4_tc4_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.`pl_ext_upcode_axiomatic_stats_daily` WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=18;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_ext_upcode_axiomatic_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=18;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_ext_upcode_axiomatic_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=18;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts4_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts4_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts4_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.pl_simple_prophy_stats_yearly where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_extUpcodeAxiomatic';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_18_ts4_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_18_ts4_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_18_ts4_tc7; 
	
	
	insert into test_cases_2.t_temp_18_ts4_tc7(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.pl_ext_upcode_axiomatic_stats_yearly WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_18_ts4_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts4_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts4_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts4_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default "";
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default '';
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_18_ts4_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`surg_ext_final_results` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`surg_ext_final_results` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.surg_ext_final_results WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.surg_ext_final_results WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.surg_ext_final_results WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.surg_ext_final_results WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.surg_ext_final_results WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`surg_ext_final_results` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_18_ts4_tc7  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_18_ts4_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code ='';
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_18_ts4_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_18_ts4_tc7 WHERE t_temp_18_ts4_tc7.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_18_ts4_tc7;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_18_ts4_tc7) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_18_ts4_tc7 where t_temp_18_ts4_tc7.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_ext_upcode_axiomatic_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=18;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts4_tc8_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts4_tc8_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts4_tc8_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_ext_upcode_axiomatic_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=18;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts4_tc9_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts4_tc9_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts4_tc9_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_ext_upcode_axiomatic_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=18;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying result and pl_monthly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts5_tc2_checkCountResNPlMonthly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying paid money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts5_tc3_checkPaidMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying recovered money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts5_tc4_checkRecoveredMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts5_tc5_checkEqualRedsResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying red counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts5_tc5_checkEqualRedsResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts5_tc6_distinctYearsCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying distinct years counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_18_extUpcodeAxomatic_ts5_tc6_distinctYearsCountResNPlMonthly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.pl_ext_upcode_axiomatic_stats_monthly] by generating test table[test_cases_2.t_temp_18_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts5_tc7A_testTableGen/t_18_extUpcodeAxomatic_ts5_tc7B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`surg_ext_final_results` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO plm_count FROM emihealth_final.`pl_ext_upcode_axiomatic_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.surg_ext_final_results WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_ext_upcode_axiomatic_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.surg_ext_final_results WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_ext_upcode_axiomatic_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts5_tc5_checkEqualRedsResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts5_tc5_checkEqualRedsResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts5_tc5_checkEqualRedsResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.surg_ext_final_results WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.`pl_ext_upcode_axiomatic_stats_monthly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts5_tc6_distinctYearsCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts5_tc6_distinctYearsCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts5_tc6_distinctYearsCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.surg_ext_final_results WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.`pl_ext_upcode_axiomatic_stats_monthly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_ext_upcode_axiomatic_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_extUpcodeAxiomatic';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_18_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_18_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_18_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_18_ts5_tc7(attend, MONTH,YEAR, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,MONTH,YEAR,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		FROM emihealth_final.`pl_ext_upcode_axiomatic_stats_monthly` WHERE isactive=1 ORDER BY (CONCAT(MONTH,YEAR)) DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_18_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_18_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.`surg_ext_final_results` WHERE isactive=1 AND MONTH(surg_ext_final_results.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.`surg_ext_final_results` WHERE isactive=1 AND MONTH(surg_ext_final_results.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.surg_ext_final_results WHERE isactive=1 AND MONTH(surg_ext_final_results.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.surg_ext_final_results WHERE isactive=1 AND MONTH(surg_ext_final_results.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.surg_ext_final_results WHERE isactive=1 AND MONTH(surg_ext_final_results.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.surg_ext_final_results WHERE isactive=1 AND MONTH(surg_ext_final_results.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.surg_ext_final_results WHERE isactive=1 AND MONTH(surg_ext_final_results.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) INTO temp_expec_no_days_wd_violations 
			FROM emihealth_final.`surg_ext_final_results` 
			WHERE isactive=1 AND MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_18_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_18_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_18_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_18_ts5_tc7 WHERE t_temp_18_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_18_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_18_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_18_ts5_tc7 WHERE t_temp_18_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_TS6_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_TS6_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_TS6_PL_STATS_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying result and pl_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts6_tc1_checkCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying paid money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts6_tc2_checkPaidMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying recovered money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts6_tc3_checkRecoveredMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying red counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts6_tc4_checkEqualRedsResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts6_tc5_distinctYearsCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying distinct years counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts6_tc5_distinctYearsCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.pl_ext_upcode_axiomatic_stats_yearly] by generating test table[test_cases_2.t_temp_18_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_18_extUpcodeAxomatic_ts6_tc6A_testTableGen/t_18_extUpcodeAxomatic_ts6_tc6B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`surg_ext_final_results` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_ext_upcode_axiomatic_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`surg_ext_final_results` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_ext_upcode_axiomatic_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`surg_ext_final_results`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_ext_upcode_axiomatic_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`surg_ext_final_results` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_ext_upcode_axiomatic_stats_yearly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts6_tc5_distinctYearsCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts6_tc5_distinctYearsCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts6_tc5_distinctYearsCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.`surg_ext_final_results` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.`pl_ext_upcode_axiomatic_stats_yearly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_ext_upcode_axiomatic_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_extUpcodeAxomatic';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_18_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_18_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_18_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_18_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_ext_upcode_axiomatic_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_18_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_18_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`surg_ext_final_results` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`surg_ext_final_results` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.surg_ext_final_results WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.surg_ext_final_results WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.surg_ext_final_results WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.surg_ext_final_results WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.surg_ext_final_results WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`surg_ext_final_results` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_18_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF(round(temp_actual_recovered_money,0) != round(temp_expec_recovered_money,0)) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_18_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_18_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_18_ts6_tc6 WHERE t_temp_18_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_18_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_18_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_18_ts6_tc6 where t_temp_18_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying distinct year counts in pl_monthly and db_monthly',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts7_tc2_countDistinctYearsPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying total_count db_monthly  and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts7_tc3_checkTotalCountPlMNdbm ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying providers count in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts7_tc4_checkCountNoOfProvPlMNdbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts7_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying yellow counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_18_extUpcodeAxomatic_ts7_tc6_checkYellowCountsPlNDbTables');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts7_tc7_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying green counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_18_extUpcodeAxomatic_ts7_tc7_checkGreenCountsPlMNDbM');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying paid_money  in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_18_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts7_tc9A_testTableGen/t_18_extUpcodeAxomatic_ts7_tc9B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_ext_upcode_axiomatic_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=18;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
		set success = true;
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
		SET success = TRUE;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_ext_upcode_axiomatic_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=18;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_ext_upcode_axiomatic_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=18;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
	set success = true;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	pl_yellow_count 
	from 	emihealth_final.pl_ext_upcode_axiomatic_stats_monthly
	WHERE 	isactive=1 AND color_code='yellow';
	
	
	SELECT 	SUM(total_yellow) 
	INTO 	db_yellow_count 
	FROM 	emihealth_final.dashboard_monthly_results 
	WHERE 	isactive=1 AND TYPE=18;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts7_tc7_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts7_tc7_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts7_tc7_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_ext_upcode_axiomatic_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=18;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_ext_upcode_axiomatic_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=18;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_monthly_results WHERE isactive=1 and type=18;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_extUpcodeAxiomatic';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_18_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_18_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_18_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_18_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=18) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	select count(*)into temp_count FROM test_cases_2.t_temp_18_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_18_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_ext_upcode_axiomatic_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.`pl_ext_upcode_axiomatic_stats_monthly` WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_ext_upcode_axiomatic_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_ext_upcode_axiomatic_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_18_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_18_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_yellow=temp_actual_total_yellow=0; 
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_18_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_18_ts7_tc9 WHERE t_temp_18_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_18_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_18_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_18_ts7_tc9 WHERE t_temp_18_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_18_extUpcodeAxomatic_ts8_tc4_checkCountNoOfProvPlYNDbY');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts8_tc5_checkTotalRedCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts8_tc6_checkTotalYellowCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying yellow counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts8_tc6_checkTotalYellowCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts8_tc7_checkGreenCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying paid money money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_18_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_18_extUpcodeAxomatic_ts8_tc9A_testTableGen/ t_18_extUpcodeAxomatic_ts8_tc9B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.`pl_ext_upcode_axiomatic_stats_yearly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=18;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.`pl_ext_upcode_axiomatic_stats_yearly` WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=18;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.`pl_ext_upcode_axiomatic_stats_yearly` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=18;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_ext_upcode_axiomatic_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=18;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_ext_upcode_axiomatic_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=18;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_ext_upcode_axiomatic_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=18;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_ext_upcode_axiomatic_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=18;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts8_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts8_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts8_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=18;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_extUpcodeAxiomatic';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_18_ts8_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_18_ts8_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_18_ts8_tc9; 
	
	
	insert into test_cases_2.t_temp_18_ts8_tc9(year,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=18) ORDER BY(year)desc LIMIT required_rows;
	
	select count(*)into temp_count FROM test_cases_2.t_temp_18_ts8_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18_extUpcodeAxomatic_ts8_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18_extUpcodeAxomatic_ts8_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18_extUpcodeAxomatic_ts8_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_18_ts8_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_ext_upcode_axiomatic_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_ext_upcode_axiomatic_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_ext_upcode_axiomatic_stats_yearly WHERE YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_ext_upcode_axiomatic_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_18_ts8_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_18_ts8_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_18_ts8_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_18_ts8_tc9 WHERE t_temp_18_ts8_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_18_ts8_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_18_ts8_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_18_ts8_tc9 WHERE t_temp_18_ts8_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_18________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_18________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_18________________`()
BEGIN
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_MAIN`()
BEGIN
	call `t_19_overactInactCodeDist_TS2_RESULT_TABLE`();
	call `t_19_overactInactCodeDist_TS8_DASHBOARD_YEARLY_TABLE`();
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_TS1_SOURCE_TABLE`()
BEGIN
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_19_overactInactCodeDist_ts2_tc5A_testTableGen`(@a);
	CALL test_cases_2.`t_19_overactInactCodeDist_ts2_tc5B_reasons`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(19,
	     'Verifying result table[emihealth_final.overactive_code_distribution_yearly_by_attend] using test table[test_cases_2.`t_temp_19_overactiveInactive_result_test_table`]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_19_overactInactCodeDist_ts2_tc5A_testTableGen / t_19_overactInactCodeDist_ts2_tc5B_reasons ');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_ts2_tc5A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_ts2_tc5A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_ts2_tc5A_testTableGen`(out success Bool)
BEGIN
	-- =================================================
	--            Declaring All Variables 
	-- =================================================
	declare reason_percent decimal(5,2);
	declare reason_ryg_status varchar(30) default null;
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        -- =================================================
	--            Creating Table Structure
	-- =================================================
	
	DROP TABLE IF EXISTS test_cases_2.`t_temp_19_overactiveInactive_result_test_table`;
	
	CREATE  TABLE IF NOT EXISTS test_cases_2.`t_temp_19_overactiveInactive_result_test_table`(
	`id` BIGINT(20) UNSIGNED  NOT NULL AUTO_INCREMENT ,
	`res_id` BIGINT(20)  DEFAULT NULL,
	`attend` VARCHAR(40) DEFAULT NULL,
	-- `specialty` varchar(20) default null,
	-- `payer_id` varchar(20) default null,
	-- `mid` varchar(250) default null,
	`year` int(11) default null,
	
	
	`act_patients_wd_xplus_visits` BIGINT(11) DEFAULT NULL,
	`exp_patients_wd_xplus_visits` BIGINT(11) DEFAULT NULL,
	
	`act_all_patients` BIGINT(11) DEFAULT NULL,
	`exp_all_patients` BIGINT(11) DEFAULT NULL,
	
	`act_attend_mean` DOUBLE DEFAULT NULL,
	`exp_attend_mean` DOUBLE DEFAULT NULL,
	
	`act_all_mean` DOUBLE DEFAULT NULL,
	`exp_all_mean` DOUBLE DEFAULT NULL,
	
	`act_all_sd` DOUBLE DEFAULT NULL,
	`exp_all_sd` DOUBLE DEFAULT NULL,
	
	`act_income` DOUBLE DEFAULT NULL,
	`exp_income` double DEFAULT NULL,
	
	`act_ryg_status` VARCHAR(15) DEFAULT NULL,
	`exp_ryg_status` VARCHAR(15) DEFAULT NULL,
	
	`test_status` BOOL DEFAULT NULL,
	`test_detail` TINYTEXT DEFAULT NULL,
	PRIMARY KEY (`id`)
	) ENGINE=innodb DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE test_cases_2.`t_temp_19_overactiveInactive_result_test_table`;
	
	-- =================================================
	--           Sampling And Inserting Data 
	-- =================================================
	SET iterator = 101;
        WHILE(iterator < 104) DO
		SET selected_reason= iterator;
		SELECT reason_weight, ryg_status INTO reason_percent, reason_ryg_status FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=19 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.overactive_code_distribution_yearly_by_attend WHERE color_code = reason_ryg_status and isactive = 1;
		
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		
		INSERT INTO test_cases_2.`t_temp_19_overactiveInactive_result_test_table`
		(
			res_id
			,attend
			,YEAR
			
			,act_patients_wd_xplus_visits
			,act_all_patients
			,act_attend_mean
			
			,act_all_mean
			,act_all_sd
			
			,act_income
			,act_ryg_status
		)
		SELECT 	
			id
			,attend
			,year
			
			,patients_wd_xplus_visits
			,all_patients
			,attend_mean
			
			,all_mean
			,all_sd
			
			,income
			,color_code
		FROM 	emihealth_final.overactive_code_distribution_yearly_by_attend
		WHERE 	color_code = reason_ryg_status 
			AND isactive=1 
		ORDER 	
		BY 	RAND() 
		LIMIT 	reason_sample_count;	
		
		SET iterator = iterator + 1;
	END WHILE;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_ts2_tc5B_reasons` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_ts2_tc5B_reasons` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_ts2_tc5B_reasons`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	-- =====================================================================================================================
	--            					Declaring All Variables 
	-- =====================================================================================================================
	-- For Holdind Data From Cursor
	declare t_id BIGINT(20) default 0 ;
	declare t_attend VARCHAR(40) default null;
	declare t_specialty varchar(20) default null;
	declare t_payer_id varchar(20) default null;
	declare t_mid varchar(250) default null;
	declare t_year int(11) default null ;
	
	-- For Holding Results of Queries
	declare count_patients_wd_8_visits, count_all_patients bigint(20) default 0;
	declare total_income, var_all_mean, var_all_sd double default null;
	
	
	-- Variables below are used for setting Output parameters
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	-- Cursor Declarations
	declare finished bool default false;
	declare test_row_cursor cursor for
				select 	id, attend,year  
				from  	test_cases_2.t_temp_19_overactiveInactive_result_test_table
				;
	declare continue handler for not found set finished = true;
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Starts 
	-- =====================================================================================================================
	
	open test_row_cursor;
	get_test_row:loop
			fetch test_row_cursor into t_id, t_attend, t_year;
			if(finished = true)then
				leave get_test_row;
			end if;	
			
			-- >>
			
			SELECT 	COUNT(DISTINCT(CASE WHEN total_num_of_visits >=8 THEN MID END)) as a 
				,COUNT(DISTINCT(MID)) as b
				, round(sum(case when color_code = 'red' then total_amount end),2)
			into 	count_patients_wd_8_visits,count_all_patients, total_income
			FROM 	emihealth_final.`overactive_inactive`
			where 	attend = t_attend
				and year = t_year
				and isactive = 1
			HAVING a>0;
			
			
			select 	round(avg(attend_mean),2)
				,round(std(attend_mean),2)
			into 	var_all_mean, var_all_sd
			from 	emihealth_final.overactive_code_distribution_yearly_by_attend
			where 	year = t_year;
			
			
			update 	t_temp_19_overactiveInactive_result_test_table
			set 	exp_patients_wd_xplus_visits = count_patients_wd_8_visits
				,exp_all_patients = count_all_patients
				,exp_attend_mean = round(count_patients_wd_8_visits/count_all_patients *100,2)
				,exp_income = total_income
				,exp_all_mean = var_all_mean
				,exp_all_sd = var_all_sd
			where 	id = t_id;
			-- >>
		end loop;
	close test_row_cursor;
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Ends
	-- =====================================================================================================================
	
	UPDATE 	test_cases_2.t_temp_19_overactiveInactive_result_test_table
	SET 	exp_ryg_status = 'red'
	WHERE 	exp_attend_mean > exp_all_mean + 1.5*exp_all_sd
		;
	UPDATE 	test_cases_2.t_temp_19_overactiveInactive_result_test_table
	SET 	exp_ryg_status = 'yellow'
	WHERE 	exp_attend_mean > exp_all_mean + 1*exp_all_sd
		and 
		exp_attend_mean <= exp_all_mean + 1.5*exp_all_sd
		;
	UPDATE 	test_cases_2.t_temp_19_overactiveInactive_result_test_table
	SET 	exp_ryg_status = 'green'
	WHERE 	
		exp_attend_mean <= exp_all_mean + 1*exp_all_sd
		;
	
	update 	test_cases_2.t_temp_19_overactiveInactive_result_test_table
	set  	test_status = 1
	where 	act_ryg_status = exp_ryg_status;
	
	UPDATE 	test_cases_2.t_temp_19_overactiveInactive_result_test_table
	SET  	test_status = 0
	WHERE 	act_ryg_status != exp_ryg_status;
	
		
		
	-- Setting Up Output parameters [success, test_status, test_detail]
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_19_overactiveInactive_result_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_19_overactiveInactive_result_test_table as tt WHERE  tt.test_status = 0;
	set temp_count = 0;
	SELECT COUNT(*) into temp_count FROM test_cases_2.t_temp_19_overactiveInactive_result_test_table as tt where tt.test_status is null ;
	IF(temp_count>0) THEN
		SET out_success=FALSE;
	ELSE
		SET out_success=TRUE;
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_19_overactiveInactive_result_test_table as tt WHERE tt.test_status = 0;
		IF(temp_count=0) THEN
			SET out_test_status=TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_19_overactInactCodeDist_ts8_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_19_overactInactCodeDist_ts8_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(19,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_19_overactInactCodeDist_dbYearly_test_table]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_19_overactInactCodeDist_ts8_tc1A_testTableGen/t_19_overactInactCodeDist_ts8_tc1B_columnValidation ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_19_overactInactCodeDist_ts8_tc2_countDistinctYearsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(19,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_19_overactInactCodeDist_ts8_tc2_countDistinctYearsPlYnDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_19_overactInactCodeDist_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(19,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_19_overactInactCodeDist_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_19_overactInactCodeDist_ts8_tc4_checkCountNoOfProvPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(19,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_19_overactInactCodeDist_ts8_tc4_checkCountNoOfProvPlYnDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_19_overactInactCodeDist_ts8_tc5_checkTotalRedCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(19,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_19_overactInactCodeDist_ts8_tc5_checkTotalRedCountsPlYnDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_19_overactInactCodeDist_ts8_tc6_checkTotalYellowCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(19,'Verifying yellow counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_19_overactInactCodeDist_ts8_tc6_checkTotalYellowCountsPlYnDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_19_overactInactCodeDist_ts8_tc7_checkGreenCountsPlYnDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(19,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_19_overactInactCodeDist_ts8_tc7_checkGreenCountsPlYnDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_19_overactInactCodeDist_ts8_tc8_totalPaidMoneyPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(19,'Verifying paid money money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_19_overactInactCodeDist_ts8_tc8_totalPaidMoneyPlYNDbY ');
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_ts8_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_ts8_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_ts8_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=19;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_overactInactCodeDist';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_19_overactInactCodeDist_dbYearly_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_19_overactInactCodeDist_dbYearly_test_table` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill default 0,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT null,
	  
	  `actual_total_red` INT(11)zerofill  default 0,
	  `expec_total_red` INT(11) zerofill DEFAULT null,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  DEFAULT 0,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  default 0,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT null,
	  
	  `actual_paid_money` double default 0,
	  `expec_paid_money` double default 0,
	  
	  `actual_recovered_money` double default 0,
	  `expec_recovered_money` double default 0,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_19_overactInactCodeDist_dbYearly_test_table; 
	
	
	insert into test_cases_2.t_temp_19_overactInactCodeDist_dbYearly_test_table
		(
			year
			,actual_no_of_providers
			,actual_total_red
			,actual_total_yellow
			,actual_total_green 
			,actual_paid_money
			,actual_recovered_money
		)
	SELECT 
			year
			,number_of_providers
			,total_red
			,total_yellow
			,total_green
			,total_paid_money
			,total_red_recovered_money
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 and type = 19
	ORDER 	BY(year)desc 
	LIMIT 	required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_19_overactInactCodeDist_dbYearly_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_ts8_tc1B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_ts8_tc1B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_ts8_tc1B_columnValidation`(OUT out_success BOOL ,OUT out_test_status BOOL,OUT out_test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	declare temp_expec_paid_money,temp_actual_paid_money double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_19_overactInactCodeDist_dbYearly_test_table ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
     
        -- t_temp_19_overactInactCodeDist_dbYearly_test_table 
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT	COUNT(distinct(attend)) 
			INTO 	temp_expec_no_of_providers 
			from 	emihealth_final.overactive_code_distribution_yearly_by_attend 
			WHERE 	year=t_year AND isactive= 1;
			
			SELECT 	COUNT(distinct(attend))
			INTO 	temp_expec_total_red  
			from 	emihealth_final.overactive_code_distribution_yearly_by_attend 
			WHERE 	YEAR=t_year  AND color_code='red' AND isactive=1;
			
			SELECT 	COUNT(DISTINCT(attend))
			INTO 	temp_expec_total_yellow  
			FROM 	emihealth_final.overactive_code_distribution_yearly_by_attend 
			WHERE  	YEAR=t_year  AND color_code='yellow' AND isactive=1;
						
			SELECT 	COUNT(distinct(attend))
			INTO 	temp_expec_total_green  
			from 	emihealth_final.overactive_code_distribution_yearly_by_attend 
			WHERE  	YEAR=t_year  AND color_code='green' AND isactive=1;
			
			SELECT 	sum(income)
			INTO 	temp_expec_paid_money
			FROM 	emihealth_final.overactive_code_distribution_yearly_by_attend
			WHERE  	YEAR=t_year AND isactive=1;
			set temp_expec_paid_money = round(temp_expec_paid_money,2);
			
			SELECT 	SUM(income)
			INTO 	temp_expec_recovered_money
			FROM 	emihealth_final.overactive_code_distribution_yearly_by_attend 
			WHERE  	YEAR=t_year AND isactive=1 and color_code = 'red';
			set temp_expec_recovered_money = round(temp_expec_recovered_money,2);
			
			SELECT 
				actual_no_of_providers
				,actual_total_red
				,actual_total_yellow
				,actual_total_green
				,actual_paid_money
				,actual_recovered_money
			INTO 	
				temp_actual_no_of_providers
				,temp_actual_total_red
				,temp_actual_total_yellow
				,temp_actual_total_green
				,temp_actual_paid_money
				,temp_actual_recovered_money
				
			FROM 	test_cases_2.t_temp_19_overactInactCodeDist_dbYearly_test_table
			WHERE 	YEAR=t_year 
			lIMIT 	1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET temp_test_detail='Column(no_of_providers) values are not matched';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET temp_test_detail='Column(total_red)    values  are  not  matched';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_green !=temp_actual_total_green) THEN
						SET temp_test_detail='Column(total_green) values   are  not matched';
						SET temp_test_status=FALSE;
					ELSE
						if(temp_expec_paid_money != temp_actual_paid_money)then
							SET temp_test_detail='Column(paid_money) values   are  not matched';
							SET temp_test_status=FALSE;
						else
							if(round(temp_expec_recovered_money,0) != round(temp_actual_recovered_money,0))then
								SET temp_test_detail='Column(recovered_money) values   are  not matched';
								SET temp_test_status=FALSE;
							else
								SET temp_test_detail='Data   in   against   all    columns   is   ok';
								SET temp_test_status=TRUE;
							end if;
						end if;
					END IF;
				END IF;		
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_19_overactInactCodeDist_dbYearly_test_table 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red = temp_expec_total_red, 
					expec_total_green = temp_expec_total_green,
					expec_total_yellow = temp_expec_total_yellow,
					expec_paid_money = temp_expec_paid_money,
					expec_recovered_money = temp_expec_recovered_money,
					test_status = temp_test_status,
					test_detail = temp_test_detail
			WHERE YEAR = t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail=null;
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_19_overactInactCodeDist_dbYearly_test_table;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_19_overactInactCodeDist_dbYearly_test_table WHERE t_temp_19_overactInactCodeDist_dbYearly_test_table.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_19_overactInactCodeDist_dbYearly_test_table;
	IF(temp_count = 0) THEN
		SET out_success=FALSE;
		SET out_test_status=FALSE;
		SET out_test_detail='Table(t_temp_19_overactInactCodeDist_dbYearly_test_table) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_19_overactInactCodeDist_dbYearly_test_table WHERE t_temp_19_overactInactCodeDist_dbYearly_test_table.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET out_success= TRUE;
			SET out_test_status= TRUE;
			SET out_test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET out_success= TRUE;
			SET out_test_status=FALSE;
			SET out_test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_ts8_tc2_countDistinctYearsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_ts8_tc2_countDistinctYearsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_ts8_tc2_countDistinctYearsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT 	COUNT(DISTINCT(year)) 
	into 	ply_dist_years_count 
	from 	emihealth_final.`overactive_code_distribution_yearly_by_attend` 
	WHERE 	isactive=1;
	
	SELECT 	COUNT(DISTINCT(Year)) 
	into 	dby_dist_years_count 
	from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=19;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
	set success = 1;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT  COUNT(*) 
	INTO 	ply_total_count
	from
		(
			select 	count(*)
			from 	emihealth_final.overactive_code_distribution_yearly_by_attend
			where 	isactive = 1
			GROUP 	by YEAR	
		) as myTab;
	
	SELECT 	count(*) 
	INTO 	dby_total_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE= 19;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_ts8_tc4_checkCountNoOfProvPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_ts8_tc4_checkCountNoOfProvPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_ts8_tc4_checkCountNoOfProvPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT 	sum(yearly_attends)
	INTO 	ply_total_count 
	from 	(
			select 	count(*) as yearly_attends
			from 	emihealth_final.`overactive_code_distribution_yearly_by_attend`
			where 	isactive = 1
			group 	by year
		) as result
	;
	
	SELECT 	SUM(number_of_providers) 
	INTO 	dby_total_prov_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=19;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_ts8_tc5_checkTotalRedCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_ts8_tc5_checkTotalRedCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_ts8_tc5_checkTotalRedCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	into 	ply_red_count 
	from 	emihealth_final.overactive_code_distribution_yearly_by_attend 
	WHERE 	isactive=1 AND color_code='red'
		;
	
	SELECT 	SUM(total_red) 
	into 	dby_red_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=19
		;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_ts8_tc6_checkTotalYellowCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_ts8_tc6_checkTotalYellowCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_ts8_tc6_checkTotalYellowCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	ply_yellow_count 
	from 	emihealth_final.overactive_code_distribution_yearly_by_attend 
	WHERE 	isactive=1 AND color_code='yellow'
		;
	SELECT 	SUM(total_yellow) 
	into 	dby_yellow_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=19;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_ts8_tc7_checkGreenCountsPlYnDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_ts8_tc7_checkGreenCountsPlYnDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_ts8_tc7_checkGreenCountsPlYnDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT 	COUNT(*) 
	INTO 	ply_green_count 
	from 	emihealth_final.overactive_code_distribution_yearly_by_attend 
	WHERE 	isactive=1 AND color_code='green'
		;
	SELECT 	SUM(total_green) 
	into 	dby_green_count 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=19
		;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
	
	set success = 1;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19_overactInactCodeDist_ts8_tc8_totalPaidMoneyPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19_overactInactCodeDist_ts8_tc8_totalPaidMoneyPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19_overactInactCodeDist_ts8_tc8_totalPaidMoneyPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT 	SUM(income) 
	INTO 	ply_total_paid_money 
	from 	emihealth_final.`overactive_code_distribution_yearly_by_attend` WHERE isactive=1
		;
	SELECT 	SUM(total_paid_money) 
	INTO 	dby_total_paid_money 
	from 	emihealth_final.dashboard_yearly_results 
	WHERE 	isactive=1 AND TYPE=19;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table');
		END IF;
	END IF;
	
	set success = 1;	
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_19________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_19________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_19________________`()
BEGIN
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_MAIN`()
BEGIN
	call `t_20_adjFillingCodeDist_TS1_SOURCE_TABLE`();
	call `t_20_adjFillingCodeDist_TS2_RESULT_TABLE`();
	call `t_20_adjFillingCodeDist_TS7_DASHBOARD_MONTHLY_TABLE`();
	call `t_20_adjFillingCodeDist_TS8_DASHBOARD_YEARLY_TABLE`();
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_TS1_SOURCE_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts1_tc1A_testTableGen`(@a);
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts1_tc1B_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			20,
			'Verifying source table[emihealth_final.src_adjacent_filling] using test table[test_cases_2.`t_temp_20_adjFillingCodeDist_source_test_table`]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_20_adjFillingCodeDist_ts1_tc1A_testTableGen'
		);
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts1_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts1_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts1_tc1A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.src_adjacent_filling;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='20_adjFillingCodeDist_source_table_weightage';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows < 50)then
		set required_rows = 50;
	end if;
	
	
	 DROP TABLE IF EXISTS test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_20_adjFillingCodeDist_source_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `src_id` bigint(20) default null,
	  `claim_id` VARCHAR(60) DEFAULT NULL,
	  `attend` VARCHAR(250) NOT NULL,
	  `mid` varchar(50) default null,
	  `date_of_service` DATETIME NOT NULL,
	  `proc_code` varchar(10) default null,
	  
	  `tooth_no` varchar(5) default null,
	  
	  `tooth_surface1` varchar(10) default null,
	  `tooth_surface2` varchar(10) default null,
	  `tooth_surface3` varchar(10) default null,
	  `tooth_surface4` varchar(10) default null,
	  
	  `act_is_instance_if_adj_fill` int(1) default null,
	  `exp_is_instance_if_adj_fill` INT(1) DEFAULT null,
	  `act_is_claim_exists_more_than_one` int(11) default null,
	  `exp_is_claim_exists_more_than_one` INT(11) DEFAULT null,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;
          
	TRUNCATE TABLE t_temp_20_adjFillingCodeDist_source_test_table; 
	
	
	insert into test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table
		(src_id
		, claim_id
		, attend
		, mid
		, date_of_service
		, proc_code
		, tooth_no
		, tooth_surface1
		, tooth_surface2
		, tooth_surface3
		, tooth_surface4
		, act_is_instance_if_adj_fill
		, act_is_claim_exists_more_than_one )
	SELECT 	id
		, claim_id
		, attend
		, mid
		, date_of_service
		, proc_code
		, tooth_no
		, tooth_surface1
		, tooth_surface2
		, tooth_surface3
		, tooth_surface4
		, is_instance_if_adj_fill
		, is_claim_exists_more_than_one
	from 	emihealth_final.src_adjacent_filling 
	ORDER BY date_of_service DESC 
	LIMIT required_rows
		;
		
	SELECT COUNT(*) INTO temp_count FROM  test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table ;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts1_tc1B_validation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts1_tc1B_validation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts1_tc1B_validation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	-- =====================================================================================================================
	--            					Declaring All Variables 
	-- =====================================================================================================================
	-- For Holdind Data From Cursor
	declare t_id BIGINT(20) default 0 ;
	declare t_claim_id varchar(60) default '';
	declare t_attend VARCHAR(40) default '' ;
	declare t_mid VARCHAR(99) DEFAULT '';
	declare t_dos datetime default null;
	Declare t_proc_code VARCHAR(99) DEFAULT '';
	declare t_tooth_no VARCHAR(99) default '' ;
	
	DECLARE t_tooth_surface1 VARCHAR(99) DEFAULT '' ;
	DECLARE t_tooth_surface2 VARCHAR(99) DEFAULT '' ;
	DECLARE t_tooth_surface3 VARCHAR(99) DEFAULT '' ;
	DECLARE t_tooth_surface4 VARCHAR(99) DEFAULT '' ;
	
	-- For Holding Results of Queries
	declare has_same_tooth_surface_as_cloumn_A_B int default 0;
	declare has_same_tooth_surface_as_cloumn_C_D int default 0;
	
	declare tooth_no2_columnC varchar(5) default '';
	declare surface2_columnD varchar(99) default '';
			
	-- Variables below are used for setting Output parameters
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	-- Cursor Declarations
	declare finished bool default false;
	declare test_row_cursor cursor for
				select 	id, claim_id ,attend, mid, date_of_service, tooth_no, tooth_surface1, tooth_surface2, tooth_surface3, tooth_surface4
				from  	test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table
				;
	declare continue handler for not found set finished = true;
	
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Starts 
	-- =====================================================================================================================
	open test_row_cursor;
	get_test_row:loop
	
		fetch test_row_cursor into t_id, t_claim_id, t_attend, t_mid, t_dos, t_tooth_no, t_tooth_surface1, t_tooth_surface2, t_tooth_surface3, t_tooth_surface4;
		if(finished = true)then
			leave get_test_row;
		end if;
		
		-- ------------------------------------------------IF [A] STARTS----------------------------------------------------------- --
		if(t_tooth_no between 'A' and 'T')then
			update 	test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table
			set	exp_is_instance_if_adj_fill = -1
			where id = t_id
				;
		else
			-- Visio [Does the tooth number and tooth surface from the claim match the tooth number and tooth surface from the Adjacent Fill tableâ€™s column A and column B?]
			select 	count(*), tooth_no2, surface2
			INTO 	has_same_tooth_surface_as_cloumn_A_B, tooth_no2_columnC, surface2_columnD  
			from 	emihealth_final.`ref_adjacent_fill_table`
			where 	tooth_no1 = t_tooth_no
				and surface1 in (t_tooth_surface1, t_tooth_surface2, t_tooth_surface3, t_tooth_surface4)
				;
			if (has_same_tooth_surface_as_cloumn_A_B = 0)then
				UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table
				SET	exp_is_instance_if_adj_fill = -1
				WHERE id = t_id
					;
			else
				-- Visio [Go to the next line item in the claim]
				-- Visio [Is this line item tooth number equal the tooth number in the Adjacent_fill_table couumn C and the tooth surface for column D?]
				SELECT 	COUNT(*)
				INTO 	has_same_tooth_surface_as_cloumn_C_D
				FROM 	emihealth_final.src_adjacent_filling
				WHERE 	tooth_no = tooth_no2_columnC
					and mid = t_mid
					and claim_id = t_claim_id
					and (
						tooth_surface1 = surface2_columnD
						or tooth_surface2 = surface2_columnD
						OR tooth_surface3 = surface2_columnD
						OR tooth_surface4 = surface2_columnD
					    )
					;
				if (has_same_tooth_surface_as_cloumn_C_D = 0)then
					UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table
					SET	exp_is_instance_if_adj_fill = 0
					WHERE id = t_id
						;
				else
					UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table
					SET	exp_is_instance_if_adj_fill = 1
					WHERE id = t_id
						;
				end if;
			end if;
			
		end if;
		-- -------------------------------------------------IF [A] ENDS------------------------------------------------------------ --
	end loop;
	close test_row_cursor;
	-- =====================================================================================================================
	--            				    Algo Core Processing Ends
	-- =====================================================================================================================
	
	UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table
	SET	test_status = 0
	WHERE 	act_is_instance_if_adj_fill != exp_is_instance_if_adj_fill
		;
		
	UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table
	SET	test_status = 1
	WHERE 	act_is_instance_if_adj_fill = exp_is_instance_if_adj_fill
		;
	
	
	-- Setting Up Output parameters [success, test_status, test_detail]
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table WHERE  test_status = 0;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table WHERE exp_is_instance_if_adj_fill IS NULL;
	
	IF(temp_count>0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table WHERE test_status = 0;
		IF(temp_count=0) THEN
			SET test_status=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts2_tc1A_resultWeekTestTableGen`(@a);
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts2_tc1B_resultWeekTableValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			20,
			'Verifying weekly result table[emihealth_final.results_adjacent_filling_each_attend_weekly] using test table[test_cases_2.`t_temp_20_adjFillingCodeDist_result_week_test_table`]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
			,'t_20_adjFillingCodeDist_ts2_tc1A_resultWeekTestTableGen/t_20_adjFillingCodeDist_ts2_tc1B_resultWeekTableValidation'
		);
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts2_tc1A_resultWeekTestTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts2_tc1A_resultWeekTestTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts2_tc1A_resultWeekTestTableGen`(out success Bool)
BEGIN
	-- =================================================
	--            Declaring All Variables 
	-- =================================================
	declare reason_percent decimal(5,2);
	declare reason_ryg_status varchar(30) default null;
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        -- =================================================
	--            Creating Table Structure
	-- =================================================
	DROP TABLE IF EXISTS test_cases_2.`t_temp_20_adjFillingCodeDist_result_week_test_table`;
	CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_20_adjFillingCodeDist_result_week_test_table` (
	`id` BIGINT(20) UNSIGNED  NOT NULL AUTO_INCREMENT ,
	`res_id` BIGINT(20)  DEFAULT NULL,
	`attend` VARCHAR(40) DEFAULT NULL,
	`week` int(11) default null,
	`year` int(11) default null,
	
	`act_ratio_adj_to_adjnonadj` double default null,
	`exp_ratio_adj_to_adjnonadj` DOUBLE DEFAULT NULL,
	`act_all_mean` double default null,
	`exp_all_mean` DOUBLE DEFAULT NULL,
	`act_all_sd` DOUBLE DEFAULT NULL,
	`exp_all_sd` DOUBLE DEFAULT NULL,
	`act_ryg_status` VARCHAR(15) DEFAULT NULL,
	`exp_ryg_status` VARCHAR(15) DEFAULT NULL,
	
	`test_status` BOOL DEFAULT NULL,
	`test_detail` TINYTEXT DEFAULT NULL,
	PRIMARY KEY (`id`)
	) ENGINE=INNODB DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE test_cases_2.`t_temp_20_adjFillingCodeDist_result_week_test_table`;
	
	-- =================================================
	--           Sampling And Inserting Data 
	-- =================================================
	SET iterator = 1;
        WHILE(iterator < 4) DO
		SET selected_reason= iterator;
		SELECT reason_weight, ryg_status INTO reason_percent, reason_ryg_status FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=20 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_adjacent_filling_each_attend_weekly` WHERE ryg_status=reason_ryg_status;
		
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		
		INSERT INTO test_cases_2.`t_temp_20_adjFillingCodeDist_result_week_test_table`
		(
			res_id
			,attend
			,week
			,year
			,act_ratio_adj_to_adjnonadj
			,act_all_mean
			,act_all_sd
			,act_ryg_status
		)
		SELECT 	id
			,attend
			,week
			,year
			,ratio_adj_to_adjnonadj
			,all_mean
			,all_sd
			,ryg_status
		FROM 	emihealth_final.results_adjacent_filling_each_attend_weekly 
		WHERE 	ryg_status = reason_ryg_status 
			AND isactive=1 
		ORDER 	
		BY 	RAND() 
		LIMIT 	reason_sample_count;	
	
		SET iterator = iterator + 1;
	END WHILE;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts2_tc1B_resultWeekTableValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts2_tc1B_resultWeekTableValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts2_tc1B_resultWeekTableValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	-- =====================================================================================================================
	--            					Declaring All Variables 
	-- =====================================================================================================================
	-- For Holdind Data From Cursor
	declare t_id BIGINT(20) default 0 ;
	declare t_attend VARCHAR(40) default '' ;
	declare t_week int(11) default null;
	declare t_year int(11) default null;
	
	-- For Holding Results of Queries
	declare adjacent_count int(11) default 0;
	declare non_adjacent_count int(11) default 0;
	declare all_mean double default null;
	DECLARE all_sd DOUBLE DEFAULT NULL;	
	
	-- Variables below are used for setting Output parameters
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	-- Cursor Declarations
	declare finished bool default false;
	declare test_row_cursor cursor for
				select 	id, attend,week, year  
				from  	test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table
				;
	declare continue handler for not found set finished = true;
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Starts 
	-- =====================================================================================================================
	open test_row_cursor;
	get_test_row:loop
	
		fetch test_row_cursor into t_id, t_attend, t_week, t_year;
		if(finished = true)then
			leave get_test_row;
		end if;
		
		SELECT	SUM(
				CASE
					WHEN is_instance_if_adj_fill = '1' 
					THEN 1 
					ELSE 0 
				END
			    ) ,
			SUM(
				CASE
					WHEN is_instance_if_adj_fill = '0' 
					THEN 1 
					ELSE 0 
				END
			   )
		INTO 
			adjacent_count,
			non_adjacent_count
		FROM 	emihealth_final.`src_adjacent_filling`
		WHERE 	attend = t_attend
		AND YEAR(date_of_service) = t_year
		AND WEEK(date_of_service) = t_week
		AND is_instance_if_adj_fill >=0
			;
		
		select 	round(avg(ratio_adj_to_adjnonadj),2), round(stddev_samp(ratio_adj_to_adjnonadj),2)
		into 	all_mean, all_sd
		from 	emihealth_final.`results_adjacent_filling_each_attend_weekly`
		where 	year = t_year
			and week = t_week
			;
			
		update 	test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table
		set 	exp_ratio_adj_to_adjnonadj = COALESCE(round(adjacent_count / (adjacent_count + non_adjacent_count),2),0)
			,exp_all_mean = all_mean
			,exp_all_sd = all_sd
		where 	id = t_id
			;
		-- ------------------------------------------------IF [A] STARTS----------------------------------------------------------- --
			
		-- -------------------------------------------------IF [A] ENDS------------------------------------------------------------ --
	end loop;
	close test_row_cursor;
/*	
	UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table
	SET 	exp_ryg_status = 'red'
	WHERE 	exp_ratio_adj_to_adjnonadj >ROUND(exp_all_mean + (2 * exp_all_sd),2)
		AND 	exp_ratio_adj_to_adjnonadj != 0
		;
	
	UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table
	SET 	exp_ryg_status = 'yellow'
	WHERE 	exp_ratio_adj_to_adjnonadj > ROUND(exp_all_mean + (1.5 * act_all_sd),2)
		AND exp_ratio_adj_to_adjnonadj < ROUND(exp_all_mean + (2 * act_all_sd),2)
		AND exp_ratio_adj_to_adjnonadj != 0
		;
	UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table
	SET 	exp_ryg_status = 'green'
	WHERE 	exp_ryg_status is null
		or
		exp_ratio_adj_to_adjnonadj = ROUND(exp_all_mean + (2 * exp_all_sd),2)
		;
		
		*/
	UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table
	SET 	exp_ryg_status = 'red'
	WHERE 	exp_ratio_adj_to_adjnonadj >= ROUND(exp_all_mean + (2 * exp_all_sd),2)
		;
	
	UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table
	SET 	exp_ryg_status = 'yellow'
	WHERE 	exp_ratio_adj_to_adjnonadj > ROUND(exp_all_mean + (1.5 * act_all_sd),2)
		AND exp_ratio_adj_to_adjnonadj < ROUND(exp_all_mean + (2 * act_all_sd),2)
		AND exp_ratio_adj_to_adjnonadj != 0
		;
	UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table
	SET 	exp_ryg_status = 'green'
	WHERE 	exp_ratio_adj_to_adjnonadj <= ROUND(exp_all_mean + (1.5 * exp_all_sd),2)
		;	
		
	-- =====================================================================================================================
	--            				    Algo Core Processing Ends
	-- =====================================================================================================================
	UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table
	SET 	test_status = 1
	WHERE 	act_ryg_status = exp_ryg_status
		;
		
	UPDATE 	test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table
	SET 	test_status = 0
	WHERE 	act_ryg_status != exp_ryg_status
		;
	
	-- Setting Up Output parameters [success, test_status, test_detail]
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table AS tt WHERE  tt.test_status = 0;
	SET temp_count = 0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table AS tt WHERE tt.test_status IS NULL ;
	IF(temp_count>0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table AS tt WHERE tt.test_status = 0;
		IF(temp_count=0) THEN
			SET test_status=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying distinct year counts in pl_monthly and db_monthly',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts7_tc2_countDistinctYearsPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying total_count db_monthly  and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts7_tc3_checkTotalCountPlMNdbm ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying providers count in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts7_tc4_checkCountNoOfProvPlMNdbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts7_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying yellow counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts7_tc6_checkYellowCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts7_tc7_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying green counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts7_tc7_checkGreenCountsPlMNDbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying paid_money  in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_20_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts7_tc9A_testTableGen/t_20_adjFillingCodeDist_ts7_tc9B_columnValidation ');
  
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_adjacent_filling_cd_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=20;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
		set success = true;
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
		SET success = TRUE;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_adjacent_filling_cd_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=20;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_adjacent_filling_cd_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=20;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
	set success = true;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_adjacent_filling_cd_stats_monthly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=20;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts7_tc7_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts7_tc7_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts7_tc7_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_adjacent_filling_cd_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=20;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_adjacent_filling_cd_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=20;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_monthly_results WHERE isactive=1 and type=20;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_adjFillingCodeDist';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_20_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_20_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_20_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_20_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=20) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	select count(*)into temp_count FROM test_cases_2.t_temp_20_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_20_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_adjacent_filling_cd_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.`pl_adjacent_filling_cd_stats_monthly` WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_adjacent_filling_cd_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_adjacent_filling_cd_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_20_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_20_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_yellow=temp_actual_total_yellow=0; 
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_20_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_20_ts7_tc9 WHERE t_temp_20_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_20_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_20_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_20_ts7_tc9 WHERE t_temp_20_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts8_tc2_countDistinctYearsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts8_tc4_checkCountNoOfProvPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_20_adjFillingCodeDist_ts8_tc5_checkTotalRedCountsPlYNDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts8_tc6_checkTotalYellowCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying yellow counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts8_tc6_checkTotalYellowCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts8_tc7_checkGreenCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying paid money money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_20_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_20_adjFillingCodeDist_ts8_tc9A_testTableGen/ t_20_adjFillingCodeDist_ts8_tc9B_columnValidation');
    
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.`pl_adjacent_filling_cd_stats_yearly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=20;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.`pl_adjacent_filling_cd_stats_yearly` WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=20;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.`pl_adjacent_filling_cd_stats_yearly` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=20;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_adjacent_filling_cd_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=20;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_adjacent_filling_cd_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=20;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_adjacent_filling_cd_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=20;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_adjacent_filling_cd_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=20;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts8_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts8_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts8_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=20;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_adjFillingCodeDist';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_20_ts8_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_20_ts8_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_20_ts8_tc9; 
	
	
	insert into test_cases_2.t_temp_20_ts8_tc9(year,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=20) ORDER BY(year)desc LIMIT required_rows;
	
	select count(*)into temp_count FROM test_cases_2.t_temp_20_ts8_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20_adjFillingCodeDist_ts8_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20_adjFillingCodeDist_ts8_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20_adjFillingCodeDist_ts8_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_20_ts8_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_adjacent_filling_cd_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_adjacent_filling_cd_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_adjacent_filling_cd_stats_yearly WHERE YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_adjacent_filling_cd_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_20_ts8_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_20_ts8_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_20_ts8_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_20_ts8_tc9 WHERE t_temp_20_ts8_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_20_ts8_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_20_ts8_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_20_ts8_tc9 WHERE t_temp_20_ts8_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_20__________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_20__________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_20__________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_MAIN`()
BEGIN
call t_21_overuseOfBorL_TS2_RESULT_TABLE();
CALL t_21_overuseOfBorL_TS3_PL_STATS_DAILY_TABLE();
CALL t_21_overuseOfBorL_TS4_DASHBOARD_DAILY_TABLE();
CALL t_21_overuseOfBorL_TS5_PL_MONTHLY_STATS_TABLE();
CALL t_21_overuseOfBorL_TS6_PL_STATS_YEARLY_TABLE();
CALL t_21_overuseOfBorL_TS7_DASHBOARD_MONTHLY_RES_TABLE();
CALL t_21_overuseOfBorL_TS8_DASHBOARD_YEARLY_RESULTS_TABLE();
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_TS1_SOURCE_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdMolar_ts1_tc1_baseSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			21
			,'Verifying base and source table counts'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_21_overuseOfBorL_ts1_tc1_baseSrcCount'
		);
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts1_tc1_baseSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts1_tc1_baseSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts1_tc1_baseSrcCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN	
	
	DECLARE src_count INT;
	DECLARE base_count INT;
	
	SELECT COUNT(*) INTO src_count FROM emihealth_final.`src_over_use_of_b_or_l_fill_data_set_a`;
	SELECT COUNT(*) INTO base_count FROM emihealth_final.`procedure_performed` 
	WHERE (((proc_code IN('D2140', 'D2150', 'D2391' ,'D2392') AND tooth_no IN('19','30'))  AND patient_age > 7) 
	AND (surface='B' OR surface LIKE '%B%') )
	AND is_invalid=0;
	
	IF(src_count=base_count) THEN
		SELECT COUNT(*) INTO src_count FROM emihealth_final.`src_over_use_of_b_or_l_fill_data_set_b`;
		SELECT COUNT(*) INTO base_count FROM emihealth_final.`procedure_performed` 
		WHERE (((proc_code IN('D2140', 'D2150', 'D2391' ,'D2392') AND tooth_no IN('18','31'))  AND patient_age > 12) 
		AND (surface='B' OR surface LIKE '%B%') )
		AND is_invalid=0;
		
			IF(src_count=base_count) THEN	
				SELECT COUNT(*) INTO src_count FROM emihealth_final.`src_over_use_of_b_or_l_fill_data_set_x`;
				SELECT COUNT(*)  INTO base_count  FROM emihealth_final.`procedure_performed` 
				WHERE (((proc_code IN('D2140', 'D2150', 'D2391' ,'D2392') AND tooth_no IN('3','14'))  AND patient_age > 7) 
				AND (surface='L' OR surface LIKE '%L%') )
				AND is_invalid=0;
				
							IF(src_count=base_count) THEN	
									SELECT COUNT(*) INTO src_count FROM emihealth_final.`src_over_use_of_b_or_l_fill_data_set_y`;
									SELECT COUNT(*)  INTO base_count FROM emihealth_final.`procedure_performed` 
									WHERE (((proc_code IN('D2140', 'D2150', 'D2391' ,'D2392') AND tooth_no IN('2','15'))  AND patient_age > 12) 
									AND (surface='L' OR surface LIKE '%L%') )
									AND is_invalid=0;
									IF(src_count=base_count) THEN	
										SET test_status=TRUE;
										SET test_detail='Equal counts found in base and source table ';
									ELSE
										SET test_status=FALSE;
										IF(src_count>base_count)THEN
											SET test_detail=CONCAT(src_count-base_count,' more counts  found in source table then base table .');
										ELSE
											SET test_detail=CONCAT(base_count-src_count,' more counts found in base table then source table .');
										END IF;	
									END IF;
						ELSE
						SET test_status=FALSE;
						IF(src_count>base_count)THEN
							SET test_detail=CONCAT(src_count-base_count,' more counts  found in source table then base table .');
						ELSE
							SET test_detail=CONCAT(base_count-src_count,' more counts found in base table then source table .');
						END IF;
					END IF;
			ELSE
			SET test_status=FALSE;
			IF(src_count>base_count)THEN
				SET test_detail=CONCAT(src_count-base_count,' more counts  found in source table then base table .');
			ELSE
				SET test_detail=CONCAT(base_count-src_count,' more counts found in base table then source table .');
			END IF;	
		END IF;
					
	ELSE
		SET test_status=FALSE;
		IF(src_count>base_count)THEN
			SET test_detail=CONCAT(src_count-base_count,' more counts  found in source table then base table .');
		ELSE
			SET test_detail=CONCAT(base_count-src_count,' more counts found in base table then source table .');
		END IF;
	END IF;
	SET success=TRUE;
   
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts2_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts2_tc1B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying Columns for result table[emihealth_final.results_over_use_of_b_or_l_filling] by generating test table[test_cases_2.t_temp_21_overuseOfBorL_test_table]'
	,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts2_tc1A_testTableGen/t_21_overuseOfBorL_ts2_tc1B_resReasonsValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts2_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts2_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts2_tc1A_testTableGen`(out success Bool)
BEGIN
	-- =================================================
	--            Declaring All Variables 
	-- =================================================
	declare reason_percent decimal(5,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        
        -- =================================================
	--            Creating Table Structure
	-- =================================================
	DROP TABLE IF EXISTS test_cases_2.`t_temp_21_overuseOfBorL_test_table`;
	CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_21_overuseOfBorL_test_table` (
	`id` BIGINT(20) UNSIGNED  NOT NULL AUTO_INCREMENT ,
	`res_id` BIGINT(20)  DEFAULT NULL,
	`attend` VARCHAR(40) DEFAULT NULL,
	`mid` VARCHAR(99) DEFAULT NULL,
	`proc_code` VARCHAR(99) DEFAULT NULL,
	`date_of_service` datetime default null,
	`patient_age` INT DEFAULT 0,
	`tooth_no` VARCHAR(99) DEFAULT NULL,
	`data_set_name` VARCHAR(99) DEFAULT NULL,
	`act_reason_level` INT(2) DEFAULT NULL,
	`exp_reason_level` INT(2) DEFAULT NULL,
	`act_ryg_status` VARCHAR(15) DEFAULT NULL,
	`exp_ryg_status` VARCHAR(15) DEFAULT NULL,
	`test_status` BOOL DEFAULT NULL,
	`test_detail` TINYTEXT DEFAULT NULL,
	PRIMARY KEY (`id`)
	) ENGINE=INNODB DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE test_cases_2.`t_temp_21_overuseOfBorL_test_table`;
	
	
	-- =================================================
	--           Sampling And Inserting Data 
	-- =================================================
	SET iterator = 1;
        WHILE(iterator < 4) DO
		SET selected_reason= iterator;
		SELECT reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=21 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_over_use_of_b_or_l_filling` WHERE reason_level=selected_reason;
		
		/*IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;*/
		IF(reason_sample_count < 50)THEN
			SET reason_sample_count = 50;
		END IF;
		
		INSERT INTO test_cases_2.`t_temp_21_overuseOfBorL_test_table`
		(
			res_id,
			attend,
			MID,
			date_of_service,
			proc_code,
			patient_age,
			tooth_no,
			data_set_name,
			act_reason_level,
			act_ryg_status
		)
		SELECT 	id, attend, MID, date_of_service, proc_code, patient_age, tooth_no, data_set_name, reason_level, ryg_status
		FROM 	emihealth_final.`results_over_use_of_b_or_l_filling` 
		WHERE 	reason_level=selected_reason AND isactive=1 
		ORDER 	
		BY 	RAND() 
		LIMIT 	reason_sample_count;	
	
		SET iterator = iterator + 1;
	END WHILE;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts2_tc1B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts2_tc1B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts2_tc1B_resReasonsValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	-- =====================================================================================================================
	--            					Declaring All Variables 
	-- =====================================================================================================================
	-- For Holdind Data From Cursor
	declare t_id BIGINT(20) default 0 ;
	declare t_attend VARCHAR(40) default '' ;
	declare t_mid VARCHAR(99) DEFAULT '';
	declare t_dos datetime default null;
	Declare t_proc_code VARCHAR(99) DEFAULT '';
	declare t_patient_age INT DEFAULT 0;
	declare t_tooth_no VARCHAR(99) default '' ;
	declare t_data_set_name VARCHAR(99)default '' ;
	
	-- For Holding Results of Queries
	declare has_D2xx_D3xx_D7140_D7210 int default 0;
	DECLARE has_D21xx_D239x_on_same_tooth INT DEFAULT 0;
	
	-- Variables below are used for setting Output parameters
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	-- Cursor Declarations
	declare finished bool default false;
	declare test_row_cursor cursor for
				select 	id, attend, mid, date_of_service, tooth_no
				from  	test_cases_2.t_temp_21_overuseOfBorL_test_table;
	declare continue handler for not found set finished = true;
	
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Starts 
	-- =====================================================================================================================
	open test_row_cursor;
	get_test_row:loop
	
		fetch test_row_cursor into t_id, t_attend, t_mid, t_dos, t_tooth_no;
		if(finished = true)then
			leave get_test_row;
		end if;
		
		select 	count(*) into has_D2xx_D3xx_D7140_D7210
		from 	emihealth_final.`src_over_use_of_b_or_l_history`
		where 	(mid = t_mid) and
			(date_of_service < t_dos and date_of_service between date_sub(t_dos, interval 3 year) and t_dos) and
			(proc_code LIKE 'D2%' or proc_code LIKE 'D3%' or proc_code in ('D7140','D7210'))
			;
		if(has_D2xx_D3xx_D7140_D7210 = 0 ) then
			update 	test_cases_2.t_temp_21_overuseOfBorL_test_table
			set 	exp_reason_level = 1,
				exp_ryg_status = 'red',
				test_detail = 'Has no Tx codes (D2xxx, D3xxx, D7140, D7210) in the 3 years.'
			where 	id = t_id;
		else
			SELECT 	COUNT(*) INTO has_D21xx_D239x_on_same_tooth
			FROM 	emihealth_final.`src_over_use_of_b_or_l_history`
			WHERE 	(MID = t_mid) AND
				(date_of_service < t_dos AND date_of_service BETWEEN DATE_SUB(t_dos, INTERVAL 3 YEAR) AND t_dos) AND
				(proc_code LIKE 'D21%' OR proc_code LIKE 'D239%') and
				(tooth_no = t_tooth_no)
				;
			if(has_D21xx_D239x_on_same_tooth = 0)then
				UPDATE 	test_cases_2.t_temp_21_overuseOfBorL_test_table
				SET 	exp_reason_level = 2,
					exp_ryg_status = 'red',
					test_detail = 'Has no D21xx or D239x on this same tooth during the previous 3 years.'
				WHERE 	id = t_id;
			else
				UPDATE 	test_cases_2.t_temp_21_overuseOfBorL_test_table
				SET 	exp_reason_level = 3,
					exp_ryg_status = 'green',
					test_detail = 'Has D21xx or D239x on this same tooth during the previous 3 years.'
				WHERE 	id = t_id;
			end if;
		end if;
	end loop;
	close test_row_cursor;
	-- =====================================================================================================================
	--            				    Algo Core Processing Ends
	-- =====================================================================================================================
	UPDATE 	test_cases_2.t_temp_21_overuseOfBorL_test_table
	SET 	test_status = 1
	WHERE 	act_reason_level = exp_reason_level
		;
	
	UPDATE 	test_cases_2.t_temp_21_overuseOfBorL_test_table
	SET 	test_status = 0
	WHERE 	act_reason_level != exp_reason_level
		;
		
	-- Setting Up Output parameters [success, test_status, test_detail]
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_21_overuseOfBorL_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_21_overuseOfBorL_test_table WHERE  act_reason_level != exp_reason_level;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_21_overuseOfBorL_test_table WHERE exp_reason_level IS NULL;
	
	IF(temp_count>0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_21_overuseOfBorL_test_table WHERE act_reason_level != exp_reason_level;
		IF(temp_count=0) THEN
			SET test_status=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_TS3_PL_STATS_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_TS3_PL_STATS_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_TS3_PL_STATS_DAILY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying result and pl_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts3_tc4_resPlDailyCount ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying paid money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts3_tc5_resPlDailyEqualPaidMoney ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying red counts in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts3_tc7_resPlDailyEqualReds ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts3_tc8_resPlDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying distinct years in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_21_overuseOfBorL_ts3_tc8_resPlDailyDistinctYearsCount');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily] by generating test table[test_cases_2.t_21_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts3_tc2_plTestTable/t_21_overuseOfBorL_ts3_tc1_plDailyValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts3_tc1_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts3_tc1_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts3_tc1_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT NULL;
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red','green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_21_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				
					SET temp_expec_color_code='green';
				
			END IF;
			
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_21_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_21_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend=NULL;
			SET t_dos= NULL;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code =NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_21_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_21_pl_temp WHERE t_21_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_21_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_21_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_21_pl_temp WHERE t_21_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts3_tc2_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts3_tc2_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts3_tc2_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_daily_overuseOfBorL';
	
	SET required_rows = weightage*total_counts/100;
	
	SET res=required_rows;
	
	
	 DROP TABLE IF EXISTS t_21_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_21_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_recovered_money`  DOUBLE PRECISION(11,2) default NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_21_pl_temp; 
	
	
	insert into test_cases_2.t_21_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_21_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_over_use_of_b_or_l_filling` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_over_use_of_b_or_l_filling` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_over_use_of_b_or_l_filling_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_over_use_of_b_or_l_filling` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_over_use_of_b_or_l_filling_stats_daily` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_over_use_of_b_or_l_filling` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_over_use_of_b_or_l_filling_stats_daily` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying pl_daily and db_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts4_tc4_checkCountDosPlNDb ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying paid money db_daily  and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts4_tc5_checkTotalCountPlNDb ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying recovered money in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts4_tc6_checkRygCountsPlNDbTables ');
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying red counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts4_tc7_checkRedCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc8_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying yellow counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_13_simpleProphy4a_ts4_tc8_checkYellowCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts4_tc9_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying green counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_21_overuseOfBorL_ts4_tc9_checkGreenCountsPlNDbTables');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_21_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts4_tc2_dashboardTestTable/t_21_overuseOfBorL_ts4_tc1_dashboardDailyValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts4_tc1_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts4_tc1_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts4_tc1_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT NULL;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_21_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_21_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_21_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos=NULL;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail=NULl;
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_21_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_21_dashboard_temp WHERE t_21_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_21_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_21_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_21_dashboard_temp WHERE t_21_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts4_tc2_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts4_tc2_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts4_tc2_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=21;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_daily_overuseOfBorL';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_21_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_21_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_21_dashboard_temp; 
	
	
	insert into test_cases_2.t_21_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_green
		FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=21) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_21_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts4_tc4_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts4_tc4_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts4_tc4_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=21	;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=21;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=21;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=21;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts4_tc9_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts4_tc9_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts4_tc9_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_over_use_of_b_or_l_filling_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=21;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying result and pl_monthly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts5_tc2_checkCountResNPlMonthly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying paid money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_21_overuseOfBorL_ts5_tc3_checkPaidMoneyResNPlMonthly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying recovered money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_21_overuseOfBorL_ts5_tc4_checkRecoveredMoneyResNPlMonthly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts5_tc5_checkEqualRedsResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying red counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts5_tc5_checkEqualRedsResNPlMontly ');
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.pl_over_use_of_b_or_l_filling_stats_monthly] by generating test table[test_cases_2.t_temp_21_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_21_overuseOfBorL_ts5_tc7A_testTableGen/t_21_overuseOfBorL_ts5_tc7B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_over_use_of_b_or_l_filling` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO plm_count FROM emihealth_final.`pl_over_use_of_b_or_l_filling_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_over_use_of_b_or_l_filling_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_over_use_of_b_or_l_filling_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts5_tc5_checkEqualRedsResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts5_tc5_checkEqualRedsResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts5_tc5_checkEqualRedsResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.`pl_over_use_of_b_or_l_filling_stats_monthly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_over_use_of_b_or_l_filling_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_overuseOfBorL';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_21_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_21_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_21_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_21_ts5_tc7(attend, MONTH,YEAR, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,MONTH,YEAR,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		FROM emihealth_final.`pl_over_use_of_b_or_l_filling_stats_monthly` WHERE isactive=1 ORDER BY (CONCAT(MONTH,YEAR)) DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_21_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check, temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_21_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.`results_over_use_of_b_or_l_filling` WHERE isactive=1 AND MONTH(results_over_use_of_b_or_l_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.`results_over_use_of_b_or_l_filling` WHERE isactive=1 AND MONTH(results_over_use_of_b_or_l_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE isactive=1 AND MONTH(results_over_use_of_b_or_l_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE isactive=1 AND MONTH(results_over_use_of_b_or_l_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE isactive=1 AND MONTH(results_over_use_of_b_or_l_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE isactive=1 AND MONTH(results_over_use_of_b_or_l_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				SET temp_expec_color_code='green';
			END IF;
	
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) INTO temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_over_use_of_b_or_l_filling` 
			WHERE isactive=1 AND MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_21_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF(round(temp_actual_recovered_money,0) != round(temp_expec_recovered_money,0)) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_21_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_21_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_21_ts5_tc7 WHERE t_temp_21_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_21_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_21_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_21_ts5_tc7 WHERE t_temp_21_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_TS6_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_TS6_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_TS6_PL_STATS_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying result and pl_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts6_tc1_checkCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying paid money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts6_tc2_checkPaidMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying recovered money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_21_overuseOfBorL_ts6_tc3_checkRecoveredMoneyResNPlYearly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying red counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts6_tc4_checkEqualRedsResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly] by generating test table[test_cases_2.t_temp_21_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts6_tc6A_testTableGen/t_21_overuseOfBorL_ts6_tc6B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_over_use_of_b_or_l_filling` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_over_use_of_b_or_l_filling` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_over_use_of_b_or_l_filling_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_over_use_of_b_or_l_filling`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_over_use_of_b_or_l_filling_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_over_use_of_b_or_l_filling` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_over_use_of_b_or_l_filling_stats_yearly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_over_use_of_b_or_l_filling_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_overuseOfBorL';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_21_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_21_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_21_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_21_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_over_use_of_b_or_l_filling_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_21_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check , temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_21_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_over_use_of_b_or_l_filling` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_over_use_of_b_or_l_filling` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_over_use_of_b_or_l_filling WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
			
				if(temp_g_check!= 0) THEN	
					set temp_expec_color_code='green';
					
			End IF;			
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_over_use_of_b_or_l_filling` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_21_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF(round (temp_actual_recovered_money,0) != round(temp_expec_recovered_money,0)) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_21_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_21_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_21_ts6_tc6 WHERE t_temp_21_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_21_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_21_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_21_ts6_tc6 where t_temp_21_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_TS7_DASHBOARD_MONTHLY_RES_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_TS7_DASHBOARD_MONTHLY_RES_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_TS7_DASHBOARD_MONTHLY_RES_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying distinct year counts in pl_monthly and db_monthly',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts7_tc2_countDistinctYearsPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying total_count db_monthly  and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts7_tc3_checkTotalCountPlMNdbm ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying providers count in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_21_overuseOfBorL_ts7_tc4_checkCountNoOfProvPlMNdbM');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts7_tc7_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying green counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts7_tc7_checkGreenCountsPlMNDbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying paid_money  in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_21_overuseOfBorL_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_21_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts7_tc9A_testTableGen/t_21_overuseOfBorL_ts7_tc9B_columnValidation ');								
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=21;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=21;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=21;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts7_tc7_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts7_tc7_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts7_tc7_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=21;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_over_use_of_b_or_l_filling_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=21;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 and type=21;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_overuseOfBorL';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_21_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_21_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_21_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_21_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=21) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_21_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_21_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.`pl_over_use_of_b_or_l_filling_stats_monthly` WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.`pl_over_use_of_b_or_l_filling_stats_monthly` WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.`pl_over_use_of_b_or_l_filling_stats_monthly` WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_21_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_21_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_21_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_21_ts7_tc9 WHERE t_temp_21_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_21_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_21_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_21_ts7_tc9 WHERE t_temp_21_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_TS8_DASHBOARD_YEARLY_RESULTS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_TS8_DASHBOARD_YEARLY_RESULTS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_TS8_DASHBOARD_YEARLY_RESULTS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts8_tc2_countDistinctYearsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_21_overuseOfBorL_ts8_tc3_checkTotalCountPlYNDbY');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts8_tc4_checkCountNoOfProvPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts8_tc5_checkTotalRedCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_21_overuseOfBorL_ts8_tc7_checkGreenCountsPlYNDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying paid money money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_21_ts9_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_21_overuseOfBorL_ts9_tc9A_testTableGen/t_21_overuseOfBorL_ts9_tc9B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=21;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=21;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=21;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=21;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=21;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=21;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts9_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts9_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts9_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=21;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_overuseOfBorL';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_21_ts9_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_21_ts9_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_21_ts9_tc9; 
	
	
	insert into test_cases_2.t_temp_21_ts9_tc9(year,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=21) ORDER BY(year)desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_21_ts9_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_overuseOfBorL_ts9_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_overuseOfBorL_ts9_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_overuseOfBorL_ts9_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_21_ts9_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
						
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_21_ts9_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_21_ts9_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_21_ts9_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_21_ts9_tc9 WHERE t_temp_21_ts9_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_21_ts9_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_21_ts9_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_21_ts9_tc9 WHERE t_temp_21_ts9_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_21_________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_21_________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_21_________________`()
BEGIN
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_MAIN`()
BEGIN
CAll t_22_sealantInsteadOfFill_TS1_SOURCE_TABLE();
CALL t_22_sealantInsteadOfFill_TS2_RESULT_TABLE();
CALL t_22_sealantInsteadOfFill_TS3_PL_STATS_DAILY_TABLE();
CALL t_22_sealantInsteadOfFill_TS4_DASHBOARD_DAILY_TABLE();
CALL t_22_sealantInsteadOfFill_TS5_PL_MONTHLY_STATS_TABLE();
CALL t_22_sealantInsteadOfFill_TS6_PL_YEARLY_STATS_TABLE();
CALL t_22_sealantInsteadOfFill_TS7_DASHBOARD_MONTHLY_RES_TABLE();
CALL t_22_sealantInsteadOfFill_TS8_DASHBOARD_YEARLY_RESULTS_TABLE();
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_TS1_SOURCE_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts1_tc1_baseSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying base and source table counts.',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts1_tc1_baseSrcCount ');
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts1_tc1_baseSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts1_tc1_baseSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts1_tc1_baseSrcCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count  INT;
	DECLARE base_count_1 INT;
	DECLARE base_count_2 INT;
	SELECT COUNT(*) INTO src_count FROM emihealth_final.src_sealants_instead_of_filling_data_set_a;
        SELECT COUNT(*) INTO base_count_1  FROM emihealth_final.procedure_performed WHERE proc_code IN('D2140','D2391')AND surface != '' AND surface IS NOT NULL AND attend != ''AND (date_of_service IS NOT NULL ) AND LENGTH(attend)=10 AND tooth_no IN('2','3','14','15','18','19','30','31') AND patient_age <= '14' AND (surface LIKE '%B%' OR surface LIKE '%L%') AND is_invalid=0;
        SELECT COUNT(*)  INTO base_count_2  FROM emihealth_final.procedure_performed WHERE proc_code IN('D2150','D2392')AND tooth_no IN('2','3','14','15','18','19','30','31') AND patient_age <= '14' AND surface NOT LIKE '%M%' AND surface NOT LIKE '%D%'AND surface != '' AND surface IS NOT NULL AND attend != ''AND (date_of_service IS NOT NULL ) AND LENGTH(attend)=10  AND is_invalid=0;
	
	SET base_count = base_count_1 + base_count_2;
	IF(src_count=base_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in base and source table ';
	ELSE
		SET test_status=FALSE;
		IF(src_count>base_count)THEN
			SET test_detail=CONCAT(src_count-base_count,' more counts  found in source table then base table .');
		ELSE
			SET test_detail=CONCAT(base_count-src_count,' more counts found in base table then source table .');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts2_tc1_resSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			22
			,'Verifying results and source counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_22_sealantInsteadOfFill_ts2_tc1_resSrcCount'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts2_tc2A_testTableGen`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts2_tc2B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying Columns for result table[emihealth_final.results_sealants_instead_of_filling] by generating test table[test_cases_2.t_temp_22_sealant_test_table]',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_22_sealantInsteadOfFill_ts2_tc2A_testTableGen/t_22_sealantInsteadOfFill_ts2_tc2B_resReasonsValidation');
	
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts2_tc1_resSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts2_tc1_resSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts2_tc1_resSrcCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE res_count  INT;
	
	SELECT COUNT(*) INTO src_count FROM emihealth_final.src_sealants_instead_of_filling_data_set_a;
        SELECT COUNT(*) INTO res_count FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive = '1';
	
	
	IF(src_count=res_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and source table ';
	ELSE
		SET test_status=FALSE;
		IF(src_count>res_count)THEN
			SET test_detail=CONCAT(src_count-res_count,' more counts  found in source table then result table .');
		ELSE
			SET test_detail=CONCAT(res_count-src_count,' more counts found in result table then source table .');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts2_tc2A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts2_tc2A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts2_tc2A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE reason_percent DECIMAL(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        DECLARE selected_reason INT;
        DECLARE iterator INT;
       
        DROP TABLE IF EXISTS t_temp_22_sealant_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_22_sealant_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(10) ZEROFILL NOT NULL,
	  `attend` VARCHAR(20) DEFAULT NULL,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` DATETIME DEFAULT NULL,
	  `proc_code`VARCHAR(50) DEFAULT NULL,
	  `act_reason_level` INT(2) DEFAULT NULL,
	  `exp_reason_level` INT(2) DEFAULT NULL,
	  `act_ryg_status` varchar(30) default null,
	  `exp_ryg_status` VARCHAR(30) DEFAULT NULL,
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_22_sealant_test_table;
        
        SET iterator = 1;
        WHILE(iterator < 4) DO
		SET selected_reason= iterator;
		SELECT reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=22 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_sealants_instead_of_filling` WHERE reason_level=selected_reason;
		
		/*IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		*/
		IF(reason_sample_count < 50)THEN
			SET reason_sample_count = 50;
		END IF;
		
		INSERT INTO test_cases_2.t_temp_22_sealant_test_table(res_id,attend,MID,date_of_service,proc_code,act_reason_level,act_ryg_status)
		SELECT id,attend,MID,date_of_service,proc_code,reason_level,ryg_status
		FROM emihealth_final.results_sealants_instead_of_filling WHERE reason_level=selected_reason AND isactive=1 ORDER BY RAND() LIMIT reason_sample_count;
		
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  emihealth_final.results_sealants_instead_of_filling;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts2_tc2B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts2_tc2B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts2_tc2B_resReasonsValidation`(OUT success INT ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  
  DECLARE t_id BIGINT(20);
  DECLARE t_attend, t_mid VARCHAR (50) DEFAULT "" ;
  DECLARE t_dos DATETIME DEFAULT null;
  DECLARE t_proc_code VARCHAR(15); 
  
  
  DECLARE has_tx_code, has_D2xx_D3xx INT(11) default 0;  
  
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id, MID,attend,date_of_service,proc_code FROM test_cases_2.t_temp_22_sealant_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN my_cursor ;
  get_test_row:LOOP
		FETCH my_cursor INTO  t_id, t_mid, t_attend,t_dos, t_proc_code;    
		IF(finished = 1) THEN 
			LEAVE get_test_row ;
		END IF ;
		        
		SELECT 	COUNT(*) into  has_tx_code
		FROM 	emihealth_final.`src_sealants_instead_of_filling_data_set_b` 
		WHERE 	MID=t_mid and 
			-- attend = t_attend AND 
			date_of_service < t_dos AND 
			(date_of_service BETWEEN DATE_SUB(t_dos,INTERVAL 1 YEAR)  AND t_dos ) ;
			
		IF (has_tx_code = 0) THEN 
			UPDATE 	test_cases_2.t_temp_22_sealant_test_table 
			SET 	exp_reason_level=1,
				exp_ryg_status = 'green', 
				test_detail='Has no Tx code in Data Set B.'
			WHERE 	id=t_id
			; 	
		ELSE  
			set has_D2xx_D3xx =0;		
			SELECT 	COUNT(*) INTO has_D2xx_D3xx 
			FROM 	emihealth_final.`src_sealants_instead_of_filling_data_set_b` 
			WHERE	MID=t_mid and 
				-- attend = t_attend AND 
				(proc_code like 'D2%' or proc_code like 'D3%') AND  
				date_of_service < t_dos AND 
				(date_of_service BETWEEN DATE_SUB(t_dos,INTERVAL 1 year)  AND t_dos )
				;
			IF(has_D2xx_D3xx != 0) THEN 
				UPDATE test_cases_2.t_temp_22_sealant_test_table 
				SET exp_reason_level=2,
				exp_ryg_status = 'green',  
				test_detail='Has D2xxx or D3xxx Tx code in Data Set B.'
				WHERE id=t_id;
			ELSE 	  
				UPDATE test_cases_2.t_temp_22_sealant_test_table 
				SET exp_reason_level=3, 
				exp_ryg_status = 'red', 
				test_detail='Has D2xxx or D3xxx Tx code in Data Set B.'
				WHERE id=t_id;
			END IF ; 
	        END IF ;  
	       END LOOP ;
  CLOSE my_cursor ;
   -- setting up output parameters
  
  UPDATE test_cases_2.t_temp_22_sealant_test_table SET test_status=TRUE WHERE act_reason_level=exp_reason_level;
  UPDATE test_cases_2.t_temp_22_sealant_test_table SET test_status=FALSE WHERE act_reason_level!=exp_reason_level;
  
  -- setting up records counts
  SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_22_sealant_test_table;
  SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_22_sealant_test_table WHERE  act_reason_level != exp_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_22_sealant_test_table WHERE exp_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_22_sealant_test_table WHERE act_reason_level != exp_reason_level;
	IF(temp_count=0) THEN
		SET test_status=TRUE;
		SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
	ELSE
		SET test_status=FALSE;
		SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
	END IF;
  END IF;
  
  END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_TS3_PL_STATS_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_TS3_PL_STATS_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_TS3_PL_STATS_DAILY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying result and pl_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts3_tc4_resPlDailyCount ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying paid money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts3_tc5_resPlDailyEqualPaidMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts3_tc6_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying recovered money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_22_sealantInsteadOfFill_ts3_tc6_resPlDailyEqualRecoveredMoney');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying red counts in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts3_tc7_resPlDailyEqualReds ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.pl_sealants_instead_of_filling_stats_daily] by generating test table[test_cases_2.t_22_pl_temp].'
	,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_22_sealantInsteadOfFill_ts3_tc2_plTestTable/t_22_sealantInsteadOfFill_ts3_tc1_plDailyValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts3_tc1_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts3_tc1_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts3_tc1_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT null;
	DECLARE t_dos DATETIME DEFAULT null;
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT null;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_22_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_sealants_instead_of_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_sealants_instead_of_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_sealants_instead_of_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_sealants_instead_of_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_sealants_instead_of_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_sealants_instead_of_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_sealants_instead_of_filling WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_22_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_22_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend= null;
			SET t_dos= null;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = null;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail= null;
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_22_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_22_pl_temp WHERE t_22_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_22_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_22_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_22_pl_temp WHERE t_22_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts3_tc2_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts3_tc2_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts3_tc2_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_sealants_instead_of_filling_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='sealant_instead_of_filling';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows < 50)then
		SET required_rows = 50;
	end if;
	
	
	 DROP TABLE IF EXISTS t_22_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_22_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL default NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL default NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  default NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  default NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  default NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow')default NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_22_pl_temp; 
	
	
	insert into test_cases_2.t_22_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_sealants_instead_of_filling_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_22_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.results_sealants_instead_of_filling WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_sealants_instead_of_filling_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;	
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_sealants_instead_of_filling` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_sealants_instead_of_filling_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts3_tc6_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts3_tc6_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts3_tc6_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_sealants_instead_of_filling` WHERE isactive=1;
	SELECT SUM(recovered_money) INTO pld_rec_money FROM emihealth_final.`pl_sealants_instead_of_filling_stats_daily` WHERE isactive=1;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_sealants_instead_of_filling` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_sealants_instead_of_filling_stats_daily` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying pl_daily and db_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts4_tc4_checkCountDosPlNDb ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying paid money db_daily  and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts4_tc5_checkTotalCountPlNDb ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying recovered money in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_22_sealantInsteadOfFill_ts4_tc6_checkRygCountsPlNDbTables');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying red counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_13_simpleProphy4a_ts4_tc7_checkRedCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts4_tc8_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying green counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts4_tc8_checkGreenCountsPlNDbTables ');
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_22_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts4_tc2_dashboardTestTable/t_22_sealantInsteadOfFill_ts4_tc1_dashboardDailyValidation ');
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts4_tc1_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts4_tc1_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts4_tc1_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT "";
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_22_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_sealants_instead_of_filling_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_sealants_instead_of_filling_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_sealants_instead_of_filling_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_sealants_instead_of_filling_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_22_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_22_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos='';
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_22_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_22_dashboard_temp WHERE t_22_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_22_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_22_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_22_dashboard_temp WHERE t_22_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts4_tc2_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts4_tc2_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts4_tc2_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=22;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='sealant_instead_of_filling';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_22_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_22_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  default NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_22_dashboard_temp; 
	
	
	insert into test_cases_2.t_22_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		from emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=22) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_22_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts4_tc4_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts4_tc4_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts4_tc4_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.pl_sealants_instead_of_filling_stats_daily WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=22;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_sealants_instead_of_filling_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=22;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_sealants_instead_of_filling_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=22;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_sealants_instead_of_filling_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=22;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts4_tc8_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts4_tc8_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts4_tc8_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_sealants_instead_of_filling_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=22;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying result and pl_monthly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts5_tc2_checkCountResNPlMonthly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying paid money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts5_tc3_checkPaidMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts5_tc4_checkRecvrdMoneyResNPlMthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying recovered money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts5_tc4_checkRecvrdMoneyResNPlMthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts5_tc5_checkEqualRedsResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying red counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts5_tc5_checkEqualRedsResNPlMontly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts5_tc6_distinctYearsCountResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying distinct years counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts5_tc6_distinctYearsCountResNPlMontly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.pl_sealants_instead_of_filling_stats_monthly] by generating test table[test_cases_2.t_temp_22_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts5_tc7A_testTableGen/t_22_sealantInsteadOfFill_ts5_tc7B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_sealants_instead_of_filling` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO plm_count FROM emihealth_final.`pl_sealants_instead_of_filling_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_sealants_instead_of_filling_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts5_tc4_checkRecvrdMoneyResNPlMthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts5_tc4_checkRecvrdMoneyResNPlMthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts5_tc4_checkRecvrdMoneyResNPlMthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_sealants_instead_of_filling_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts5_tc5_checkEqualRedsResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts5_tc5_checkEqualRedsResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts5_tc5_checkEqualRedsResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_sealants_instead_of_filling WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.`pl_sealants_instead_of_filling_stats_monthly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts5_tc6_distinctYearsCountResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts5_tc6_distinctYearsCountResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts5_tc6_distinctYearsCountResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.`pl_sealants_instead_of_filling_stats_monthly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_sealants_instead_of_filling_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_sealantInsteadOfFill';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_22_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_22_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_22_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_22_ts5_tc7(attend, MONTH,YEAR, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,MONTH,YEAR,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		FROM emihealth_final.`pl_sealants_instead_of_filling_stats_monthly` WHERE isactive=1 ORDER BY (CONCAT(MONTH,YEAR)) DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_22_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check , temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_22_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.`results_sealants_instead_of_filling` WHERE isactive=1 AND MONTH(results_sealants_instead_of_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.`results_sealants_instead_of_filling` WHERE isactive=1 AND MONTH(results_sealants_instead_of_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive=1 AND MONTH(results_sealants_instead_of_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			SELECT  ROUND(SUM(paid_money)/2,2) INTO temp_expec_recovered_money FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive=1 AND MONTH(results_sealants_instead_of_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
				
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive=1 AND MONTH(results_sealants_instead_of_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive=1 AND MONTH(results_sealants_instead_of_filling.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				SET temp_expec_color_code='green';
			END IF;
	
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) INTO temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_sealants_instead_of_filling` 
			WHERE isactive=1 AND MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_22_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_22_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_22_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_22_ts5_tc7 WHERE t_temp_22_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_22_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_22_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_22_ts5_tc7 WHERE t_temp_22_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested. No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_TS6_PL_YEARLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_TS6_PL_YEARLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_TS6_PL_YEARLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying result and pl_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts6_tc1_checkCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts6_tc3_checkRecvrdMoneyResNPlYrly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying recovered money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts6_tc3_checkRecvrdMoneyResNPlYrly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying red counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts6_tc4_checkEqualRedsResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts6_tc5_distinctYearsCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying distinct years counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts6_tc5_distinctYearsCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.pl_sealants_instead_of_filling_stats_yearly] by generating test table[test_cases_2.t_temp_22_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts6_tc6A_testTableGen/t_22_sealantInsteadOfFill_ts6_tc6B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_sealants_instead_of_filling` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_sealants_instead_of_filling_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts6_tc3_checkRecvrdMoneyResNPlYrly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts6_tc3_checkRecvrdMoneyResNPlYrly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts6_tc3_checkRecvrdMoneyResNPlYrly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_sealants_instead_of_filling`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_sealants_instead_of_filling_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_sealants_instead_of_filling` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_sealants_instead_of_filling_stats_yearly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts6_tc5_distinctYearsCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts6_tc5_distinctYearsCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts6_tc5_distinctYearsCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.`results_sealants_instead_of_filling` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.`pl_sealants_instead_of_filling_stats_yearly` WHERE isactive=1;
	
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_sealants_instead_of_filling_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_sealantInsteadOfFill';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_22_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_22_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green') NOT NULL,
	  `expec_color_code` ENUM('red','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_22_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_22_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_sealants_instead_of_filling_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_22_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_22_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_sealants_instead_of_filling` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_sealants_instead_of_filling` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select ROUND(SUM(paid_money)/2,2) into temp_expec_recovered_money FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_sealants_instead_of_filling WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
			
				if(temp_g_check!= 0) THEN	
					set temp_expec_color_code='green';
					
			End IF;			
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_sealants_instead_of_filling` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_22_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF(round(temp_actual_recovered_money,0) != round(temp_expec_recovered_money,0)) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_22_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_22_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_22_ts6_tc6 WHERE t_temp_22_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_22_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_22_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_22_ts6_tc6 where t_temp_22_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_TS7_DASHBOARD_MONTHLY_RES_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_TS7_DASHBOARD_MONTHLY_RES_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_TS7_DASHBOARD_MONTHLY_RES_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying distinct year counts in pl_monthly and db_monthly',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts7_tc2_countDistinctYearsPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying total_count db_monthly  and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts7_tc3_checkTotalCountPlMNdbm ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying providers count in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts7_tc4_checkCountNoOfProvPlMNdbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts7_tc6_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying green counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_22_sealantInsteadOfFill_ts7_tc6_checkGreenCountsPlMNDbM');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts7_tc7_checkTotalPMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying paid_money  in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts7_tc7_checkTotalPMoneyCountPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_22_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts7_tc9A_testTableGen/t_22_sealantInsteadOfFill_ts7_tc9B_columnValidation ');		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.`pl_sealants_instead_of_filling_stats_monthly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.`dashboard_monthly_results` WHERE isactive=1 AND TYPE=22;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_sealants_instead_of_filling_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=22;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_sealants_instead_of_filling_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=22;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts7_tc6_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts7_tc6_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts7_tc6_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_sealants_instead_of_filling_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=22;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts7_tc7_checkTotalPMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts7_tc7_checkTotalPMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts7_tc7_checkTotalPMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_sealants_instead_of_filling_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=22;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 and type=22;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_sealantInsteadOfFill';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_22_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_22_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_22_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_22_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=22) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_22_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_22_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_sealants_instead_of_filling_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_sealants_instead_of_filling_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_sealants_instead_of_filling_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_22_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_22_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_22_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_22_ts7_tc9 WHERE t_temp_22_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_22_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_22_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_22_ts7_tc9 WHERE t_temp_22_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_TS8_DASHBOARD_YEARLY_RESULTS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_TS8_DASHBOARD_YEARLY_RESULTS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_TS8_DASHBOARD_YEARLY_RESULTS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts8_tc2_countDistinctYearsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts8_tc4_checkCountNoOfProvPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts8_tc5_checkTotalRedCountsPlYNDbY ');
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts8_tc6_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts8_tc6_checkGreenCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts8_tc7_checkTotalPaidMnyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying paid money money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts8_tc7_checkTotalPaidMnyCountPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_22_ts9_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_22_sealantInsteadOfFill_ts9_tc9A_testTableGen/t_22_sealantInsteadOfFill_ts9_tc9B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.pl_sealants_instead_of_filling_stats_yearly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=22;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.pl_sealants_instead_of_filling_stats_yearly WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=22;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.pl_sealants_instead_of_filling_stats_yearly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=22;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_sealants_instead_of_filling_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=22;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts8_tc6_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts8_tc6_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts8_tc6_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_sealants_instead_of_filling_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=22;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts8_tc7_checkTotalPaidMnyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts8_tc7_checkTotalPaidMnyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts8_tc7_checkTotalPaidMnyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_sealants_instead_of_filling_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=22;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts9_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts9_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts9_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=22;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_sealantInsteadOfFill';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_22_ts9_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_22_ts9_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_22_ts9_tc9; 
	
	
	insert into test_cases_2.t_temp_22_ts9_tc9(year,actual_no_of_providers, actual_total_red, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=22) ORDER BY(year)desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_22_ts9_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_sealantInsteadOfFill_ts9_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_sealantInsteadOfFill_ts9_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_sealantInsteadOfFill_ts9_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_22_ts9_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_sealants_instead_of_filling_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_sealants_instead_of_filling_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
						
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_sealants_instead_of_filling_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_green
			FROM test_cases_2.t_temp_22_ts9_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_22_ts9_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_22_ts9_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_22_ts9_tc9 WHERE t_temp_22_ts9_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_22_ts9_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_22_ts9_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_22_ts9_tc9 WHERE t_temp_22_ts9_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_22_________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_22_________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_22_________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_MAIN`()
BEGIN
	
	call t_23_cbu_TS1_SOURCE_TABLE();
	call t_23_cbu_TS2_RESULT_TABLE();
	CALL t_23_cbu_TS3_PL_DAILY_STATS_TABLE();
	CALL t_23_cbu_TS4_DASHBOARD_DAILY_TABLE();
	CALL t_23_cbu_TS5_PL_MONTHLY_STATS_TABLE();
	CALL t_23_cbu_TS6_PL_YEARLY_STATS_TABLE();
	CALL t_23_cbu_TS7_DASHBOARD_MONTHLY_TABLE();
	CALL t_23_cbu_TS8_DASHBOARD_YEARLY_TABLE();
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_TS1_SOURCE_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts1_tc1_checkBaseSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying base and source table counts.',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts1_tc1_checkBaseSrcCount ');
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts1_tc1_checkBaseSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts1_tc1_checkBaseSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts1_tc1_checkBaseSrcCount`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	
	select count(*) into src_count FROM emihealth_final.cbu_procedure_performed;
	
	SELECT 	count(*)
	into 	base_count
	FROM 	emihealth_final.procedure_performed AS pp
		INNER JOIN
		emihealth_final.`ref_standard_procedures` AS ref
		ON pp.`proc_code` = ref.`pro_code`
	WHERE 	is_invalid=0
		AND 
		(	ref.`pro_code` LIKE ('D2%')
			OR ref.`pro_code` LIKE ('D3%')
			OR ref.`pro_code` LIKE ('D6%')
		)
		;
		
	if(src_count=base_count) then
		set test_status=true;
		set test_detail='Equal counts found in base and source table for (D4xxx,D0180).';
	else
		set test_status=False;
		if(src_count>base_count)then
			set test_detail=concat(src_count-base_count,' more counts  found in source table then base table for (D4xxx,D0180).');
		else
			set test_detail=concat(base_count-src_count,' more counts found in base table then source table for (D4xxx,D0180).');
		end if;
	end if;
	set success=true;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts2_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_23_cbu_ts2_tc1B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			23
			,'Verifying Columns for result table[emihealth_final.results_cbu] by generating test table[test_cases_2.t_temp_23_cbu_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_23_cbu_ts2_tc1A_testTableGen'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts2_tc1A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts2_tc1A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts2_tc1A_testTableGen`(out success Bool)
BEGIN
	DECLARE reason_percent DECIMAL(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        DECLARE selected_reason INT;
        DECLARE iterator INT;
        
        DROP TABLE IF EXISTS t_temp_23_cbu_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_23_cbu_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(10) ZEROFILL NOT NULL,
	  `proc_code` VARCHAR(50) DEFAULT NULL,
	  `attend` VARCHAR(20) DEFAULT NULL,
	  `claim_id` varchar(60) default null,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` DATETIME DEFAULT NULL,
	  
	  `tooth_no` VARCHAR(15) DEFAULT NULL,
	  `remarks` VARCHAR(1000) DEFAULT '',
	  `actual_reason_level` INT(2) DEFAULT NULL,
	  `expected_reason_level` INT(2) DEFAULT NULL,
	  
	  `actual_ryg_status` VARCHAR(30) DEFAULT NULL,
	  `expected_ryg_status` VARCHAR(30) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_23_cbu_test_table;
        
        
        SET iterator = 1;
        
        WHILE(iterator < 7) DO
		SET selected_reason= iterator;
		SELECT reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=23 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_cbu` WHERE reason_level=selected_reason;
		
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		
		INSERT INTO test_cases_2.t_temp_23_cbu_test_table(res_id,attend,MID,claim_id,proc_code,date_of_service,tooth_no,remarks,actual_reason_level,actual_ryg_status)
		SELECT id,attend,MID,claim_id,proc_code,date_of_service,tooth_no,remarks,reason_level,ryg_status
		FROM emihealth_final.results_cbu WHERE reason_level=selected_reason AND isactive=1 ORDER BY RAND() LIMIT reason_sample_count;
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_23_cbu_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;	
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts2_tc1B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts2_tc1B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts2_tc1B_resReasonsValidation`(OUT success INT ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
    DECLARE finished INTEGER DEFAULT 0;
  -- ---------------------------------------------------------------------------
  -- Variables below are used for storting data from test Table
  DECLARE t_id BIGINT(20) DEFAULT 0;
  DECLARE t_attend VARCHAR(20) DEFAULT NULL;
  DECLARE t_mid VARCHAR(50) DEFAULT NULL;
  declare t_claim_id varchar(60) default null;
  DECLARE t_dos DATETIME DEFAULT NULL;
  DECLARE t_proc_code VARCHAR(50) DEFAULT NULL;
  DECLARE t_tooth_no VARCHAR(5) DEFAULT NULL;
  
  -- ------------------------------------------------------------------------------
  -- Variables below are used in if else blocks
  DECLARE count_ , has_root_canal_treat,has_large_filling , has_d2xx_d3xx_d6xx_a ,has_d2xx_d3xx_d6xx_b, has_additional_tooth INT DEFAULT 0;
  
  -- ----------------------------------------------------------------------------
  -- Variables below are used after loop to hold stats of tested records
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  DECLARE dos_root_canal_treat DATETIME DEFAULT NULL;
  
  -- Declaring Cursor
  DECLARE test_row_cursor CURSOR FOR 
		    SELECT id,proc_code ,attend,MID,claim_id,date_of_service,tooth_no FROM t_temp_23_cbu_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  -- ---------------------------------------------------------------------------
  -- Marking all records as reason level 4 where remarks = nea,retention,narrative,photo
  UPDATE t_temp_23_cbu_test_table
  SET 	 expected_reason_level=4, expected_ryg_status='green'
  WHERE  date_of_service !='' AND
	 proc_code != '' AND
	 attend !='' AND
	 MID !='' AND
	(remarks LIKE '%retain%' OR remarks LIKE '%retention%'OR remarks LIKE '%narrative%' OR remarks LIKE '%photo%'
	  OR remarks LIKE '%nea%');
 -- ----------------------------------------------------------------------------  
  OPEN test_row_cursor ;
  get_test_row :LOOP
		SET t_id=0;  SET t_proc_code='';  SET t_attend='';  SET t_mid=''; 
		FETCH test_row_cursor INTO  t_id,t_proc_code, t_attend, t_mid,t_claim_id,t_dos, t_tooth_no;
		IF(finished = 1) THEN 
		LEAVE get_test_row ;
		END IF ;
		    
		    
		-- ----------------------------------------------------------Outer if starts----------------------------------------------------------------
		IF (	(t_dos != '') AND (t_dos IS NOT NULL) AND (t_attend !='') AND (t_mid !='') AND (t_tooth_no != '') AND (t_tooth_no IS NOT NULL) AND
		        (t_proc_code !='') AND (t_attend IS NOT NULL) AND (t_mid IS NOT NULL) AND (t_proc_code IS NOT NULL)	) THEN
		   -- -------------------------------------------------------------------------------------------------------------------------------
		   -- Check claims going back 3 years to see if there is a claim for this tooth for CDT code D2161, D2335, D2394, D2544, D2644, D2664
		   -- ------------------------------------------------------------------------------------------------------------------------------- 
		   SET count_ =0;
		   SELECT COUNT(*) INTO count_
		   FROM emihealth_final.cbu_procedure_performed
		   WHERE MID=t_mid AND
			(date_of_service BETWEEN (DATE_SUB(t_dos,INTERVAL 3 YEAR)) AND (DATE_SUB(t_dos,INTERVAL 1 DAY )) )AND
			 proc_code IN ('D2161', 'D2335', 'D2394', 'D2544', 'D2644', 'D2664') AND
			 tooth_no=t_tooth_no;
		   IF(count_ > 0) THEN
			UPDATE t_temp_23_cbu_test_table
			SET expected_reason_level=1,
			    expected_ryg_status='green'
			WHERE id=t_id AND expected_reason_level IS NULL;
			ITERATE get_test_row;
		   END IF;
		   -- ------------------------------------------------------------------------------------------------------------------------
		   -- Check claims going back 6 months to see if there is a root canal treatment on this tooth, CDT D3310, D3320, D333x, D334x
		   -- ------------------------------------------------------------------------------------------------------------------------
		   SET has_root_canal_treat = 0;
		   SELECT COUNT(*),MIN(date_of_service)
		   INTO has_root_canal_treat,dos_root_canal_treat
		   FROM emihealth_final.cbu_procedure_performed
		   WHERE MID=t_mid AND
			(date_of_service BETWEEN (DATE_SUB(t_dos,INTERVAL 6 MONTH)) AND (DATE_SUB(t_dos,INTERVAL 1 DAY )) )AND
			( proc_code IN ('D3310', 'D3320') OR proc_code LIKE 'D333%' OR proc_code LIKE 'D334%' )AND
			 tooth_no=t_tooth_no;
			 
		   IF(has_root_canal_treat>0) THEN
			-- --------------------------------------------------------------------------------------------
			-- Check claim going back 3 years to see if there is a large filling (D2460, D2332, D2393, D2543, 
			-- D2643, D2663) on this tooth BEFORE the date of the root canal.
			-- --------------------------------------------------------------------------------------------
			SET has_large_filling = 0;
			SELECT COUNT(*)
			INTO has_large_filling
			FROM emihealth_final.cbu_procedure_performed
			WHERE MID=t_mid AND
			(date_of_service BETWEEN (DATE_SUB(dos_root_canal_treat,INTERVAL 3 YEAR)) AND (DATE_SUB(dos_root_canal_treat,INTERVAL 1 DAY )) )AND
			proc_code IN ('D2460', 'D2332', 'D2393','D2543', 'D2643', 'D2663') AND
			tooth_no=t_tooth_no;
			IF(has_large_filling >0) THEN
				UPDATE t_temp_23_cbu_test_table
				SET expected_reason_level=3,
				expected_ryg_status='green'
				WHERE id=t_id AND expected_reason_level IS NULL;
				ITERATE get_test_row;
			END IF;
		   END IF; 
		-- ------------------------------------------------------------------------------------------------------------------------------------
		-- Check claims going back 3 years to see if there is a claim for ANY CDT treatment code for this particular tooth (D2xxx, D3xxx, D6xxx)
		-- ------------------------------------------------------------------------------------------------------------------------------------
		
		SELECT COUNT(*)
		INTO has_d2xx_d3xx_d6xx_a
		FROM emihealth_final.cbu_procedure_performed
		WHERE MID=t_mid  -- > Changed
		      and ( date_of_service BETWEEN (DATE_SUB(t_dos,INTERVAL 3 YEAR)) AND t_dos)
		      and (proc_code LIKE 'D2%' OR proc_code LIKE 'D3%' OR proc_code LIKE 'D6%') 
		      and proc_code != 'D2950'
		      and tooth_no = t_tooth_no;
		
		SELECT COUNT(*)
		INTO has_d2xx_d3xx_d6xx_b
		FROM emihealth_final.cbu_procedure_performed
		WHERE MID=t_mid  -- > Changed
		      AND ( date_of_service BETWEEN (DATE_SUB(t_dos,INTERVAL 3 YEAR)) AND t_dos)
		      AND proc_code = 'D2950'
		      AND tooth_no = t_tooth_no;
		      
		IF(has_d2xx_d3xx_d6xx_a = 0 and has_d2xx_d3xx_d6xx_b < 2)THEN
			UPDATE t_temp_23_cbu_test_table
			SET expected_reason_level=2,
			    expected_ryg_status='red'
			WHERE id=t_id AND expected_reason_level IS NULL;
			ITERATE get_test_row;
		ELSE
			SELECT COUNT(DISTINCT(tooth_no))
			INTO has_additional_tooth
			FROM emihealth_final.cbu_procedure_performed
			WHERE MID=t_mid AND
			    ( date_of_service BETWEEN (DATE_SUB(t_dos,INTERVAL 3 YEAR)) AND (DATE_SUB(t_dos,INTERVAL 1 DAY )) )AND
			    ( proc_code LIKE 'D2%' OR proc_code LIKE 'D3%' OR proc_code LIKE 'D6%' ) AND
			    tooth_no != t_tooth_no AND
			    (proc_code NOT IN ('D2140', 'D2150', 'D2330', 'D2331', 'D2391', 'D2392', 'D2410',
						      'D2420', 'D2510', 'D2520', 'D2610', 'D2620', 'D2650', 'D2651',
						     'D2960', 'D2961', 'D2962') 
				AND proc_code NOT LIKE 'D8%'
				AND proc_code NOT LIKE 'D997%'
				AND proc_code NOT LIKE 'D0%'
				AND proc_code NOT LIKE 'D1%');
				  
			IF(has_additional_tooth>0) THEN
				UPDATE t_temp_23_cbu_test_table
				SET expected_reason_level=6,
				expected_ryg_status='yellow'
				WHERE id=t_id AND expected_reason_level IS NULL;
				ITERATE get_test_row;
			ELSE
				UPDATE t_temp_23_cbu_test_table
				SET expected_reason_level=5,
				expected_ryg_status='red'
				WHERE id=t_id AND expected_reason_level IS NULL;
				ITERATE get_test_row;
			END IF;
		END IF;
		
		
		-- --------------------------------------------------------------------------------------------------------------------------------------
		ELSE
			UPDATE 	t_temp_23_cbu_test_table
			SET 	expected_reason_level = -1,
				expected_ryg_status = 'N/A',
				test_detail = 'Important fields are empty'
			WHERE 	id=t_id;
		-- -----------------------------------------------------------Outer if Ends------------------------------------------------------------------
		END IF;
		
		END LOOP ;
		CLOSE test_row_cursor ;
  
  -- setting up output parameters
  
  UPDATE t_temp_23_cbu_test_table SET test_status=TRUE WHERE actual_reason_level=expected_reason_level;
  UPDATE t_temp_23_cbu_test_table SET test_status=FALSE WHERE actual_reason_level!=expected_reason_level;
  
  -- setting up records counts
  SELECT COUNT(*) INTO count_total_records FROM t_temp_23_cbu_test_table;
  SELECT COUNT(*) INTO count_defective_records FROM t_temp_23_cbu_test_table WHERE  actual_reason_level != expected_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM t_temp_23_cbu_test_table WHERE expected_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM t_temp_23_cbu_test_table WHERE actual_reason_level != expected_reason_level;
	IF(temp_count=0) THEN
		SET test_status=TRUE;
		SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
	ELSE
		SET test_status=FALSE;
		SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
	END IF;
  END IF;
 
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying result and pl_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts3_tc4_resPlDailyCount ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying paid money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_23_cbu_ts3_tc5_resPlDailyEqualPaidMoney');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts3_tc6_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying recovered money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts3_tc6_resPlDailyEqualRecoveredMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying red counts in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts3_tc7_resPlDailyEqualReds ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts3_tc8_resPlDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying distinct years in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts3_tc8_resPlDailyDistinctYearsCount ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_23_cbu_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying table[emihealth_final.pl_cbu_daily] by generating test table[test_cases_2.t_23_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts3_tc2_plTestTable/t_23_cbu_ts3_tc1_plDailyValidation ');
  
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts3_tc1_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts3_tc1_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts3_tc1_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_23_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_cbu WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_cbu WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_cbu WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_cbu WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_cbu WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_cbu WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_cbu WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_23_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_23_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend=NULL;
			SET t_dos= NULL;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code =NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_23_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_23_pl_temp WHERE t_23_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_23_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_23_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_23_pl_temp WHERE t_23_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts3_tc2_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts3_tc2_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts3_tc2_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_cbu_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_daily_cbu';
	
	SET required_rows = weightage*total_counts/100;
	if(required_rows < 50)then
		set required_rows = 50;
	end if;
	
	
	 DROP TABLE IF EXISTS t_23_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_23_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','yellow','green') NOT NULL,
	  `expec_color_code` ENUM('red','yellow','green') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_23_pl_temp; 
	
	
	insert into test_cases_2.t_23_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_cbu_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_23_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.results_cbu WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_cbu_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_cbu` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_cbu_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts3_tc6_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts3_tc6_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts3_tc6_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_cbu` WHERE isactive=1;
	SELECT SUM(recovered_money) INTO pld_rec_money FROM emihealth_final.`pl_cbu_stats_daily` WHERE isactive=1;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_cbu` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_cbu_stats_daily` WHERE isactive=1;
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_cbu` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_cbu_stats_daily` WHERE isactive=1;
	
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			23
			,'Verifying paid money db_daily  and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_23_cbu_ts4_tc5_checkTotalCountPlNDb'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			23
			,'Verifying recovered money in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_23_cbu_ts4_tc6_checkRygCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			23
			,'Verifying red counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_23_cbu_ts4_tc7_checkRedCountsPlNDbTables'
		);
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts4_tc8_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			23
			,'Verifying yellow counts in db_daily and pl_daily table'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_23_cbu_ts4_tc8_checkYellowCountsPlNDbTables'
		);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_23_cbu_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			23
			,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_23_dashboard_temp]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report'
			,'t_23_cbu_ts4_tc2_dashboardTestTable'
		);
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts4_tc1_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts4_tc1_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts4_tc1_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT NULL;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_23_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_cbu_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_cbu_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_cbu_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_cbu_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_23_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_23_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos=NULL;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail=NULL;
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_23_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_23_dashboard_temp WHERE t_23_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_23_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_23_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_23_dashboard_temp WHERE t_23_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts4_tc2_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts4_tc2_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts4_tc2_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=23;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_daily_cbu';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_23_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_23_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_23_dashboard_temp; 
	
	
	insert into test_cases_2.t_23_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=23) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_23_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_cbu_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=23;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	/*
		SELECT COUNT(*) 
		FROM emihealth_final.`pl_cbu_stats_daily`
	*/
	SELECT  SUM(tab.attends)
	INTO 	pl_total_count
	FROM
		(	
			SELECT date_of_service,COUNT(DISTINCT(attend)) AS attends
			FROM emihealth_final.results_cbu 
			WHERE isactive=1
			GROUP BY date_of_service
		) AS tab
		;
	SELECT SUM(total_red + total_yellow + total_green)
	INTO 	db_total_ryg_count
	FROM emihealth_final.`dashboard_daily_results`
	WHERE isactive = 1 
		AND TYPE = 23;
		
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_cbu_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=23;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts4_tc8_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts4_tc8_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts4_tc8_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_cbu_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=23;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts4_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts4_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts4_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 and type=23;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_daily_cbu';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_23_ts4_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_23_ts4_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_23_ts4_tc9; 
	
	
	insert into test_cases_2.t_temp_23_ts4_tc9(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 and type=23) ORDER BY (date_of_service) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_23_ts4_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts4_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts4_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts4_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT NULL;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_temp_23_ts4_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) into temp_expec_no_of_providers from emihealth_final.pl_cbu_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)into temp_expec_total_red  from emihealth_final.pl_cbu_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_cbu_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.`pl_cbu_stats_daily` WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			select actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			into temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_23_ts4_tc9
			where date_of_service=t_dos limit 1;
			
			if(temp_expec_no_of_providers !=temp_actual_no_of_providers) then
				set test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			else
				if(temp_expec_total_red !=temp_actual_total_red) then
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				else
					if(temp_expec_total_yellow !=temp_actual_total_yellow) then
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					else
						IF(temp_expec_total_green !=temp_actual_total_green) then
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						else
							set test_detail='Data   in   against   all    columns   is   ok.';
							set temp_test_status=true;
						end if;
					end if;
				end if;
						
			end if;
			     
			
			
			UPDATE test_cases_2.t_temp_23_ts4_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			set t_dos=NULL;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail=NULL;
			SET temp_test_status=0;
		END LOOP ;
        close my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_23_ts4_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_23_ts4_tc9 WHERE t_temp_23_ts4_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_23_ts4_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_23_ts4_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_23_ts4_tc9 WHERE t_temp_23_ts4_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying result and pl_monthly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts5_tc2_checkCountResNPlMonthly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying paid money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts5_tc3_checkPaidMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying recovered money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts5_tc4_checkRecoveredMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts5_tc5_checkEqualRedsResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying red counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_23_cbu_ts5_tc5_checkEqualRedsResNPlMontly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts5_tc6_distinctYearsCountResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying distinct years counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts5_tc6_distinctYearsCountResNPlMontly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts6_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_23_cbu_ts6_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying table[emihealth_final.pl_cbu_stats_monthly] by generating test table[test_cases_2.t_temp_23_ts4_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts6_tc7A_testTableGen/t_23_cbu_ts6_tc7B_columnValidation ');
 
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT default 0;
	DECLARE plm_count INT default 0;
	SELECT COUNT(*) into res_count FROM  emihealth_final.`results_cbu` WHERE isactive=1;
	SELECT SUM(procedure_count) into plm_count from emihealth_final.`pl_cbu_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_cbu WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_cbu_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_cbu WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_cbu_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts5_tc5_checkEqualRedsResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts5_tc5_checkEqualRedsResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts5_tc5_checkEqualRedsResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_cbu WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.pl_cbu_stats_monthly WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts5_tc6_distinctYearsCountResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts5_tc6_distinctYearsCountResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts5_tc6_distinctYearsCountResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_cbu WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.pl_cbu_stats_monthly WHERE isactive=1;
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.pl_cbu_stats_monthly where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_monthly_cbu';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=10;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_23_ts3_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_23_ts3_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` tinyint(2) zerofill Not Null ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) zerofill NOT NULL,
	  `expec_number_of_violations`INT(4) zerofill DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_23_ts3_tc7; 
	
	
	insert into test_cases_2.t_temp_23_ts3_tc7(attend, month,year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,month,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.pl_cbu_stats_monthly WHERE isactive=1 order by (concat(month,year)) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_23_ts3_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_month tinyint default 0;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'green','yellow') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,month,year FROM test_cases_2.t_temp_23_ts3_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_cbu` WHERE isactive=1 AND MONTH(results_cbu.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_cbu` where isactive=1 AND MONTH(results_cbu.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_cbu WHERE isactive=1 AND MONTH(results_cbu.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_cbu WHERE isactive=1 AND MONTH(results_cbu.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_cbu WHERE isactive=1 AND MONTH(results_cbu.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_cbu WHERE isactive=1 AND MONTH(results_cbu.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_cbu WHERE isactive=1 AND MONTH(results_cbu.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_cbu` 
			WHERE isactive=1 and MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_23_ts3_tc7  WHERE attend=t_attend AND year=t_year and month=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_23_ts3_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend and month=t_month and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set t_month=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code =NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_23_ts3_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_23_ts3_tc7 WHERE t_temp_23_ts3_tc7.test_status !=TRUE;
	
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_23_ts3_tc7;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_23_ts3_tc7) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_23_ts3_tc7 where t_temp_23_ts3_tc7.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_TS6_PL_YEARLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_TS6_PL_YEARLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_TS6_PL_YEARLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying result and pl_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_23_cbu_ts6_tc1_checkCountResNPlYearly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying paid money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts5_tc3_checkPaidMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying recovered money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts6_tc3_checkRecoveredMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying red counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts6_tc4_checkEqualRedsResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts6_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_23_cbu_ts6_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying table[emihealth_final.pl_cbu_stats_yearly] by generating test table[test_cases_2.t_temp_23_ts4_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts6_tc7A_testTableGen/ t_23_cbu_ts6_tc7B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_cbu` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.`pl_cbu_stats_yearly` WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_cbu` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_cbu_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_cbu`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_cbu_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_cbu` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_cbu_stats_yearly` WHERE isactive=1;
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts6_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts6_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts6_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.pl_simple_prophy_stats_yearly where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_cbu';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_23_ts4_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_23_ts4_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_23_ts4_tc7; 
	
	
	insert into test_cases_2.t_temp_23_ts4_tc7(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_cbu_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_23_ts4_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts6_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts6_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts6_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_23_ts4_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_cbu` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_cbu` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_cbu WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_cbu WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_cbu WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_cbu WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.`results_cbu` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_cbu` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_23_ts4_tc7  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_23_ts4_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend=null;
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code =NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_23_ts4_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_23_ts4_tc7 WHERE t_temp_23_ts4_tc7.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_23_ts4_tc7;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_23_ts4_tc7) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_23_ts4_tc7 where t_temp_23_ts4_tc7.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying distinct year counts in pl_monthly and db_monthly',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts7_tc2_countDistinctYearsPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying total_count db_monthly  and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts7_tc3_checkTotalCountPlMNdbm ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying providers count in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts7_tc4_checkCountNoOfProvPlMNdbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying paid_money  in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_23_cbu_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_23_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts7_tc9A_testTableGen/ t_23_cbu_ts7_tc9B_columnValidation');		
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.`pl_cbu_stats_monthly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=23;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.`pl_cbu_stats_monthly` WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=23;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.`pl_cbu_stats_monthly` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=23;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.`pl_cbu_stats_monthly` WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=23;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.`pl_cbu_stats_monthly` WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=23;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 and type=23;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_cbu';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_23_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_23_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_23_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_23_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=23) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_23_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_23_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_cbu_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_cbu_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_cbu_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_cbu_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_23_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_23_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_yellow=temp_actual_total_yellow=0; 
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_23_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_23_ts7_tc9 WHERE t_temp_23_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_23_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_23_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_23_ts7_tc9 WHERE t_temp_23_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts8_tc2_countDistinctYearsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts8_tc4_checkCountNoOfProvPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts8_tc5_checkTotalRedCountsPlYNDbY ');
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts8_tc7_checkGreenCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying paid money money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_23_cbu_ts8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_23_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_23_cbu_ts8_tc9A_testTableGen/t_23_cbu_ts8_tc9B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.`pl_cbu_stats_yearly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=23;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.`pl_cbu_stats_yearly` WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=23;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.pl_cbu_stats_yearly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=23;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_cbu_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=23;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_cbu_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=23;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_cbu_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=23;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_cbu_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=23;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts8_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts8_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts8_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=23;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_cbu';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_23_ts8_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_23_ts8_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_23_ts8_tc9; 
	
	
	insert into test_cases_2.t_temp_23_ts8_tc9(year,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=23) ORDER BY(year)desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_23_ts8_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_cbu_ts8_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_cbu_ts8_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_cbu_ts8_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_23_ts8_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_cbu_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_cbu_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_cbu_stats_yearly WHERE YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_cbu_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_23_ts8_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_23_ts8_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_23_ts8_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_23_ts8_tc9 WHERE t_temp_23_ts8_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_23_ts8_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_23_ts8_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_23_ts8_tc9 WHERE t_temp_23_ts8_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_23_________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_23_________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_23_________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_MAIN`()
BEGIN
	call `t_24_denyPulpOnAdult_TS1_SOURCE_TABLE`();
	call `t_24_denyPulpOnAdult_TS2_RESULT_TABLE`();
	call `t_24_denyPulpOnAdult_TS3_PL_DAILY_STATS_TABLE`();
	call `t_24_denyPulpOnAdult_TS4_DASHBOARD_DAILY_TABLE`();
	call `t_24_denyPulpOnAdult_TS5_PL_MONTHLY_STATS_TABLE`();
	call `t_24_denyPulpOnAdult_TS6_PL_STATS_YEARLY_TABLE`();
	call `t_24_denyPulpOnAdult_TS7_DASHBOARD_MONTHLY_TABLE`();
	call `t_24_denyPulpOnAdult_TS8_DASHBOARD_YEARLY_TABLE`();
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_TS1_SOURCE_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts1_tc1_baseSrcCntEqual`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying base and source counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts1_tc1_baseSrcCntEqual');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts1_tc2_impColValueSrcNotNull`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying important column values are not null',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts1_tc2_impColValueSrcNotNull');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts1_tc3_srcHasUniqeAttendID`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Source table has unique Attend Id',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts1_tc3_srcHasUniqeAttendID ');
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts1_tc1_baseSrcCntEqual` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts1_tc1_baseSrcCntEqual` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts1_tc1_baseSrcCntEqual`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	
	SELECT 	COUNT(*)
	into 	src_count 
	FROM 	emihealth_final.src_deny_pulpotomy_algo_on_adult 
	where 	proc_code in('D3220')
		;
	SELECT 	COUNT(*) 
	into 	base_count 
	FROM 	emihealth_final.procedure_performed 
	where 	proc_code in('D3220') and is_invalid=0
		and tooth_no != ''
		;
	
	if(src_count=base_count) then
		set test_status=true;
		set test_detail='Equal counts found in base and source table.';
	else
		set test_status=False;
		if(src_count>base_count)then
			set test_detail=concat(src_count-base_count,' more counts  found in source table then base table.');
		else
			set test_detail=concat(base_count-src_count,' more counts found in base table then source table.');
		end if;
	end if;
	set success=true;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts1_tc2_impColValueSrcNotNull` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts1_tc2_impColValueSrcNotNull` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts1_tc2_impColValueSrcNotNull`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a,count_b INT default 0;
	DECLARE total_count INT default 0;
	
	SELECT COUNT(*) INTO count_a 
	FROM emihealth_final.src_deny_pulpotomy_algo_on_adult  
	WHERE mid='' or attend='' or date_of_service='';
	
	SELECT COUNT(*) INTO count_b
	FROM emihealth_final.src_deny_pulpotomy_algo_on_adult  
	WHERE MID is null  OR attend is null  OR date_of_service is null;
	
	
	set total_count = count_a + count_b;
	
	IF(total_count=0) THEN
		SET test_status=TRUE;
		SET test_detail='No record found in source table having null value in important attributes.';
	ELSE
		SET test_status=FALSE;
	        SET test_detail=CONCAT(total_count,' records found in source table having null value in important attributes.');	
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts1_tc3_srcHasUniqeAttendID` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts1_tc3_srcHasUniqeAttendID` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts1_tc3_srcHasUniqeAttendID`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a INT;
	DECLARE count_b INT;
	SELECT COUNT(DISTINCT(attend)) into count_a FROM emihealth_final.src_deny_pulpotomy_algo_on_adult;
        SELECT COUNT(DISTINCT(CONCAT(attend,attend_name))) into count_b FROM emihealth_final.src_deny_pulpotomy_algo_on_adult;
	
	IF(count_a=count_b) THEN
		SET test_status=TRUE;
		SET test_detail='Attend ID is unique in source table.';
	ELSE
		SET test_status=FALSE;
		SET test_detail='Attend Id is not unique in source table.';	
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts2_tc1_srcResCntEqual`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying base and source counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts2_tc1_srcResCntEqual ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts2_tc2_impColValueResNotNull`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying important column values are not null',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts2_tc2_impColValueResNotNull');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts2_tc3_resHasD3220Only`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Result table has only D3220',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts2_tc3_resHasD3220Only');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts2_tc4_checkRsnLvlRYGStatusStatusSame`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying color code is according to reason level',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts2_tc4_checkRsnLvlRYGStatusStatusSame');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts2_tc5A_testTableGen`(@a);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts2_tc5B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,
	    'Verifying weekly result table[emihealth_final.results_deny_pulpotomy_on_adult] using test table[test_cases_2.t_temp_24_denyPulpOnAdult_test_table]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts2_tc5A_testTableGen/t_24_denyPulpOnAdult_ts2_tc5B_resReasonsValidation ');
	     
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts2_tc1_srcResCntEqual` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts2_tc1_srcResCntEqual` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts2_tc1_srcResCntEqual`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE res_count INT;
	SELECT COUNT(*)into src_count FROM emihealth_final.src_deny_pulpotomy_algo_on_adult where proc_code in('D3220');
	
	SELECT COUNT(*) into res_count FROM emihealth_final.results_deny_pulpotomy_on_adult where isactive=1;
	-- set src_count=4; -- for testing
	if(src_count=res_count) then
		set test_status=true;
		set test_detail='Equal counts found in result and source table.';
	else
		set test_status=False;
		if(src_count>res_count)then
			set test_detail=concat(src_count-res_count,' more counts  found in source table then result table.');
		else
			set test_detail=concat(res_count-src_count,' more counts found in result table then source table.');
		end if;
	end if;
	set success=true;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts2_tc2_impColValueResNotNull` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts2_tc2_impColValueResNotNull` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts2_tc2_impColValueResNotNull`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a,count_b INT default 0;
	DECLARE total_count INT;
	SELECT COUNT(*) INTO count_a FROM emihealth_final.results_deny_pulpotomy_on_adult AS res WHERE (res.`attend`='' or res.`mid`='' or res.`date_of_service`='') and isactive=1;
	SELECT COUNT(*) INTO count_b FROM emihealth_final.results_deny_pulpotomy_on_adult AS res WHERE (res.`reason_level`='' or res.`ryg_status`='' OR res.`proc_code`='') and isactive=1;
	-- set count_a=4; -- for testing
	set total_count = count_a + count_b;
	
	IF(total_count=0) THEN
		SET test_status=TRUE;
		SET test_detail='No record found in result table having null value in important attributes.';
	ELSE
		SET test_status=FALSE;
	        SET test_detail=CONCAT(total_count,' records found in result table having null value in important attributes.');	
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts2_tc3_resHasD3220Only` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts2_tc3_resHasD3220Only` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts2_tc3_resHasD3220Only`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE res_count INT;
	SELECT COUNT(*)into res_count FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE proc_code NOT IN('D3220');
	IF (res_count=0) THEN
		SET test_status = TRUE;
		SET test_detail='No record found without procedure code (D3220) in result table.';
	ELSE
		SET test_status = FALSE;
		SET test_detail=CONCAT(res_count,' records found without procedure code (D3220) in result table.');
	END IF;
	SET success=TRUE;
end */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts2_tc4_checkRsnLvlRYGStatusStatusSame` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts2_tc4_checkRsnLvlRYGStatusStatusSame` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts2_tc4_checkRsnLvlRYGStatusStatusSame`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
        DECLARE count_1,count_2,count_3,count_4,count_5 INT;
	DECLARE reason_cnt VARCHAR(10) DEFAULT '';
	Declare pass_flag bool default True;
	
	SELECT count(*) into count_1 FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE reason_level = 1 AND (ryg_status != 'green' OR STATUS != 'Allow Code D3220') AND isactive=1;
        SELECT count(*) INTO count_2 FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE reason_level = 2 AND (ryg_status != 'red' OR STATUS != 'Downcode to Code D3221') AND isactive=1;
	SELECT count(*) INTO count_3 FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE reason_level = 3 AND (ryg_status != 'yellow' OR STATUS != 'Allow Code D3220') AND isactive=1;
	
	
	-- set count_1=1;
	-- set count_2=1;
	-- set count_3=1;
	
	IF(count_1 !=0 ) THEN
		SET reason_cnt='[1]';
		set pass_flag=false;
	END IF;
	IF(count_2 !=0 ) THEN
		SET reason_cnt=CONCAT(reason_cnt,'[2]');
		SET pass_flag=FALSE;
	END IF;
	IF(count_3 !=0 ) THEN
		SET reason_cnt=CONCAT(reason_cnt,'[3]');
		SET pass_flag=FALSE;
	END IF;
	
	-- Setting Output Parameters
	if(pass_flag=True) then
		set test_status=true;
		set test_detail='Colunms(reason_level, ryg_status, status) are representing same output.';
	else
		SET test_status=False;
		SET test_detail=concat('In reasons(',reason_cnt,'), Colunms(reason_level, ryg_status, status) do not represent same output.');
	end if;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts2_tc5A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts2_tc5A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts2_tc5A_testTableGen`(out success Bool)
BEGIN
	declare reason_percent decimal(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        drop table if exists t_temp_24_denyPulpOnAdult_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_24_denyPulpOnAdult_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(10) ZEROFILL NOT NULL,
	  `proc_code` VARCHAR(50) DEFAULT NULL,
	  `attend` varchar(20) Default Null,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` datetime default Null,
	  
	  `tooth_no` VARCHAR(15) DEFAULT NULL,
	  
	  `actual_reason_level` int(2) default Null,
	  `expected_reason_level` INT(2) DEFAULT NULL,
	  
	  `actual_ryg_status` VARCHAR(30) DEFAULT NULL,
	  `expected_ryg_status` VARCHAR(30) DEFAULT NULL,
	  `actual_status` VARCHAR(250) DEFAULT NULL,
	  `expected_status` VARCHAR(250) DEFAULT NULL,
	  
	  `test_status` bool Default Null,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_24_denyPulpOnAdult_test_table;
        
        set iterator = 1;
        while(iterator < 4) Do
		SET selected_reason= iterator;
		select reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  where algo_id=24 and reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) into reason_total_count FROM emihealth_final.`results_deny_pulpotomy_on_adult` where reason_level=selected_reason;
		/*
		IF(reason_total_count < 100) then
			set reason_sample_count=reason_total_count;
		else
			set reason_sample_count=(reason_total_count*reason_percent)/100;
		end if;
		*/
		SET reason_sample_count=(reason_total_count*reason_percent)/100;
		IF(reason_sample_count < 50) THEN
			SET reason_sample_count = 50;
		END IF;
		
		INSERT INTO test_cases_2.t_temp_24_denyPulpOnAdult_test_table 
			(res_id,proc_code,attend,MID,date_of_service,tooth_no,actual_reason_level,actual_ryg_status,actual_status) 
		SELECT  id,proc_code,attend,MID,date_of_service,tooth_no,reason_level,ryg_status,STATUS
		FROM emihealth_final.results_deny_pulpotomy_on_adult 
		WHERE reason_level=selected_reason AND isactive=1 ORDER BY RAND() LIMIT reason_sample_count;
		
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_24_denyPulpOnAdult_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts2_tc5B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts2_tc5B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts2_tc5B_resReasonsValidation`(OUT success int ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0;
  -- -------------------------------------------------------------------------------
  -- Variables below are used for storting data from test Table
  -- -------------------------------------------------------------------------------
  DECLARE t_id BIGINT(20) default 0;
  declare t_attend varchar(20) default '';
  DECLARE t_mid VARCHAR(50) default '';
  DECLARE t_dos DateTime default '';
  DECLARE t_proc_code VARCHAR(50) default '';
  declare t_tooth_no varchar(15) default '';
  
  -- -------------------------------------------------------------------------------
  -- Variables below are used in if else blocks
   -- ------------------------------------------------------------------------------
   declare is_emergencyEvaluation_code int default 0;
   
  -- -------------------------------------------------------------------------------
  -- Variables below are used after loop to hold stats of tested records
  -- -------------------------------------------------------------------------------
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  -- -------------------------------------------------------------------------------
  -- Variables below are used for maintaing cursor
  -- -------------------------------------------------------------------------------
  DECLARE test_row_cursor CURSOR FOR 
		    SELECT id,proc_code ,attend,mid,date_of_service,tooth_no FROM test_cases_2.t_temp_24_denyPulpOnAdult_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  -- PROCESSING STARTS --
  OPEN test_row_cursor ;
  get_test_row :LOOP
		    -- Setting variables to null value
		    set t_id =0;   set t_attend='';   set t_mid='';   set t_dos='';   set t_proc_code='';   set t_tooth_no='';
		    set is_emergencyEvaluation_code=0;
		    
		    FETCH test_row_cursor INTO  t_id,t_proc_code, t_attend, t_mid,t_dos,t_tooth_no;
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    -- Checking tooth no is null or proc code is not other than D3220
		    -- ----------------------------------------------------------IF "A" STARTS-----------------------------------------------------------------------------
		    if((t_proc_code != 'D3220') or (t_tooth_no='') or (t_tooth_no is null)) then
			UPDATE test_cases_2.t_temp_24_denyPulpOnAdult_test_table
			SET expected_reason_level=-1,
			expected_ryg_status='N/A',
			expected_status='N/A',
			test_detail='Tooth No. is empty or procedure code id not D3220.'
			WHERE id=t_id;
		    else
			-- Checking Is the value in the tooth number field a letter?
			-- --------------------------------------------------IF "B" STARTS-----------------------------------------------------------------
			if (t_tooth_no in('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U'))then
				UPDATE test_cases_2.t_temp_24_denyPulpOnAdult_test_table
				SET expected_reason_level=1,
				expected_ryg_status='green',
				expected_status='Allow Code D3220',
				test_detail=concat('Tooth No is (',t_tooth_no,') which is alphabatical.')
				where id=t_id;
			else
			 -- Is there an Emergency Evaluation code D0140 on the same DOS as the D3220?
				select count(*) into is_emergencyEvaluation_code
				FROM emihealth_final.src_deny_pulpotomy_algo_on_adult
				where proc_code='D0140'
				and date_of_service in (t_dos)
				and mid=t_mid;
				
				if(is_emergencyEvaluation_code !=0 ) then
					UPDATE test_cases_2.t_temp_24_denyPulpOnAdult_test_table
					SET expected_reason_level=2,
					expected_ryg_status='red',
					expected_status='Downcode to Code D3221',
					test_detail=CONCAT('Yes, there is emergency evaluation procedure code(D0140) on same date [',t_dos,']')
					WHERE id=t_id;
				else
					UPDATE test_cases_2.t_temp_24_denyPulpOnAdult_test_table
					SET expected_reason_level=3,
					expected_ryg_status='yellow',
					expected_status='Allow D3220',
					test_detail=CONCAT('No, there is no emergency evaluation procedure code(D0140) on same date [',t_dos,']')
					WHERE id=t_id;
				end if;
			end if;
			-- --------------------------------------------------IF "B" ENDS------------------------------------------------------------------
		    end if;
		    -- ----------------------------------------------------------IF "A" ENDS-------------------------------------------------------------------------------
		    
		   
		    	
	        END LOOP ;
  CLOSE test_row_cursor ;
  -- PROCESSING ENDS --
  
  -- setting up output parameters
  
  UPDATE test_cases_2.t_temp_24_denyPulpOnAdult_test_table SET test_status=TRUE WHERE actual_reason_level=expected_reason_level;
  UPDATE test_cases_2.t_temp_24_denyPulpOnAdult_test_table SET test_status=FALSE WHERE actual_reason_level!=expected_reason_level;
  
  -- setting up records counts
  select count(*) into count_total_records FROM test_cases_2.t_temp_24_denyPulpOnAdult_test_table;
  select count(*) into count_defective_records FROM test_cases_2.t_temp_24_denyPulpOnAdult_test_table where  actual_reason_level != expected_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_24_denyPulpOnAdult_test_table WHERE expected_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_24_denyPulpOnAdult_test_table where actual_reason_level != expected_reason_level;
	if(temp_count=0) then
		set test_status=true;
		set test_detail=concat(count_total_records,' records are tested.No ambiguous record found.');
	else
		SET test_status=False;
		SET test_detail=concat(count_defective_records,' ambiguous records found out of ',count_total_records);
	end if;
  END IF;
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying result and pl_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts3_tc4_resPlDailyCount ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying paid money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts3_tc5_resPlDailyEqualPaidMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts3_tc6_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying recovered money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts3_tc6_resPlDailyEqualRecoveredMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying red counts in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts3_tc7_resPlDailyEqualReds');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts3_tc1A_plTestTable`(@a);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts3_tc1B_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,
	    'Verifying PL daily stats table[emihealth_final.pl_deny_pulp_on_adult_stats_daily] using test table[test_cases_2.t_24_pl_temp_1]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts3_tc1A_plTestTable/t_24_denyPulpOnAdult_ts3_tc1B_plDailyValidation');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts3_tc1A_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts3_tc1A_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts3_tc1A_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_deny_pulp_on_adult_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_daily_denyPulpOnAdult';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows < 50)then
		set required_rows = 50;
	end if;
	
	
	 DROP TABLE IF EXISTS t_24_pl_temp_1;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_24_pl_temp_1` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) default NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) default null, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_24_pl_temp_1; 
	
	
	insert into test_cases_2.t_24_pl_temp_1(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_deny_pulp_on_adult_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_24_pl_temp_1;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts3_tc1B_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts3_tc1B_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts3_tc1B_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT null;
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') default null;
	
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_24_pl_temp_1 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_24_pl_temp_1  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_24_pl_temp_1 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend='';
			SET t_dos= null;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code =null;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_24_pl_temp_1;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_24_pl_temp_1 WHERE t_24_pl_temp_1.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_24_pl_temp_1;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_24_pl_temp_1) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_24_pl_temp_1 WHERE t_24_pl_temp_1.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_deny_pulp_on_adult_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_deny_pulpotomy_on_adult` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_deny_pulp_on_adult_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts3_tc6_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts3_tc6_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts3_tc6_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_deny_pulpotomy_on_adult` WHERE isactive=1;
	SELECT SUM(recovered_money) INTO pld_rec_money FROM emihealth_final.`pl_deny_pulp_on_adult_stats_daily` WHERE isactive=1;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_deny_pulpotomy_on_adult` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_deny_pulp_on_adult_stats_daily` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_deny_pulpotomy_on_adult` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_deny_pulp_on_adult_stats_daily` WHERE isactive=1;
	
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying pl_daily and db_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts4_tc4_checkCountDosPlNDb ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying paid money db_daily  and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts4_tc5_checkTotalCountPlNDb');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying recovered money in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts4_tc6_checkRygCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying red counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts4_tc7_checkRedCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts4_tc8_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying yellow counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts4_tc8_checkYellowCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts4_tc9_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying green counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts4_tc9_checkGreenCountsPlNDbTables ');
	
	
	
	
	
	
	
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts4_tc1A_dashboardTestTable`(@a);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts4_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,
	    'Verifying Dashboard daily stats table[emihealth_final.dashboard_daily_results] using test table[test_cases_2.t_24_dashboard_temp]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts4_tc1A_dashboardTestTablet_24_denyPulpOnAdult_ts4_tc1B_dashboardDailyValidation ');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts4_tc1A_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts4_tc1A_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts4_tc1A_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=24;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_daily_denyPulpOnAdult';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_24_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_24_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_24_dashboard_temp; 
	
	
	insert into test_cases_2.t_24_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		from emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=24) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_24_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts4_tc1B_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts4_tc1B_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts4_tc1B_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT null;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_24_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_deny_pulp_on_adult_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_deny_pulp_on_adult_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_deny_pulp_on_adult_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_deny_pulp_on_adult_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_24_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_24_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos= null;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_24_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_24_dashboard_temp WHERE t_24_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_24_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_24_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_24_dashboard_temp WHERE t_24_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts4_tc4_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts4_tc4_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts4_tc4_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.`pl_deny_pulp_on_adult_stats_daily` WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=24;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_deny_pulp_on_adult_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=24;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_deny_pulp_on_adult_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=24;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_deny_pulp_on_adult_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=24;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts4_tc8_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts4_tc8_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts4_tc8_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_deny_pulp_on_adult_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=24;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts4_tc9_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts4_tc9_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts4_tc9_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_deny_pulp_on_adult_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=24;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying result and pl_monthly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts5_tc2_checkCountResNPlMonthly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying paid money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts5_tc3_checkPaidMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying recovered money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts5_tc4_checkRecoveredMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts5_tc5_checkEqualRedsResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying red counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts5_tc5_checkEqualRedsResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts5_tc6_distinctYearsCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying distinct years counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts5_tc6_distinctYearsCountResNPlMonthly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying table[emihealth_final.pl_deny_pulp_on_adult_stats_monthly] by generating test table[test_cases_2.t_temp_24_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts5_tc7A_testTableGen/t_24_denyPulpOnAdult_ts5_tc7B_columnValidation');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_deny_pulpotomy_on_adult` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO plm_count FROM emihealth_final.`pl_deny_pulp_on_adult_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_deny_pulp_on_adult_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_deny_pulp_on_adult_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts5_tc5_checkEqualRedsResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts5_tc5_checkEqualRedsResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts5_tc5_checkEqualRedsResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.`pl_deny_pulp_on_adult_stats_monthly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts5_tc6_distinctYearsCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts5_tc6_distinctYearsCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts5_tc6_distinctYearsCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.`pl_deny_pulp_on_adult_stats_monthly` WHERE isactive=1;
	
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_deny_pulp_on_adult_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_denyPulpOnAdult';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_24_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_24_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_24_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_24_ts5_tc7(attend, MONTH,YEAR, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,MONTH,YEAR,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		FROM emihealth_final.`pl_deny_pulp_on_adult_stats_monthly` WHERE isactive=1 ORDER BY (CONCAT(MONTH,YEAR)) DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_24_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_24_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.`results_deny_pulpotomy_on_adult` WHERE isactive=1 AND MONTH(results_deny_pulpotomy_on_adult.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.`results_deny_pulpotomy_on_adult` WHERE isactive=1 AND MONTH(results_deny_pulpotomy_on_adult.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1 AND MONTH(results_deny_pulpotomy_on_adult.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1 AND MONTH(results_deny_pulpotomy_on_adult.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1 AND MONTH(results_deny_pulpotomy_on_adult.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1 AND MONTH(results_deny_pulpotomy_on_adult.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1 AND MONTH(results_deny_pulpotomy_on_adult.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) INTO temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_deny_pulpotomy_on_adult` 
			WHERE isactive=1 AND MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_24_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_24_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_24_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_24_ts5_tc7 WHERE t_temp_24_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_24_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_24_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_24_ts5_tc7 WHERE t_temp_24_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_TS6_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_TS6_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_TS6_PL_STATS_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying result and pl_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts6_tc1_checkCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying paid money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts6_tc2_checkPaidMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying recovered money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts6_tc3_checkRecoveredMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying red counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts6_tc4_checkEqualRedsResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying table[emihealth_final.pl_deny_pulp_on_adult_stats_yearly] by generating test table[test_cases_2.t_temp_24_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts6_tc6A_testTableGen/t_24_denyPulpOnAdult_ts6_tc6B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_deny_pulpotomy_on_adult` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_deny_pulp_on_adult_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_deny_pulpotomy_on_adult` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_deny_pulp_on_adult_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_deny_pulpotomy_on_adult`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_deny_pulp_on_adult_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_deny_pulpotomy_on_adult` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_deny_pulp_on_adult_stats_yearly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_complex_perio_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_denyPulpOnAdult';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_24_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_24_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_24_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_24_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_deny_pulp_on_adult_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_24_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_24_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_deny_pulpotomy_on_adult` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_deny_pulpotomy_on_adult` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_deny_pulpotomy_on_adult WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_deny_pulpotomy_on_adult` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_24_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_24_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_24_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_24_ts6_tc6 WHERE t_temp_24_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_24_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_24_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_24_ts6_tc6 where t_temp_24_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying distinct year counts in pl_monthly and db_monthly',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts7_tc2_countDistinctYearsPlMNDbM');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying total_count db_monthly  and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts7_tc3_checkTotalCountPlMNdbm ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying providers count in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts7_tc4_checkCountNoOfProvPlMNdbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts7_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying yellow counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts7_tc6_checkYellowCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts7_tc7_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying green counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts7_tc7_checkGreenCountsPlMNDbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying paid_money  in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_24_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts7_tc9A_testTableGen/ t_24_denyPulpOnAdult_ts7_tc9B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_deny_pulp_on_adult_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=24;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
		set success = true;
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
		SET success = TRUE;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_deny_pulp_on_adult_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=24;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_deny_pulp_on_adult_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=24;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
	set success = true;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_deny_pulp_on_adult_stats_monthly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=24;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts7_tc7_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts7_tc7_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts7_tc7_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_deny_pulp_on_adult_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=24;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_deny_pulp_on_adult_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=24;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_monthly_results WHERE isactive=1 and type=24;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_denyPulpOnAdult';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_24_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_24_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_24_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_24_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=24) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	select count(*)into temp_count FROM test_cases_2.t_temp_24_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_24_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_deny_pulp_on_adult_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.`pl_deny_pulp_on_adult_stats_monthly` WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_deny_pulp_on_adult_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_deny_pulp_on_adult_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_24_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_24_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_yellow=temp_actual_total_yellow=0; 
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_24_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_24_ts7_tc9 WHERE t_temp_24_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_24_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_24_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_24_ts7_tc9 WHERE t_temp_24_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts8_tc2_countDistinctYearsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts8_tc4_checkCountNoOfProvPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts8_tc5_checkTotalRedCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts8_tc6_checkTotalYellowCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying yellow counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts8_tc6_checkTotalYellowCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_ts8_tc7_checkGreenCountsPlYNDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying paid money money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_24_denyPulpOnAdult_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_TS8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_24_denyPulpOnAdult_TS8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_24_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_24_denyPulpOnAdult_TS8_tc9A_testTableGen/t_24_denyPulpOnAdult_TS8_tc9B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.`pl_deny_pulp_on_adult_stats_yearly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=24;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.`pl_deny_pulp_on_adult_stats_yearly` WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=24;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.`pl_deny_pulp_on_adult_stats_yearly` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=24;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_deny_pulp_on_adult_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=24;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_deny_pulp_on_adult_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=24;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_deny_pulp_on_adult_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=24;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_deny_pulp_on_adult_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=24;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_TS8_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_TS8_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_TS8_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=24;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_denyPulpOnAdult';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_24_ts8_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_24_ts8_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_24_ts8_tc9; 
	
	
	insert into test_cases_2.t_temp_24_ts8_tc9(year,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=24) ORDER BY(year)desc LIMIT required_rows;
	
	select count(*)into temp_count FROM test_cases_2.t_temp_24_ts8_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_denyPulpOnAdult_TS8_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_denyPulpOnAdult_TS8_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_denyPulpOnAdult_TS8_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_24_ts8_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_deny_pulp_on_adult_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_deny_pulp_on_adult_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_deny_pulp_on_adult_stats_yearly WHERE YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_deny_pulp_on_adult_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_24_ts8_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_24_ts8_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_24_ts8_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_24_ts8_tc9 WHERE t_temp_24_ts8_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_24_ts8_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_24_ts8_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_24_ts8_tc9 WHERE t_temp_24_ts8_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_24_________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_24_________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_24_________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_MAIN`()
BEGIN
	call `t_25_denyOtherXray_TS1_SOURCE_TABLE`();
	call `t_25_denyOtherXray_TS2_RESULT_TABLE`();
	call `t_25_denyOtherXray_TS3_PL_DAILY_STATS_TABLE`();
	call `t_25_denyOtherXray_TS4_DASHBOARD_DAILY_TABLE`();
	call `t_25_denyOtherXray_TS5_PL_MONTHLY_STATS_TABLE`();
	CALL `t_25_denyOtherXray_TS6_PL_STATS_YEARLY_TABLE`();
	CALL `t_25_denyOtherXray_TS7_DASHBOARD_MONTHLY_TABLE`();
	CALL `t_25_denyOtherXray_TS8_DASHBOARD_YEARLY_TABLE`();
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS1_SOURCE_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts1_tc1_baseSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,
	    'Verifying total counts from base table to source table'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts1_tc1_baseSrcCount ');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts1_tc1_baseSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts1_tc1_baseSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts1_tc1_baseSrcCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	SELECT COUNT(*) INTO src_count FROM emihealth_final.src_deny_otherxrays_if_fmx_done;
	SELECT COUNT(*) INTO base_count FROM emihealth_final.procedure_performed WHERE (proc_code IN ('D0210','D0220','D0230','D0240','D0290','D0330') 
                                                                        OR proc_code LIKE 'D07%')
                                                                          AND is_invalid=0 AND LENGTH(proc_code)=5;
	
	IF(src_count=base_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in base and source table ';
	ELSE
		SET test_status=FALSE;
		IF(src_count>base_count)THEN
			SET test_detail=CONCAT(src_count-base_count,' more counts  found in source table then base table .');
		ELSE
			SET test_detail=CONCAT(base_count-src_count,' more counts found in base table then source table .');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts2_tc1_resSrcCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25
		,'Verifying total counts in source and result table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
		,'t_25_denyOtherXray_ts2_tc1_resSrcCount');
	      
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts2_tc2A_testTableGen`(@a);
	CALL test_cases_2.`t_25_denyOtherXray_ts2_tc2B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,
	    'Verifying result table[emihealth_final.results_deny_otherxrays_if_fmx_done] using test table[test_cases_2.t_temp_25_denyOtherXray_test_table]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_25_denyOtherXray_ts2_tc2A_testTableGen/t_25_denyOtherXray_ts2_tc2B_resReasonsValidation');
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts2_tc1_resSrcCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts2_tc1_resSrcCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts2_tc1_resSrcCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE src_count INT;
	DECLARE res_count INT;
	SELECT COUNT(*) INTO src_count FROM emihealth_final.src_deny_otherxrays_if_fmx_done
	WHERE (proc_code IN ('D0220','D0230','D0240','D0290','D0330') 
          OR proc_code LIKE 'D07%')
            AND LENGTH(proc_code)=5;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE isactive = '1';
	
	IF(src_count=res_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in res and source table ';
	ELSE
		SET test_status=FALSE;
		IF(src_count>res_count)THEN
			SET test_detail=CONCAT(src_count-res_count,' more counts  found in source table then res table .');
		ELSE
			SET test_detail=CONCAT(res_count-src_count,' more counts found in res table then source table .');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts2_tc2A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts2_tc2A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts2_tc2A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE reason_percent DECIMAL(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        DECLARE selected_reason INT;
        DECLARE iterator INT;
       
        DROP TABLE IF EXISTS t_temp_25_denyOtherXray_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_25_denyOtherXray_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(10) ZEROFILL NOT NULL,
	  `attend` VARCHAR(20) DEFAULT NULL,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` DATETIME DEFAULT NULL,
	  `proc_code`VARCHAR(50) DEFAULT NULL,
	  `tooth_no` VARCHAR(15) DEFAULT NULL,
	  `actual_reason_level` INT(2) DEFAULT NULL,
	  `expected_reason_level` INT(2) DEFAULT NULL,
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_25_denyOtherXray_test_table;
        
        SET iterator = 1;
        WHILE(iterator < 3) DO
		SET selected_reason= iterator;
		SELECT reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=25 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE reason_level=selected_reason;
		
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		
		insert into test_cases_2.t_temp_25_denyOtherXray_test_table(res_id,attend,MID,date_of_service,proc_code,tooth_no,actual_reason_level)
		SELECT id,attend,MID,date_of_service,proc_code,'',reason_level
		FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE reason_level=selected_reason AND isactive=1 ORDER BY RAND() LIMIT reason_sample_count;
		
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_25_denyOtherXray_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts2_tc2B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts2_tc2B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts2_tc2B_resReasonsValidation`(OUT success INT ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0 ;
  -- variable with t_ are used for storting data from test table
  DECLARE t_id BIGINT(20);
  DECLARE t_attend, t_mid VARCHAR (50) DEFAULT "" ;
  DECLARE t_dos DATETIME DEFAULT null;
  DECLARE t_proc_code VARCHAR(15); 
  
  
  DECLARE has_D0210, has_same_date INT DEFAULT 0;  
  
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  
  DECLARE my_cursor CURSOR FOR 
		    SELECT id, MID,date_of_service,proc_code FROM test_cases_2.t_temp_25_denyOtherXray_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  OPEN my_cursor ;
  get_test_row :LOOP
		    FETCH my_cursor INTO  t_id, t_mid,t_dos,t_proc_code;
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    
			SELECT	COUNT(*) INTO has_same_date 
			FROM 	emihealth_final.`src_deny_otherxrays_if_fmx_done` 
			WHERE 	MID=t_mid AND proc_code = 'D0210' 
				AND ((date_of_service = t_dos) OR (date_of_service BETWEEN DATE_SUB(t_dos,INTERVAL 90 day)  AND t_dos ));
		      
		  IF (has_same_date != 0) THEN 
			UPDATE test_cases_2.t_temp_25_denyOtherXray_test_table 
			SET expected_reason_level=1, 
			test_detail='red.'
			WHERE id=t_id;  
		  ELSE 	  
			UPDATE test_cases_2.t_temp_25_denyOtherXray_test_table 
			SET expected_reason_level=2, 
			test_detail='green.'
			WHERE id=t_id;
	            END IF ; 
	            
	        END LOOP ;
  CLOSE my_cursor ;
  
	update test_cases_2.t_temp_25_denyOtherXray_test_table
	set test_status = 0
	where	actual_reason_level != expected_reason_level;
  
	UPDATE test_cases_2.t_temp_25_denyOtherXray_test_table
	SET test_status = 1
	WHERE	actual_reason_level = expected_reason_level;
  
  
  		
   -- setting up records counts
  SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_25_denyOtherXray_test_table;
  SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_25_denyOtherXray_test_table WHERE  actual_reason_level != expected_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_25_denyOtherXray_test_table WHERE expected_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_25_denyOtherXray_test_table WHERE actual_reason_level != expected_reason_level;
	IF(temp_count=0) THEN
		SET test_status=TRUE;
		SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
	ELSE
		SET test_status=FALSE;
		SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
	END IF;
  END IF;
  END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	      
	      
	  
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying result and pl_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_25_denyOtherXray_ts3_tc4_resPlDailyCount');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying paid money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts3_tc5_resPlDailyEqualPaidMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts3_tc6_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying recovered money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts3_tc6_resPlDailyEqualRecoveredMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying red counts in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts3_tc7_resPlDailyEqualReds ');
 
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts3_tc1A_plTestTable`(@a);
	CALL test_cases_2.`t_25_denyOtherXray_ts3_tc1B_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,
	    'Verifying PL daily table[emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily] using test table[test_cases_2.t_25_pl_temp]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts3_tc1A_plTestTable/t_25_denyOtherXray_ts3_tc1B_plDailyValidation ');
	     
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts3_tc1A_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts3_tc1A_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts3_tc1A_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_daily_denyOtherXray';
	
	SET required_rows = weightage*total_counts/100;
	
	SET res=required_rows;
	
	
	 DROP TABLE IF EXISTS t_25_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_25_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2)  default NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2)  default NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_25_pl_temp; 
	
	
	insert into test_cases_2.t_25_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_25_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts3_tc1B_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts3_tc1B_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts3_tc1B_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT null;
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_25_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_25_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_25_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend='';
			SET t_dos= NULL;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code =NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_25_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_25_pl_temp WHERE t_25_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_25_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_25_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_25_pl_temp WHERE t_25_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts3_tc6_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts3_tc6_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts3_tc6_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE isactive=1;
	SELECT SUM(recovered_money) INTO pld_rec_money FROM emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_daily` WHERE isactive=1;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_daily` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_daily` WHERE isactive=1;
        
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	      
	      
	      
	      
	 SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying pl_daily and db_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_25_denyOtherXray_ts4_tc4_checkCountDosPlNDb');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying paid money db_daily  and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts4_tc5_checkTotalCountPlNDb ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying recovered money in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts4_tc6_checkRygCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying red counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts4_tc7_checkRedCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts4_tc8_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying yellow counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_25_denyOtherXray_ts4_tc8_checkYellowCountsPlNDbTables');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts4_tc9_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying green counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts4_tc9_checkGreenCountsPlNDbTables ');
	     
	      
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts4_tc1A_dashboardTestTable`(@a);
	CALL test_cases_2.`t_25_denyOtherXray_ts4_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,
	    'Verifying Dashboard table[emihealth_final.dashboard_daily_results] using test table[test_cases_2.t_25_dashboard_temp]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts4_tc1A_dashboardTestTable/t_25_denyOtherXray_ts4_tc1B_dashboardDailyValidation ');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts4_tc1A_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts4_tc1A_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts4_tc1A_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=25;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_daily_denyFullEndo';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_25_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_25_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_25_dashboard_temp; 
	
	
	insert into test_cases_2.t_25_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		from emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=25) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_25_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts4_tc1B_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts4_tc1B_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts4_tc1B_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT null;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_25_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_25_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_25_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos=Null;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_25_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_25_dashboard_temp WHERE t_25_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_25_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_25_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_25_dashboard_temp WHERE t_25_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts4_tc4_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts4_tc4_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts4_tc4_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_daily` WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=25;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=25;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=25;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=25;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts4_tc8_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts4_tc8_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts4_tc8_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=25;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts4_tc9_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts4_tc9_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts4_tc9_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=25;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying result and pl_monthly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_25_denyOtherXray_ts5_tc2_checkCountResNPlMonthly');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying paid money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts5_tc3_checkPaidMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying recovered money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts5_tc4_checkRecoveredMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts5_tc5_checkEqualRedsResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying red counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts5_tc5_checkEqualRedsResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts5_tc6_distinctYearsCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying distinct years counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts5_tc6_distinctYearsCountResNPlMonthly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_25_denyOtherXray_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying table[emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly] by generating test table[test_cases_2.t_temp_25_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_25_denyOtherXray_ts5_tc7A_testTableGen/t_25_denyOtherXray_ts5_tc7B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO plm_count FROM emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts5_tc5_checkEqualRedsResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts5_tc5_checkEqualRedsResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts5_tc5_checkEqualRedsResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_monthly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts5_tc6_distinctYearsCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts5_tc6_distinctYearsCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts5_tc6_distinctYearsCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_monthly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_denyOtherXray';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_25_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_25_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_25_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_25_ts5_tc7
		(
		attend
		,MONTH
		,YEAR
		,actual_procedure_count
		,actual_patient_count
		,actual_income
		,actual_recovered_money
		,actual_color_code
		,actual_number_of_violations
		,actual_no_of_days_wd_violations
		)
	SELECT 
		attend
		,MONTH
		,YEAR
		,procedure_count
		,patient_count
		,income
		,recovered_money
		,color_code
		,number_of_violations
		,number_of_days_wd_violations
		
	FROM 	emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_monthly` 
	WHERE 	isactive=1 
	ORDER BY (CONCAT(MONTH,YEAR)) DESC 
	LIMIT 	required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_25_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_25_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT 	COUNT(*) 
			INTO 	temp_expec_procedure_count 
			FROM 	emihealth_final.`results_deny_otherxrays_if_fmx_done` 
			WHERE 	isactive=1 
				AND MONTH(results_deny_otherxrays_if_fmx_done.date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend
				;
			
			SELECT 	COUNT(DISTINCT(MID)) 
			INTO 	temp_expec_patient_count 
			FROM 	emihealth_final.`results_deny_otherxrays_if_fmx_done` 
			WHERE 	isactive=1 
				AND MONTH(results_deny_otherxrays_if_fmx_done.date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend
				;
			
			SELECT 	ROUND(SUM(paid_money),2) 
			INTO 	temp_expec_income 
			FROM 	emihealth_final.results_deny_otherxrays_if_fmx_done 
			WHERE 	isactive=1 
				AND MONTH(results_deny_otherxrays_if_fmx_done.date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend
				;
						
			
			SELECT 	ROUND(SUM(recovered_money),2) 
			INTO 	temp_expec_recovered_money 
			FROM 	emihealth_final.results_deny_otherxrays_if_fmx_done 
			WHERE 	isactive=1 
				AND MONTH(results_deny_otherxrays_if_fmx_done.date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND ryg_status='red'
				;
			
			
			SELECT 	COUNT(*) 
			INTO 	temp_r_check 
			FROM 	emihealth_final.results_deny_otherxrays_if_fmx_done 
			WHERE 	isactive=1 
				AND MONTH(results_deny_otherxrays_if_fmx_done.date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year AND attend=t_attend 
				AND ryg_status='red'
				;
				
				
			SELECT 	COUNT(*) 
			INTO 	temp_y_check 
			FROM 	emihealth_final.results_deny_otherxrays_if_fmx_done
			WHERE 	isactive=1 
				AND MONTH(results_deny_otherxrays_if_fmx_done.date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND ryg_status='yellow'
				;
				
				
			SELECT 	COUNT(*) 
			INTO 	temp_g_check 
			FROM 	emihealth_final.results_deny_otherxrays_if_fmx_done 
			WHERE 	isactive=1 
				AND MONTH(results_deny_otherxrays_if_fmx_done.date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND ryg_status='green'
				;
			
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT 	COUNT(DISTINCT(date_of_service)) 
			INTO 	temp_expec_no_days_wd_violations 
			FROM 	emihealth_final.`results_deny_otherxrays_if_fmx_done` 
			WHERE 	isactive=1 
				AND MONTH(date_of_service)=t_month 
				AND YEAR(date_of_service)=t_year 
				AND attend=t_attend 
				AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_25_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_25_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_25_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_25_ts5_tc7 WHERE t_temp_25_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_25_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_25_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_25_ts5_tc7 WHERE t_temp_25_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS6_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS6_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS6_PL_STATS_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying result and pl_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts6_tc1_checkCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying paid money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts6_tc2_checkPaidMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying recovered money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts6_tc3_checkRecoveredMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying red counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_25_denyOtherXray_ts6_tc4_checkEqualRedsResNPlYearly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts6_tc5_distinctYearsCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying distinct years counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts6_tc5_distinctYearsCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_25_denyOtherXray_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying table[emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_yearly] by generating test table[test_cases_2.t_temp_25_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts6_tc6A_testTableGen/t_25_denyOtherXray_ts6_tc6B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_yearly WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_deny_otherxrays_if_fmx_done`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_yearly` WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts6_tc5_distinctYearsCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts6_tc5_distinctYearsCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts6_tc5_distinctYearsCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.`results_deny_otherxrays_if_fmx_done` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_yearly` WHERE isactive=1;
	
	
	
        
	
	
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_denyOtherXray';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_25_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_25_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_25_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_25_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_25_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_25_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count 
			FROM emihealth_final.`results_deny_otherxrays_if_fmx_done`
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count 
			FROM emihealth_final.`results_deny_otherxrays_if_fmx_done` 
			where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income 
			FROM emihealth_final.results_deny_otherxrays_if_fmx_done 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money 
			FROM emihealth_final.results_deny_otherxrays_if_fmx_done 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_deny_otherxrays_if_fmx_done WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_deny_otherxrays_if_fmx_done` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_25_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_25_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_25_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_25_ts6_tc6 WHERE t_temp_25_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_25_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_25_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_25_ts6_tc6 where t_temp_25_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying distinct year counts in pl_monthly and db_monthly',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts7_tc2_countDistinctYearsPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying total_count db_monthly  and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts7_tc3_checkTotalCountPlMNdbm ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying providers count in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_25_denyOtherXray_ts7_tc4_checkCountNoOfProvPlMNdbM');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts7_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying yellow counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_25_denyOtherXray_ts7_tc6_checkYellowCountsPlNDbTables');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts7_tc7_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying green counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts7_tc7_checkGreenCountsPlMNDbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying paid_money  in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_TS7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_25_denyOtherXray_TS7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_25_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_TS7_tc9A_testTableGen/t_25_denyOtherXray_TS7_tc9B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=25;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
		set success = true;
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
		SET success = TRUE;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=25;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=25;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
	set success = true;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=25;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts7_tc7_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts7_tc7_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts7_tc7_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=25;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=25;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_monthly_results WHERE isactive=1 and type=25;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_denyOtherXray';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_25_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_25_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_25_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_25_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=25) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	select count(*)into temp_count FROM test_cases_2.t_temp_25_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_25_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_25_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_25_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_yellow=temp_actual_total_yellow=0; 
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_25_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_25_ts7_tc9 WHERE t_temp_25_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_25_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_25_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_25_ts7_tc9 WHERE t_temp_25_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts8_tc2_countDistinctYearsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts8_tc4_checkCountNoOfProvPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_25_denyOtherXray_ts8_tc5_checkTotalRedCountsPlYNDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts8_tc6_checkTotalYellowCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying yellow counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts8_tc6_checkTotalYellowCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_ts8_tc7_checkGreenCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying paid money money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_25_denyOtherXray_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_TS8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_25_denyOtherXray_TS8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_25_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_25_denyOtherXray_TS8_tc9A_testTableGen/t_25_denyOtherXray_TS8_tc9B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_yearly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=25;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_yearly` WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=25;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.`pl_deny_otherxrays_if_fmx_done_stats_yearly` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=25;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=25;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=25;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=25;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=25;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS8_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS8_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS8_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=13;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_denyOtherXray';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_25_ts8_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_25_ts8_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_25_ts8_tc9; 
	
	
	insert into test_cases_2.t_temp_25_ts8_tc9(year,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=25) ORDER BY(year)desc LIMIT required_rows;
	
	select count(*)into temp_count FROM test_cases_2.t_temp_25_ts8_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_denyOtherXray_TS8_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_denyOtherXray_TS8_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_denyOtherXray_TS8_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_25_ts8_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_yearly WHERE YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_25_ts8_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_25_ts8_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_25_ts8_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_25_ts8_tc9 WHERE t_temp_25_ts8_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_25_ts8_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_25_ts8_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_25_ts8_tc9 WHERE t_temp_25_ts8_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_25_________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_25_________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_25_________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_MAIN`()
BEGIN
	call `t_26_denyPulpOnAdultEndo_TS1_SOURCE_TABLE`();
	call `t_26_denyPulpOnAdultEndo_TS2_RESULT_TABLE`();
	call `t_26_denyPulpOnAdultEndo_TS3_PL_DAILY_STATS_TABLE`();
	call `t_26_denyPulpOnAdultEndo_TS4_DAILY_DASHBOARD_TABLE`();
	CALL `t_26_denyPulpOnAdultEndo_TS5_PL_MONTHLY_STATS_TABLE`();
	CALL `t_26_denyPulpOnAdultEndo_TS6_PL_YEARLY_STATS_TABLE`();
	call`t_26_denyPulpOnAdultEndo_TS7_DASHBOARD_MONTHLY_TABLE`();
	call `t_26_denyPulpOnAdultEndo_TS8_DASHBOARD_YEARLY_TABLE`();	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_TS1_SOURCE_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_TS1_SOURCE_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_TS1_SOURCE_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts1_tc1_baseSrcCntEqual`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26
		,'Verifying total counts in base and source table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts1_tc1_baseSrcCntEqual ');
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts1_tc2_impColValueSrcNotNull`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26
		,'Verifying Important column values are not null in source table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts1_tc2_impColValueSrcNotNull ');
		
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts1_tc3_srcHasUniqeAttendID`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26
		,'Verifying important column values are not NULL in sourec table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts1_tc3_srcHasUniqeAttendID ');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts1_tc1_baseSrcCntEqual` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts1_tc1_baseSrcCntEqual` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts1_tc1_baseSrcCntEqual`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE base_count INT;
	
	SELECT 	count(*) 
	into 	src_count
	FROM 	emihealth_final.src_deny_pulpotomy_algo_on_adult 
		;
	
	SELECT 	COUNT(*)
	INTO base_count
	FROM 	emihealth_final.procedure_performed 
	WHERE   proc_code IN('D3310', 'D3320','D3330','D3331','D0140','D3220') 
	AND is_invalid=0
	AND tooth_no != ''
		;
		
	
	if(src_count=base_count) then
		set test_status=true;
		set test_detail='Equal counts found in base and source table.';
	else
		set test_status=False;
		if(src_count>base_count)then
			set test_detail=concat(src_count-base_count,' more counts  found in source table then base table.');
		else
			set test_detail=concat(base_count-src_count,' more counts found in base table then source table.');
		end if;
	end if;
	set success=true;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts1_tc2_impColValueSrcNotNull` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts1_tc2_impColValueSrcNotNull` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts1_tc2_impColValueSrcNotNull`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a,count_b INT default 0;
	DECLARE total_count INT default 0;
	
	SELECT COUNT(*) INTO count_a 
	FROM emihealth_final.src_deny_pulpotomy_algo_on_adult  
	WHERE mid='' or attend='' or date_of_service='';
	
	SELECT COUNT(*) INTO count_b
	FROM emihealth_final.src_deny_pulpotomy_algo_on_adult  
	WHERE MID is null  OR attend is null  OR date_of_service is null;
	
	
	set total_count = count_a + count_b;
	
	IF(total_count=0) THEN
		SET test_status=TRUE;
		SET test_detail='No record found in source table having null value in important attributes.';
	ELSE
		SET test_status=FALSE;
	        SET test_detail=CONCAT(total_count,' records found in source table having null value in important attributes.');	
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts1_tc3_srcHasUniqeAttendID` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts1_tc3_srcHasUniqeAttendID` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts1_tc3_srcHasUniqeAttendID`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a INT;
	DECLARE count_b INT;
	SELECT COUNT(DISTINCT(attend)) into count_a FROM emihealth_final.src_deny_pulpotomy_algo_on_adult;
        SELECT COUNT(DISTINCT(CONCAT(attend,attend_name))) into count_b FROM emihealth_final.src_deny_pulpotomy_algo_on_adult;
	
	IF(count_a=count_b) THEN
		SET test_status=TRUE;
		SET test_detail='Attend ID is unique in source table.';
	ELSE
		SET test_status=FALSE;
		SET test_detail='Attend Id is not unique in source table.';	
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts2_tc1_srcResCntEqual`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26
		,'Verifying total counts in source and result table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts2_tc1_srcResCntEqual ');
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts2_tc2_impColValueResNotNull`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26
		,'Verifying Important column values are not null in result table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts2_tc2_impColValueResNotNull ');
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts2_tc3_resHasRequiredProcCodesOnly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26
		,'Verifying result table has only required proc_codes'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts2_tc3_resHasRequiredProcCodesOnly ');
		
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts2_tc4_rsnLvlRYGStatusStatusSame`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26
		,'Verifying color code is according to reason level in result table'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts2_tc4_rsnLvlRYGStatusStatusSame ');
	      
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts2_tc5A_testTableGen`(@a);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts2_tc5B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,
	    'Verifying result table[emihealth_final.results_deny_pulp_on_adult_full_endo] using test table[test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts2_tc5A_testTableGen / t_26_denyPulpOnAdultEndo_ts2_tc5B_resReasonsValidation');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts2_tc1_srcResCntEqual` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts2_tc1_srcResCntEqual` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts2_tc1_srcResCntEqual`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE src_count INT;
	DECLARE res_count INT;
	SELECT COUNT(*)into src_count FROM emihealth_final.src_deny_pulpotomy_algo_on_adult where proc_code in('D3310', 'D3320','D3330','D3331');
	
	SELECT COUNT(*) into res_count FROM emihealth_final.results_deny_pulp_on_adult_full_endo where isactive=1;
	-- set src_count=4; -- for testing
	if(src_count=res_count) then
		set test_status=true;
		set test_detail='Equal counts found in result and source table.';
	else
		set test_status=False;
		if(src_count>res_count)then
			set test_detail=concat(src_count-res_count,' more counts  found in source table then result table.');
		else
			set test_detail=concat(res_count-src_count,' more counts found in result table then source table.');
		end if;
	end if;
	set success=true;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts2_tc2_impColValueResNotNull` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts2_tc2_impColValueResNotNull` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts2_tc2_impColValueResNotNull`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE count_a,count_b INT default 0;
	DECLARE total_count INT;
	SELECT COUNT(*) INTO count_a FROM emihealth_final.results_deny_pulp_on_adult_full_endo AS res WHERE (res.`attend`='' or res.`mid`='' or res.`date_of_service`='') and isactive=1;
	SELECT COUNT(*) INTO count_b FROM emihealth_final.results_deny_pulp_on_adult_full_endo AS res WHERE (res.`reason_level`='' or res.`ryg_status`='' OR res.`proc_code`='') and isactive=1;
	-- set count_a=4; -- for testing
	set total_count = count_a + count_b;
	
	IF(total_count=0) THEN
		SET test_status=TRUE;
		SET test_detail='No record found in result table having null value in important attributes.';
	ELSE
		SET test_status=FALSE;
	        SET test_detail=CONCAT(total_count,' records found in result table having null value in important attributes.');	
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts2_tc3_resHasRequiredProcCodesOnly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts2_tc3_resHasRequiredProcCodesOnly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts2_tc3_resHasRequiredProcCodesOnly`(out success bool,out test_status bool,OUT test_detail TinyText)
BEGIN
	DECLARE res_count INT;
	SELECT COUNT(*)into res_count FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE proc_code NOT IN('D3310', 'D3320','D3330','D3331');
	IF (res_count=0) THEN
		SET test_status = TRUE;
		SET test_detail='No record found with procedure code other than (D3310,D3320,D3330,D3331) in result table.';
	ELSE
		SET test_status = FALSE;
		SET test_detail=CONCAT(res_count,' records found without procedure code (D3310,D3320,D3330,D3331) in result table.');
	END IF;
	SET success=TRUE;
end */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts2_tc4_rsnLvlRYGStatusStatusSame` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts2_tc4_rsnLvlRYGStatusStatusSame` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts2_tc4_rsnLvlRYGStatusStatusSame`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
        DECLARE count_1,count_2,count_3,count_4,count_5 INT;
	DECLARE reason_cnt VARCHAR(10) DEFAULT '';
	Declare pass_flag bool default True;
	
	SELECT count(*) into count_1 FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE reason_level = 4 AND (ryg_status != 'red' OR STATUS != 'Disallow Code D3310,D3320,D3330,D3331') AND isactive=1;
        SELECT count(*) INTO count_2 FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE reason_level = 5 AND (ryg_status != 'red' OR STATUS !='Allow Code D3310,D3320,D3330,D3331') AND isactive=1;
	SELECT count(*) INTO count_3 FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE reason_level = 6 AND (ryg_status != 'green' OR STATUS != 'Allow Code D3310,D3320,D3330,D3331') AND isactive=1;
	
	
	-- set count_1=1;
	-- set count_2=1;
	-- set count_3=1;
	
	IF(count_1 !=0 ) THEN
		SET reason_cnt='[4]';
		set pass_flag=false;
	END IF;
	IF(count_2 !=0 ) THEN
		SET reason_cnt=CONCAT(reason_cnt,'[5]');
		SET pass_flag=FALSE;
	END IF;
	IF(count_3 !=0 ) THEN
		SET reason_cnt=CONCAT(reason_cnt,'[6]');
		SET pass_flag=FALSE;
	END IF;
	
	-- Setting Output Parameters
	if(pass_flag=True) then
		set test_status=true;
		set test_detail='Colunms(reason_level, ryg_status, status) are representing same output.';
	else
		SET test_status=False;
		SET test_detail=concat('In reasons(',reason_cnt,'), Colunms(reason_level, ryg_status, status) do not represent same output.');
	end if;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts2_tc5A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts2_tc5A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts2_tc5A_testTableGen`(out success Bool)
BEGIN
	declare reason_percent decimal(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        drop table if exists t_temp_26_denyPulpOnAdultEndo_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_26_denyPulpOnAdultEndo_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(10) ZEROFILL NOT NULL,
	  `proc_code` VARCHAR(50) DEFAULT NULL,
	  `attend` varchar(20) Default Null,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` datetime default Null,
	  
	  `tooth_no` VARCHAR(15) DEFAULT NULL,
	  
	  `actual_reason_level` int(2) default Null,
	  `expected_reason_level` INT(2) DEFAULT NULL,
	  
	  `actual_ryg_status` VARCHAR(30) DEFAULT NULL,
	  `expected_ryg_status` VARCHAR(30) DEFAULT NULL,
	  `actual_status` VARCHAR(250) DEFAULT NULL,
	  `expected_status` VARCHAR(250) DEFAULT NULL,
	  
	  `test_status` bool Default Null,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_26_denyPulpOnAdultEndo_test_table;
        
        set iterator = 4;
        while(iterator < 7) Do
		SET selected_reason= iterator;
		select reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  where algo_id=26 and reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) into reason_total_count FROM  emihealth_final.`results_deny_pulp_on_adult_full_endo` where reason_level=selected_reason;
		
		IF(reason_total_count < 100) then
			set reason_sample_count=reason_total_count;
		else
			set reason_sample_count=(reason_total_count*reason_percent)/100;
		end if;
		
		insert into test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table 
			(res_id,proc_code,attend,mid,date_of_service,tooth_no,actual_reason_level,actual_ryg_status,actual_status) 
		select  id,proc_code,attend,mid,date_of_service,tooth_no,reason_level,ryg_status,status
		FROM emihealth_final.results_deny_pulp_on_adult_full_endo 
		where reason_level=selected_reason and isactive=1 ORDER BY RAND() limit reason_sample_count;
		
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_26_denyPulpOnAdultEndo_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts2_tc5B_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts2_tc5B_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts2_tc5B_resReasonsValidation`(OUT success int ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  DECLARE finished INTEGER DEFAULT 0;
  -- -------------------------------------------------------------------------------
  -- Variables below are used for storting data from test Table
  -- -------------------------------------------------------------------------------
  DECLARE t_id BIGINT(20) default 0;
  declare t_attend varchar(20) default '';
  DECLARE t_mid VARCHAR(50) default '';
  DECLARE t_dos DateTime default '';
  DECLARE t_proc_code VARCHAR(50) default '';
  declare t_tooth_no varchar(15) default '';
  
  -- -------------------------------------------------------------------------------
  -- Variables below are used in if else blocks
   -- ------------------------------------------------------------------------------
   declare toothNum_has_letter, has_D3220_within6months_of_curCode int default 0;
   declare dos_D3220 DateTime default '';
   
  -- -------------------------------------------------------------------------------
  -- Variables below are used after loop to hold stats of tested records
  -- -------------------------------------------------------------------------------
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  -- -------------------------------------------------------------------------------
  -- Variables below are used for maintaing cursor
  -- -------------------------------------------------------------------------------
  DECLARE test_row_cursor CURSOR FOR 
		    SELECT id,proc_code ,attend,mid,date_of_service,tooth_no FROM test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table ;		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
  -- PROCESSING STARTS --
  OPEN test_row_cursor ;
  get_test_row :LOOP
		    -- Setting variables to null value
		    set t_id =0;   set t_attend='';   set t_mid='';   set t_dos='';   set t_proc_code='';   set t_tooth_no='';
		    
		    
		    FETCH test_row_cursor INTO  t_id,t_proc_code, t_attend, t_mid,t_dos,t_tooth_no;
		    IF(finished = 1) THEN 
			LEAVE get_test_row ;
		    END IF ;
		    -- Checking If Data In Record Is Valid Or Not
		    -- ----------------------------------------------------IF "A" Starts-----------------------------------------------------------------
		    if(t_attend='' or t_attend is null or t_mid='' or t_mid is null or t_dos='' or t_dos is null or t_proc_code='' or t_proc_code is null 
		        or t_tooth_no='' or t_tooth_no is null)then
		        UPDATE test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table 
		        set expected_reason_level=-1,
		            expected_ryg_status='N/A',
		            expected_status='N/A',
		            test_detail='Record under test contains invalid data.'
		        where id=t_id;
		    else
			-- Checking Procedure Codes are in D3310, D3320, D3330, D3331
			-- ------------------------------------------------IF "B" Starts--------------------------------------------------------
			if(t_proc_code not in('D3310','D3320','D3330', 'D3331')) then
				UPDATE test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table 
				SET expected_reason_level=-1,
				    expected_ryg_status='N/A',
				    expected_status='N/A',
				    test_detail=concat('In valid code. ',t_proc_code,' is not in D3310, D3320, D3330, D3331.')
				WHERE id=t_id;
			else
				-- Checking Tooth Number Contains Letter
				-- ------------------------------------IF "C" Starts--------------------------------------------------
				IF (t_tooth_no IN('A','B','C','D','E','F','G','H','I','J','K','L','M','N','O','P','Q','R','S','T','U'))THEN
					-- REASON 4
					UPDATE test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table 
					SET expected_reason_level=4,
					    expected_ryg_status='',
					    expected_status='Disallow Code D3310,D3320,D3330,D3331',
					    test_detail='red'
					WHERE id=t_id;
				else
					select Max(date_of_service) into  dos_D3220
					FROM emihealth_final.src_deny_pulpotomy_algo_on_adult
					where mid=t_mid and
					      attend=t_attend and
					      proc_code='D3220' and
					      tooth_no=t_tooth_no and
					      (date_of_service is not null or date_of_service !='');
					-- Is there a Pulpotomy DOS within 6 months (<=) of the Full Root canal DOS for this patient, this doctor, this tooth
					-- ------------------------------------IF D Starts ---------------------------------------
					if((dos_D3220 is not null or dos_D3220 !='') and (dos_D3220 between subdate(t_dos,interval 6 month) and t_dos)) then
						UPDATE test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table 
						SET expected_reason_level=5,
						expected_ryg_status='yellow',
						expected_status='Allow Code D3310,D3320,D3330,D3331',
						test_detail='red'
						WHERE id=t_id;
					else
						UPDATE test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table 
						SET expected_reason_level=6,
						expected_ryg_status='green',
						expected_status='Allow Code D3310,D3320,D3330,D3331',
						test_detail='red'
						WHERE id=t_id;
					end if;
					-- ------------------------------------IF D Ends ----------------------------------------   
				end if;
				-- ------------------------------------IF "C" Ends----------------------------------------------------
			end if;
			-- ------------------------------------------------IF "B" Ends----------------------------------------------------------
		    end if;
		    -- -----------------------------------------------------IF "A" Ends ------------------------------------------------------------------
	        END LOOP ;
  CLOSE test_row_cursor ;
  -- PROCESSING ENDS --
  
  -- setting up output parameters
  
  UPDATE test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table SET test_status=TRUE WHERE actual_reason_level=expected_reason_level;
  UPDATE test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table SET test_status=FALSE WHERE actual_reason_level!=expected_reason_level;
  
  -- setting up records counts
  select count(*) into count_total_records FROM test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table;
  select count(*) into count_defective_records FROM test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table where  actual_reason_level != expected_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table WHERE expected_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table where actual_reason_level != expected_reason_level;
	if(temp_count=0) then
		set test_status=true;
		set test_detail=concat(count_total_records,' records are tested.No ambiguous record found.');
	else
		SET test_status=False;
		SET test_detail=concat(count_defective_records,' ambiguous records found out of ',count_total_records);
	end if;
  END IF;
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	      
	      
	      
	      
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying result and pl_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts3_tc4_resPlDailyCount');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying paid money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts3_tc5_resPlDailyEqualPaidMoney');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts3_tc6_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying recovered money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts3_tc6_resPlDailyEqualRecoveredMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying red counts in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts3_tc7_resPlDailyEqualReds ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts3_tc8_resPlDailyDistinctYearsCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying distinct years in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts3_tc8_resPlDailyDistinctYearsCount ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts3_tc1A_plTestTable`(@a);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts3_tc1B_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,
	    'Verifying pl dsily table[emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily] using test table[test_cases_2.t_26_pl_temp]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts3_tc1A_plTestTable/t_26_denyPulpOnAdultEndo_ts3_tc1B_plDailyValidation ');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts3_tc1A_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts3_tc1A_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts3_tc1A_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_daily_denyPulpOnAdultEndo';
	
	SET required_rows = weightage*total_counts/100;
	
	SET res=required_rows;
	
	
	 DROP TABLE IF EXISTS t_26_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_26_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) default NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_26_pl_temp; 
	
	
	insert into test_cases_2.t_26_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_26_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts3_tc1B_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts3_tc1B_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts3_tc1B_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT null;
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT null;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_26_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) INTO temp_expec_procedure_count FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1';
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE attend=t_attend AND date_of_service=t_dos AND isactive='1' AND ryg_status='green';
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_26_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_26_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend='';
			SET t_dos= null;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = null;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_26_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_26_pl_temp WHERE t_26_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_26_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_26_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_26_pl_temp WHERE t_26_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily WHERE isactive=1;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE isactive=1;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_daily` WHERE isactive=1;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts3_tc6_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts3_tc6_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts3_tc6_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE isactive=1;
	SELECT SUM(recovered_money) INTO pld_rec_money FROM emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_daily` WHERE isactive=1;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_daily` WHERE isactive=1;
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_daily` WHERE isactive=1;
	
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_TS4_DAILY_DASHBOARD_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_TS4_DAILY_DASHBOARD_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_TS4_DAILY_DASHBOARD_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts4_tc5_checkTotalCountPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying paid money db_daily  and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts4_tc5_checkTotalCountPlNDb ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying RYG count in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts4_tc6_checkRygCountsPlNDbTables');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying red counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts4_tc7_checkRedCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts4_tc8_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying yellow counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts4_tc8_checkYellowCountsPlNDbTables ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts4_tc1A_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts4_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,
	    'Verifying db daily table[emihealth_final.dashboard_daily_results] using test table[test_cases_2.t_26_dashboard_temp]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts4_tc1A_dashboardTestTable/t_26_denyPulpOnAdultEndo_ts4_tc1B_dashboardDailyValidation');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts4_tc1A_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts4_tc1A_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts4_tc1A_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=26;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_daily_denyPulpOnAdultEndo';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_26_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_26_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_26_dashboard_temp; 
	
	
	insert into test_cases_2.t_26_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=26) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_26_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts4_tc1B_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts4_tc1B_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts4_tc1B_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT null;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_26_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_26_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_26_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos=NULL;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_26_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_26_dashboard_temp WHERE t_26_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_26_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_26_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_26_dashboard_temp WHERE t_26_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=26;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	
	SELECT SUM(abc) INTO pl_total_count FROM (SELECT COUNT(DISTINCT(attend)) AS abc FROM emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_daily` WHERE isactive=1 
	GROUP BY date_of_service) AS aa;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=26;
	
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
		
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=26;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts4_tc8_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts4_tc8_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts4_tc8_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=26;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying result and pl_monthly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts5_tc2_checkCountResNPlMonthly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying paid money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts5_tc3_checkPaidMoneyResNPlMonthly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts5_tc4_checkRvrdMoneyResNPlMnthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying recovered money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts5_tc4_checkRvrdMoneyResNPlMnthly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts5_tc5_checkEqualRedsResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying red counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts5_tc5_checkEqualRedsResNPlMontly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts5_tc6_distinctYearsCountResNPlMontly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying distinct years counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts5_tc6_distinctYearsCountResNPlMontly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying table[emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_monthly] by generating test table[test_cases_2.t_temp_26_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts5_tc7A_testTableGen/t_26_denyPulpOnAdultEndo_ts5_tc7B_columnValidation ');
 
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT default 0;
	DECLARE plm_count INT default 0;
	SELECT COUNT(*) into res_count FROM  emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE isactive=1;
	SELECT SUM(procedure_count) into plm_count from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_monthly` WHERE isactive=1;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_monthly WHERE isactive=1;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts5_tc4_checkRvrdMoneyResNPlMnthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts5_tc4_checkRvrdMoneyResNPlMnthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts5_tc4_checkRvrdMoneyResNPlMnthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_monthly` WHERE isactive=1;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts5_tc5_checkEqualRedsResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts5_tc5_checkEqualRedsResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts5_tc5_checkEqualRedsResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE ryg_status='red' AND isactive=1;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_monthly WHERE isactive=1;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts5_tc6_distinctYearsCountResNPlMontly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts5_tc6_distinctYearsCountResNPlMontly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts5_tc6_distinctYearsCountResNPlMontly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_monthly WHERE isactive=1;
	
	
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_monthly where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_monthly_denyPulpOnAdultEndo';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_26_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_26_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` tinyint(2) zerofill Not Null ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) zerofill NOT NULL,
	  `expec_number_of_violations`INT(4) zerofill DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_26_ts5_tc7; 
	
	
	insert into test_cases_2.t_temp_26_ts5_tc7(attend, month,year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,month,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_monthly WHERE isactive=1 order by (concat(month,year)) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_26_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_month tinyint default 0;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'green','yellow') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,month,year FROM test_cases_2.t_temp_26_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE isactive=1 AND MONTH(results_deny_pulp_on_adult_full_endo.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` where isactive=1 AND MONTH(results_deny_pulp_on_adult_full_endo.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1 AND MONTH(results_deny_pulp_on_adult_full_endo.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1 AND MONTH(results_deny_pulp_on_adult_full_endo.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1 AND MONTH(results_deny_pulp_on_adult_full_endo.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1 AND MONTH(results_deny_pulp_on_adult_full_endo.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1 AND MONTH(results_deny_pulp_on_adult_full_endo.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` 
			WHERE isactive=1 and MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_26_ts5_tc7  WHERE attend=t_attend AND year=t_year and month=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_26_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend and month=t_month and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set t_month=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code =NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_26_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_26_ts5_tc7 WHERE t_temp_26_ts5_tc7.test_status !=TRUE;
	
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_26_ts5_tc7;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_26_ts5_tc7) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_26_ts5_tc7 where t_temp_26_ts5_tc7.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_TS6_PL_YEARLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_TS6_PL_YEARLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_TS6_PL_YEARLY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying result and pl_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts6_tc1_checkCountResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying paid money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts6_tc2_checkPaidMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying recovered money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts6_tc3_checkRecoveredMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying red counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts6_tc4_checkEqualRedsResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts6_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts6_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying table[emihealth_final.results_deny_pulpotomy_on_adult] by generating test table[test_cases_2.t_temp_26_ts4_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts6_tc7A_testTableGen/t_26_denyPulpOnAdultEndo_ts6_tc7B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT COUNT(*) INTO res_count FROM  emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE isactive=1;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_yearly` WHERE isactive=1;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE isactive=1;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_yearly` WHERE isactive=1;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_deny_pulp_on_adult_full_endo`WHERE isactive=1;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_yearly` WHERE isactive=1;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE ryg_status='red' and isactive=1;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_yearly` WHERE isactive=1;
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts6_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts6_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts6_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.pl_simple_prophy_stats_yearly where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_cbu';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_26_ts6_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_26_ts6_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_26_ts6_tc7; 
	
	
	insert into test_cases_2.t_temp_26_ts6_tc7(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_26_ts6_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts6_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts6_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts6_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_26_ts6_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT COUNT(*) into temp_expec_procedure_count FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` where isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_deny_pulp_on_adult_full_endo WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_deny_pulp_on_adult_full_endo` 
			WHERE isactive=1  AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_26_ts6_tc7  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_26_ts6_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend=null;
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code =NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_26_ts6_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_26_ts6_tc7 WHERE t_temp_26_ts6_tc7.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_26_ts6_tc7;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_26_ts6_tc7) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_26_ts6_tc7 where t_temp_26_ts6_tc7.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying distinct year counts in pl_monthly and db_monthly',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts7_tc2_countDistinctYearsPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying total_count db_monthly  and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts7_tc3_checkTotalCountPlMNdbm');
	SET start_time = NOW();
	
	
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying total_count of provider in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts7_tc4_checkCountNoOfProvPlMNdbM ');
	SET start_time = NOW();
	
	
	
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying paid_money  in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM');
	SET start_time = NOW();
	
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_26_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts7_tc9A_testTableGen/t_26_denyPulpOnAdultEndo_ts7_tc9B_columnValidation ');	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_monthly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=26;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and db_monthly.';
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_monthly` WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=26;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_monthly` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=26;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_monthly` WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=26;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_monthly` WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=26;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_daily_results WHERE isactive=1 and type=26;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_denyPulpOnAdultEndo';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_26_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_26_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_26_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_26_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=26) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_26_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_26_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_26_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_26_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_yellow=temp_actual_total_yellow=0; 
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_26_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_26_ts7_tc9 WHERE t_temp_26_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_26_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_26_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_26_ts7_tc9 WHERE t_temp_26_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts8_tc2_countDistinctYearsPlYNDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts8_tc4_checkCountNoOfProvPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts8_tc5_checkTotalRedCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_26_denyPulpOnAdultEndo_ts8_tc7_checkGreenCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying paid money money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_26_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_26_denyPulpOnAdultEndo_ts8_tc9A_testTableGen/t_26_denyPulpOnAdultEndo_ts8_tc9B_columnValidation');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_yearly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=26;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.`pl_deny_pulp_on_adult_full_endo_stats_yearly` WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=26;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_yearly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=26;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_yearly	 WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=26;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=26;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=26;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=26;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts8_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts8_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts8_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=26;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_denyPulpOnAdultEndo';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_26_ts8_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_26_ts8_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_26_ts8_tc9; 
	
	
	insert into test_cases_2.t_temp_26_ts8_tc9(year,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=26) ORDER BY(year)desc LIMIT required_rows;
	
	
	select count(*)into temp_count FROM test_cases_2.t_temp_26_ts8_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_denyPulpOnAdultEndo_ts8_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_denyPulpOnAdultEndo_ts8_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_denyPulpOnAdultEndo_ts8_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_26_ts8_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_yearly WHERE YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_26_ts8_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_26_ts8_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_26_ts8_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_26_ts8_tc9 WHERE t_temp_26_ts8_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_26_ts8_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_26_ts8_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_26_ts8_tc9 WHERE t_temp_26_ts8_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_26_________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_26_________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_26_________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_MAIN` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_MAIN` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_MAIN`()
BEGIN
call t_27_anesthesiaDangDose_TS2_RESULT_TABLE();
call t_27_anesthesiaDangDose_TS3_PL_DAILY_STATS_TABLE();
call t_27_anesthesiaDangDose_TS4_DASHBOARD_DAILY_TABLE();
call t_27_anesthesiaDangDose_TS5_PL_MONTHLY_STATS_TABLE();
call t_27_anesthesiaDangDose_TS6_PL_STATS_YEARLY_TABLE();
Call t_27_anesthesiaDangDose_TS7_DASHBOARD_MONTHLY_TABLE();
call t_27_anesthesiaDangDose_TS8_DASHBOARD_YEARLY_TABLE();
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_TS2_RESULT_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_TS2_RESULT_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_TS2_RESULT_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	      
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts2_tc1A_srcTableGen`(@a);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts2_tc1B_testTableGen`(@a);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts2_tc1C_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,
	    'Verifying result table[emihealth_final.results_anesthesia_dangerous_dose] using test table[test_cases_2.t_temp_27_anesthesiaDangDose_test_table]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
	     ,'t_27_anesthesiaDangDose_ts2_tc1A_srcTableGen/t_27_anesthesiaDangDose_ts2_tc1B_testTableGen/t_27_anesthesiaDangDose_ts2_tc1C_resReasonsValidation');
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts2_tc1A_srcTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts2_tc1A_srcTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts2_tc1A_srcTableGen`(OUT success BOOL)
BEGIN
	-- ===================================================================================================================== --
	--  Creating Source Table[test_cases_2.`t_temp_src_anesthesia_dangerous_dose`] form Table [emihealth_final.`src_anesthesia_dangerous_dose`]     					                                                                         --
	-- ===================================================================================================================== --
	DECLARE temp_count INT DEFAULT 0;
	
	DROP TABLE IF EXISTS test_cases_2.`t_temp_src_anesthesia_dangerous_dose`;
	CREATE TABLE test_cases_2.`t_temp_src_anesthesia_dangerous_dose` (
	`id` INT(11) DEFAULT NULL,
	`proc_code` VARCHAR(50) DEFAULT NULL,
	`tooth_no` VARCHAR(5) DEFAULT NULL,
	`quadrant` VARCHAR(2) DEFAULT NULL,
	`sector` VARCHAR(15) DEFAULT NULL,
	`date_of_service` DATETIME DEFAULT NULL,
	`attend` VARCHAR(20) DEFAULT NULL,
	`mid` VARCHAR(98) DEFAULT NULL,
	`patient_age` INT(11) DEFAULT 0,
	PRIMARY KEY (`id`),
	INDEX `i_date_of_service` (`date_of_service`),
	INDEX `i_quadrant` (`quadrant`),
	INDEX `i_sector` (`sector`)
	) ENGINE=MYISAM  DEFAULT CHARSET=latin1;
	INSERT 	INTO test_cases_2.`t_temp_src_anesthesia_dangerous_dose`
		(id, attend, MID, date_of_service, proc_code, tooth_no, patient_age, quadrant, sector)
	SELECT 	id, attend, MID, date_of_service, proc_code, tooth_no, patient_age, quadrant, sector
	FROM 	emihealth_final.`src_anesthesia_dangerous_dose`;
	
	
	SELECT COUNT(*) INTO temp_count FROM  test_cases_2.`t_temp_src_anesthesia_dangerous_dose`;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts2_tc1B_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts2_tc1B_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts2_tc1B_testTableGen`(OUT success BOOL)
BEGIN
	-- =================================================
	--            Declaring All Variables 
	-- =================================================
	DECLARE reason_percent DECIMAL(5,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        DECLARE selected_reason INT;
        DECLARE iterator INT;
        DECLARE _ryg_status VARCHAR(15) DEFAULT NULL;
        
        -- =================================================
	--            Creating Table Structure
	-- =================================================
	DROP TABLE IF EXISTS test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`;
	CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_27_anesthesiaDangDose_test_table` (
	`id` BIGINT(20) UNSIGNED  NOT NULL AUTO_INCREMENT ,
	`res_id` BIGINT(20)  DEFAULT NULL,
	`attend` VARCHAR(40) DEFAULT NULL,
	`mid` VARCHAR(99) DEFAULT NULL,
	`date_of_service` DATETIME DEFAULT NULL,
	`patient_age` INT DEFAULT 0,
	
	`default_plus_20_percent_adj_value` DOUBLE DEFAULT 0,
	
	`act_no_of_carpules_l` DOUBLE DEFAULT '0',
	`exp_no_of_carpules_l` DOUBLE DEFAULT '0',
	`act_severity_adjustment_l` DOUBLE DEFAULT '0',
	`exp_severity_adjustment_l` DOUBLE DEFAULT '0',
	
	`act_no_of_carpules_u` DOUBLE DEFAULT '0',
	`exp_no_of_carpules_u` DOUBLE DEFAULT '0',
	`act_severity_adjustment_u` DOUBLE DEFAULT '0',
	`exp_severity_adjustment_u` DOUBLE DEFAULT '0',
	
	
	`act_final_no_of_carpules` DOUBLE DEFAULT '0',
	`exp_final_no_of_carpules` DOUBLE DEFAULT '0',
	
	`act_reason_level` INT(2) DEFAULT NULL,
	`exp_reason_level` INT(2) DEFAULT NULL,
	
	`act_ryg_status` VARCHAR(15) DEFAULT NULL,
	`exp_ryg_status` VARCHAR(15) DEFAULT NULL,
	
	`test_status` BOOL DEFAULT NULL,
	`test_detail` TINYTEXT DEFAULT NULL,
	PRIMARY KEY (`id`)
	) ENGINE=INNODB DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`;
	
	
	-- =================================================
	--           Sampling And Inserting Data 
	-- =================================================
	SET iterator = 1;
        WHILE(iterator < 3) DO
		SET selected_reason= iterator;
		SELECT reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  WHERE algo_id=27 AND reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		IF(selected_reason = 1) THEN
			SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_anesthesia_dangerous_dose` WHERE ryg_status='red';
			SET _ryg_status = 'red';
			
		ELSE
			SELECT COUNT(*) INTO reason_total_count FROM emihealth_final.`results_anesthesia_dangerous_dose` WHERE ryg_status='green';
			SET _ryg_status = 'green';
		END IF;
		
		IF(reason_total_count < 100) THEN
			SET reason_sample_count=reason_total_count;
		ELSE
			SET reason_sample_count=(reason_total_count*reason_percent)/100;
		END IF;
		
		INSERT INTO test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`
		(
			res_id,
			attend,
			MID,
			date_of_service,
			patient_age,
			default_plus_20_percent_adj_value,
			
			act_no_of_carpules_l,
			act_severity_adjustment_l,
			act_no_of_carpules_u,
			act_severity_adjustment_u,
			
			act_final_no_of_carpules,
			
			act_reason_level,
			act_ryg_status
		)
		SELECT 	id, 
			attend, 
			MID, 
			date_of_service, 
			patient_age,
			default_plus_20_percent_adj_value,
			
			no_of_carpules_l,
			severity_adjustment_l,
			no_of_carpules_u,
			severity_adjustment_u,
			
			final_no_of_carpules,
			
			reason_level, 
			ryg_status
		FROM 	emihealth_final.`results_anesthesia_dangerous_dose`
		WHERE 	ryg_status =  _ryg_status
			-- AND isactive=1 
		ORDER 	
		BY 	RAND() 
		LIMIT 	reason_sample_count;	
	
		SET iterator = iterator + 1;
	END WHILE;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts2_tc1C_resReasonsValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts2_tc1C_resReasonsValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts2_tc1C_resReasonsValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	-- =====================================================================================================================
	--            					Declaring All Variables 
	-- =====================================================================================================================
	-- For Holdind Data From Cursor
	DECLARE t_id BIGINT(20) DEFAULT 0 ;
	DECLARE t_attend VARCHAR(40) DEFAULT '' ;
	DECLARE t_mid VARCHAR(99) DEFAULT '';
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_patient_age INT DEFAULT 0;
	 
		
	-- For Holding Results of Queries
	DECLARE cnt_distinct_quad_l INT DEFAULT 0;
	DECLARE cnt_distinct_quad_severity_adj_l INT DEFAULT 0;
	
	DECLARE cnt_distinct_sector_u INT DEFAULT 0;
	DECLARE cnt_distinct_sector_severity_adj_u INT DEFAULT 0;
	
	
	-- Variables below are used for setting Output parameters
	DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	-- Cursor Declarations
	DECLARE finished BOOL DEFAULT FALSE;
	DECLARE test_row_cursor CURSOR FOR
				SELECT 	id, attend, MID, date_of_service, patient_age
				FROM  	test_cases_2.t_temp_27_anesthesiaDangDose_test_table;			
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = TRUE;
	
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Starts 
	-- =====================================================================================================================
	OPEN test_row_cursor;
	get_test_row:LOOP
	
		FETCH test_row_cursor INTO t_id, t_attend, t_mid, t_dos, t_patient_age;
		IF(finished = TRUE)THEN
			LEAVE get_test_row;
		END IF;
		IF(t_patient_age < 12) THEN
		-- ==============================================================================================================
								-- STARTS --
		-- ==============================================================================================================
			SELECT 	COUNT(DISTINCT(quadrant))
			INTO 	cnt_distinct_quad_l
			FROM 	test_cases_2.`t_temp_src_anesthesia_dangerous_dose`
			WHERE 	attend = t_attend
				AND MID = t_mid
				AND date_of_service = t_dos
				AND quadrant IN ('LL','LR')
				;
				
			SELECT 	COUNT(DISTINCT(quadrant))
			INTO 	cnt_distinct_quad_severity_adj_l
			FROM 	test_cases_2.`t_temp_src_anesthesia_dangerous_dose`
			WHERE 	attend = t_attend
				AND MID = t_mid
				AND date_of_service = t_dos
				AND quadrant IN ('LL','LR')
				AND proc_code NOT IN ('D7111','D4910')
				AND (proc_code LIKE 'D3%' OR proc_code LIKE 'D4%' OR proc_code LIKE 'D7%')
				;
				
			SELECT 	COUNT(DISTINCT(sector))
			INTO 	cnt_distinct_sector_u
			FROM 	test_cases_2.`t_temp_src_anesthesia_dangerous_dose`
			WHERE 	attend = t_attend
				AND MID = t_mid
				AND date_of_service = t_dos
				AND quadrant IN ('UL','UR')
				;
				
			SELECT 	COUNT(DISTINCT(sector))
			INTO 	cnt_distinct_sector_severity_adj_u
			FROM 	test_cases_2.`t_temp_src_anesthesia_dangerous_dose`
			WHERE 	attend = t_attend
				AND MID = t_mid
				AND date_of_service = t_dos
				AND quadrant IN ('UL','UR')
				AND proc_code NOT IN ('D7111','D4910')
				AND (proc_code LIKE 'D3%' OR proc_code LIKE 'D4%' OR proc_code LIKE 'D7%')
				;
							
			-- Updating test table	
			UPDATE 	test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`
			SET 	exp_no_of_carpules_l = 0.5 * cnt_distinct_quad_l,
				exp_severity_adjustment_l = 0.5 * cnt_distinct_quad_severity_adj_l,
				
				exp_no_of_carpules_u = 0.5 * cnt_distinct_sector_u,
				exp_severity_adjustment_u = 0.5 *  cnt_distinct_sector_severity_adj_u
			WHERE id = t_id;
			
			UPDATE 	test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`
			SET 	exp_final_no_of_carpules = exp_no_of_carpules_l + exp_severity_adjustment_l + exp_no_of_carpules_u + exp_severity_adjustment_u
			WHERE id = t_id;
		-- ==============================================================================================================
								-- ENDS --
		-- ==============================================================================================================
		ELSE
		-- ==============================================================================================================
								-- STARTS --
		-- ==============================================================================================================
			SELECT 	COUNT(DISTINCT(quadrant))
			INTO 	cnt_distinct_quad_l
			FROM 	test_cases_2.`t_temp_src_anesthesia_dangerous_dose`
			WHERE 	attend = t_attend
				AND MID = t_mid
				AND date_of_service = t_dos
				AND quadrant IN ('LL','LR')
				;
				
			SELECT 	COUNT(DISTINCT(quadrant))
			INTO 	cnt_distinct_quad_severity_adj_l
			FROM 	test_cases_2.`t_temp_src_anesthesia_dangerous_dose`
			WHERE 	attend = t_attend
				AND MID = t_mid
				AND date_of_service = t_dos
				AND quadrant IN ('LL','LR')
				AND proc_code NOT IN ('D7111','D4910')
				AND (proc_code LIKE 'D3%' OR proc_code LIKE 'D4%' OR proc_code LIKE 'D7%')
				;
				
			SELECT 	COUNT(DISTINCT(sector))
			INTO 	cnt_distinct_sector_u
			FROM 	test_cases_2.`t_temp_src_anesthesia_dangerous_dose`
			WHERE 	attend = t_attend
				AND MID = t_mid
				AND date_of_service = t_dos
				AND quadrant IN ('UL','UR')
				;
				
			SELECT 	COUNT(DISTINCT(sector))
			INTO 	cnt_distinct_sector_severity_adj_u
			FROM 	test_cases_2.`t_temp_src_anesthesia_dangerous_dose`
			WHERE 	attend = t_attend
				AND MID = t_mid
				AND date_of_service = t_dos
				AND quadrant IN ('UL','UR')
				AND proc_code NOT IN ('D7111','D4910')
				AND (proc_code LIKE 'D3%' OR proc_code LIKE 'D4%' OR proc_code LIKE 'D7%')
				;
							
			-- Updating test table	
			UPDATE 	test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`
			SET 	exp_no_of_carpules_l =  cnt_distinct_quad_l,
				exp_severity_adjustment_l =  cnt_distinct_quad_severity_adj_l * 0.5,
				
				exp_no_of_carpules_u = cnt_distinct_sector_u,
				exp_severity_adjustment_u = cnt_distinct_sector_severity_adj_u * 0.5
			WHERE id = t_id;
			
			UPDATE 	test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`
			SET 	exp_final_no_of_carpules = exp_no_of_carpules_l + exp_severity_adjustment_l + exp_no_of_carpules_u + exp_severity_adjustment_u
			WHERE id = t_id;
		-- ==============================================================================================================
								-- ENDS --
		-- ==============================================================================================================	
		END IF;
	END LOOP;
	CLOSE test_row_cursor;
	
	-- =====================================================================================================================
	--            				    Algo Core Processing Ends
	-- =====================================================================================================================
	-- Marking Expected RYG Status and Reason 
	UPDATE	test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`
	SET 	exp_reason_level = 1,
		exp_ryg_status = 'red'
	WHERE 	exp_final_no_of_carpules > default_plus_20_percent_adj_value;
	
	UPDATE	test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`
	SET 	exp_reason_level = 2,
		exp_ryg_status = 'green'
	WHERE 	exp_final_no_of_carpules <= default_plus_20_percent_adj_value;
	
	UPDATE 	test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`
	SET 	test_status = 0
	WHERE 	act_reason_level != exp_reason_level;
	
	UPDATE 	test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`
	SET 	test_status = 1
	WHERE 	act_reason_level = exp_reason_level;
		
	
	UPDATE 	test_cases_2.t_temp_27_anesthesiaDangDose_test_table
	SET 	test_status = 1
	WHERE 	act_reason_level = exp_reason_level
		;
	
	UPDATE 	test_cases_2.t_temp_27_anesthesiaDangDose_test_table
	SET 	test_status = 0
	WHERE 	act_reason_level != exp_reason_level
		;
		
	-- Setting Up Output parameters [success, test_status, test_detail]
	SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_27_anesthesiaDangDose_test_table;
	SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_27_anesthesiaDangDose_test_table WHERE  act_reason_level != exp_reason_level;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_27_anesthesiaDangDose_test_table WHERE exp_reason_level IS NULL;
	
	IF(temp_count>0) THEN
		SET success=FALSE;
	ELSE
		SET success=TRUE;
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_27_anesthesiaDangDose_test_table WHERE act_reason_level != exp_reason_level;
		IF(temp_count=0) THEN
			SET test_status=TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_TS3_PL_DAILY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_TS3_PL_DAILY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_TS3_PL_DAILY_STATS_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts3_tc4_resPlDailyCount`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying result and pl_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_27_anesthesiaDangDose_ts3_tc4_resPlDailyCount');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts3_tc5_resPlDailyEqualPaidMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying paid money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts3_tc5_resPlDailyEqualPaidMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts3_tc6_resPlDailyEqualRecoveredMoney`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying recovered money in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts3_tc6_resPlDailyEqualRecoveredMoney ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts3_tc7_resPlDailyEqualReds`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying red counts in result and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts3_tc7_resPlDailyEqualReds ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.pl_anesthesia_dangerous_dose_stats_daily] by generating test table[test_cases_2.t_27_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_27_anesthesiaDangDose_ts3_tc2_plTestTable / t_27_anesthesiaDangDose_ts3_tc1_plDailyValidation  ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts3_tc1_plDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts3_tc1_plDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts3_tc1_plDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT null;
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT null;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records  INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,date_of_service FROM test_cases_2.t_27_pl_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
	
			SELECT SUM(procedure_count) INTO temp_expec_procedure_count FROM emihealth_final.results_anesthesia_dangerous_dose WHERE attend=t_attend AND date_of_service=t_dos ;
			
			
			SELECT  COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.results_anesthesia_dangerous_dose WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_anesthesia_dangerous_dose WHERE attend=t_attend AND date_of_service=t_dos ;
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_anesthesia_dangerous_dose WHERE attend=t_attend AND date_of_service=t_dos AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_anesthesia_dangerous_dose WHERE attend=t_attend AND date_of_service=t_dos  AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_anesthesia_dangerous_dose WHERE attend=t_attend AND date_of_service=t_dos  AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_anesthesia_dangerous_dose WHERE attend=t_attend AND date_of_service=t_dos  AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
			
			
			SET temp_expec_no_of_violations = temp_r_check;
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations
			FROM test_cases_2.t_27_pl_temp  WHERE attend=t_attend AND date_of_service=t_dos LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									SET temp_test_detail='Data   in   against   all    columns   is   ok.';
									                     
									SET temp_test_status=TRUE;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			UPDATE test_cases_2.t_27_pl_temp 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND date_of_service=t_dos;
			
			
			SET t_attend='';
			-- SET t_dos= '';
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = null;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_27_pl_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_27_pl_temp WHERE t_27_pl_temp.test_status !=TRUE;
        
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_27_pl_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_27_pl_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_27_pl_temp WHERE t_27_pl_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts3_tc2_plTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts3_tc2_plTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts3_tc2_plTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.pl_anesthesia_dangerous_dose_stats_daily WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_dialy_anesthesiaDangDose';
	
	SET required_rows = weightage*total_counts/100;
	
	SET res=required_rows;
	
	
	 DROP TABLE IF EXISTS t_27_pl_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_27_pl_temp` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  Default NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_27_pl_temp; 
	
	
	insert into test_cases_2.t_27_pl_temp(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		from emihealth_final.pl_anesthesia_dangerous_dose_stats_daily WHERE isactive=1 ORDER BY date_of_service DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_27_pl_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts3_tc4_resPlDailyCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts3_tc4_resPlDailyCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts3_tc4_resPlDailyCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE pld_count INT DEFAULT 0;
	SELECT sum(procedure_count) INTO res_count FROM  emihealth_final.results_anesthesia_dangerous_dose ;
	SELECT SUM(procedure_count) INTO pld_count FROM emihealth_final.pl_anesthesia_dangerous_dose_stats_daily ;
	
	IF(res_count=pld_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_dialy table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>pld_count)THEN
			SET test_detail=CONCAT(res_count-pld_count,' more counts  found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_count-res_count,' more counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts3_tc5_resPlDailyEqualPaidMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts3_tc5_resPlDailyEqualPaidMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts3_tc5_resPlDailyEqualPaidMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE pld_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_anesthesia_dangerous_dose`;
	SELECT SUM(income) INTO pld_income FROM emihealth_final.`pl_anesthesia_dangerous_dose_stats_daily`;
	
	IF(res_paid_money=pld_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_daily .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>pld_income)THEN
			SET test_detail=CONCAT(res_paid_money-pld_income,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_income-res_paid_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts3_tc6_resPlDailyEqualRecoveredMoney` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts3_tc6_resPlDailyEqualRecoveredMoney` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts3_tc6_resPlDailyEqualRecoveredMoney`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE pld_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_anesthesia_dangerous_dose`;
	SELECT SUM(recovered_money) INTO pld_rec_money FROM emihealth_final.`pl_anesthesia_dangerous_dose_stats_daily`;
	
	IF(res_rec_money=pld_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>pld_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-pld_rec_money,' more money found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_rec_money-res_rec_money,' more money found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts3_tc7_resPlDailyEqualReds` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts3_tc7_resPlDailyEqualReds` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts3_tc7_resPlDailyEqualReds`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE pld_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.`results_anesthesia_dangerous_dose` WHERE ryg_status='red';
	SELECT SUM(number_of_violations) INTO pld_red_count FROM emihealth_final.`pl_anesthesia_dangerous_dose_stats_daily` ;
	
	
	
	
	
	
	
	IF(res_red_count=pld_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>pld_red_count)THEN
			SET test_detail=CONCAT(res_red_count-pld_red_count,' more red counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_red_count-res_red_count,' more red counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts3_tc8_resPlDailyDistinctYearsCount` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts3_tc8_resPlDailyDistinctYearsCount` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts3_tc8_resPlDailyDistinctYearsCount`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE pld_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.`results_anesthesia_dangerous_dose`;
        SELECT COUNT(DISTINCT(YEAR))  INTO pld_years_count FROM emihealth_final.`pl_anesthesia_dangerous_dose_stats_daily`;
	
	IF(res_years_count=pld_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_daily.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>pld_years_count)THEN
			SET test_detail=CONCAT(res_years_count-pld_years_count,' more year counts found in result table then pl_dialy table.');
		ELSE
			SET test_detail=CONCAT(pld_years_count-res_years_count,' more year counts found in pl_daily table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_TS4_DASHBOARD_DAILY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_TS4_DASHBOARD_DAILY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_TS4_DASHBOARD_DAILY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying pl_daily and db_daily table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
	,'t_27_anesthesiaDangDose_ts4_tc4_checkCountDosPlNDb');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts4_tc4_checkCountDosPlNDb`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying paid money db_daily  and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report'
	,'t_27_anesthesiaDangDose_ts4_tc4_checkCountDosPlNDb');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts4_tc6_checkRygCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying recovered money in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts4_tc6_checkRygCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts4_tc7_checkRedCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying red counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts4_tc7_checkRedCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts4_tc8_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying yellow counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts4_tc8_checkYellowCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts4_tc9_checkGreenCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying green counts in db_daily and pl_daily table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts4_tc9_checkGreenCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_27_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts4_tc2_dashboardTestTable / t_27_anesthesiaDangDose_ts4_tc1_dashboardDailyValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts4_tc1_dashboardDailyValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts4_tc1_dashboardDailyValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts4_tc1_dashboardDailyValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_dos DATETIME DEFAULT Null;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT date_of_service FROM test_cases_2.t_27_dashboard_temp ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO   t_dos;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_anesthesia_dangerous_dose_stats_daily WHERE date_of_service=t_dos AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_anesthesia_dangerous_dose_stats_daily WHERE date_of_service=t_dos AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_anesthesia_dangerous_dose_stats_daily WHERE date_of_service=t_dos AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_anesthesia_dangerous_dose_stats_daily WHERE date_of_service=t_dos AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_27_dashboard_temp
			WHERE date_of_service=t_dos LIMIT 1;
			
			IF(temp_expec_no_of_providers !=temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red !=temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow !=temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_27_dashboard_temp 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE date_of_service=t_dos;
			
			
			SET t_dos=null;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail=NULL;
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_27_dashboard_temp;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_27_dashboard_temp WHERE t_27_dashboard_temp.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_27_dashboard_temp;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_27_dashboard_temp) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_27_dashboard_temp WHERE t_27_dashboard_temp.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts4_tc2_dashboardTestTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts4_tc2_dashboardTestTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts4_tc2_dashboardTestTable`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=27;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_daily_anesthesiaDangDose';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100) THEN
		SET required_rows=100;
	END IF;
	
	 DROP TABLE IF EXISTS t_27_dashboard_temp;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_27_dashboard_temp` (
	  `id` INT(11) ZEROFILL NOT NULL AUTO_INCREMENT,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_no_of_providers` INT(11) ZEROFILL NOT NULL,
	  `expec_no_of_providers` INT(11)  ZEROFILL DEFAULT NULL,
	  
	  `actual_total_red` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_red` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_27_dashboard_temp; 
	
	
	insert into test_cases_2.t_27_dashboard_temp(date_of_service, actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT date_of_service,number_of_providers, total_red, total_yellow, total_green
		FROM emihealth_final.dashboard_daily_results WHERE (isactive=1 AND TYPE=27) ORDER BY (date_of_service) DESC LIMIT required_rows;
	
	
	SELECT COUNT(*)INTO temp_count FROM test_cases_2.t_27_dashboard_temp;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts4_tc4_checkCountDosPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts4_tc4_checkCountDosPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts4_tc4_checkCountDosPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_dist_dos_count INT DEFAULT 0;
	DECLARE db_dist_dos_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(date_of_service)) into pl_dist_dos_count from emihealth_final.`pl_anesthesia_dangerous_dose_stats_daily` WHERE isactive=1;
	SELECT COUNT(DISTINCT(date_of_service)) into db_dist_dos_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=27;
	
	if(pl_dist_dos_count = db_dist_dos_count) then
		set test_status=true;
		set test_detail ='Counts for distinct date_of_service are equal in pl_dialy table and  db_daily .';
	else
		set test_status=False;
		IF(pl_dist_dos_count>db_dist_dos_count)THEN
			SET test_detail=CONCAT(pl_dist_dos_count-db_dist_dos_count,' more counts for distinct date of service found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_dist_dos_count-pl_dist_dos_count,' more counts for distinct date of service found in db_daily table then pl_dialy table.');
		END IF;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts4_tc5_checkTotalCountPlNDb` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts4_tc5_checkTotalCountPlNDb` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts4_tc5_checkTotalCountPlNDb`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=27;
	
	IF(pl_total_count = db_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_count,' more counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_count-pl_total_count,' more counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts4_tc6_checkRygCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts4_tc6_checkRygCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts4_tc6_checkRygCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_total_count INT DEFAULT 0;
	DECLARE db_total_ryg_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_total_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_daily WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO db_total_ryg_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=27;
	
	IF(pl_total_count = db_total_ryg_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total ryg counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_total_count>db_total_ryg_count)THEN
			SET test_detail=CONCAT(pl_total_count-db_total_ryg_count,' more ryg counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_total_ryg_count-pl_total_count,' more ryg counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts4_tc7_checkRedCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts4_tc7_checkRedCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts4_tc7_checkRedCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_red_count INT DEFAULT 0;
	DECLARE db_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_red_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_daily WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into db_red_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=27;
	
	IF(pl_red_count = db_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_red_count>db_red_count)THEN
			SET test_detail=CONCAT(pl_red_count-db_red_count,' more red counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_red_count-pl_red_count,' more red counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts4_tc8_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts4_tc8_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts4_tc8_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_daily WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=27;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts4_tc9_checkGreenCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts4_tc9_checkGreenCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts4_tc9_checkGreenCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_green_count INT DEFAULT 0;
	DECLARE db_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_green_count from emihealth_final.`pl_anesthesia_dangerous_dose_stats_daily` WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) INTO db_green_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=27;
	
	
	IF(pl_green_count = db_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_green_count>db_green_count)THEN
			SET test_detail=CONCAT(pl_green_count-db_green_count,' more green counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_green_count-pl_green_count,' more green counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_TS5_PL_MONTHLY_STATS_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_TS5_PL_MONTHLY_STATS_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_TS5_PL_MONTHLY_STATS_TABLE`()
BEGIN
DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts5_tc2_checkCountResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying result and pl_monthly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts5_tc2_checkCountResNPlMonthly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts5_tc3_checkPaidMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying paid money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts5_tc3_checkPaidMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying recovered money in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts5_tc4_checkRecoveredMoneyResNPlMonthly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts5_tc5_checkEqualRedsResNPlMonthly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying red counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_27_anesthesiaDangDose_ts5_tc5_checkEqualRedsResNPlMonthly');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts5_tc6_distinctYearsCountResNPlMon`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying distinct years counts in result and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_27_anesthesiaDangDose_ts5_tc6_distinctYearsCountResNPlMon');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly] by generating test table[test_cases_2.t_temp_27_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts5_tc7A_testTableGen / t_27_anesthesiaDangDose_ts5_tc7B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts5_tc2_checkCountResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts5_tc2_checkCountResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts5_tc2_checkCountResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE plm_count INT DEFAULT 0;
	SELECT SUM(procedure_count)  INTO res_count FROM  emihealth_final.`results_anesthesia_dangerous_dose` ;
	SELECT SUM(procedure_count) INTO plm_count FROM emihealth_final.`pl_anesthesia_dangerous_dose_stats_monthly`;
	
	IF(res_count=plm_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_monthly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>plm_count)THEN
			SET test_detail=CONCAT(res_count-plm_count,' more counts  found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_count-res_count,' more counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts5_tc3_checkPaidMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts5_tc3_checkPaidMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts5_tc3_checkPaidMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE plm_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.results_anesthesia_dangerous_dose ;
	SELECT SUM(income) INTO plm_income FROM emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly ;
	
	IF(res_paid_money=plm_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>plm_income)THEN
			SET test_detail=CONCAT(res_paid_money-plm_income,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_income-res_paid_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts5_tc4_checkRecoveredMoneyResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts5_tc4_checkRecoveredMoneyResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE plm_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.results_anesthesia_dangerous_dose ;
	SELECT SUM(recovered_money) INTO plm_rec_money FROM emihealth_final.`pl_anesthesia_dangerous_dose_stats_monthly` ;
	
	IF(res_rec_money=plm_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>plm_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-plm_rec_money,' more money found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_rec_money-res_rec_money,' more money found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts5_tc5_checkEqualRedsResNPlMonthly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts5_tc5_checkEqualRedsResNPlMonthly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts5_tc5_checkEqualRedsResNPlMonthly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE plm_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO res_red_count  FROM emihealth_final.results_anesthesia_dangerous_dose WHERE ryg_status='red' ;
	SELECT SUM(number_of_violations) INTO plm_red_count FROM emihealth_final.`pl_anesthesia_dangerous_dose_stats_monthly` ;
	
	
	
	
	
	
	
	IF(res_red_count=plm_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>plm_red_count)THEN
			SET test_detail=CONCAT(res_red_count-plm_red_count,' more red counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_red_count-res_red_count,' more red counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts5_tc6_distinctYearsCountResNPlMon` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts5_tc6_distinctYearsCountResNPlMon` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts5_tc6_distinctYearsCountResNPlMon`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE plm_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) INTO res_years_count FROM emihealth_final.results_anesthesia_dangerous_dose ;
        SELECT COUNT(DISTINCT(YEAR))  INTO plm_years_count FROM emihealth_final.`pl_anesthesia_dangerous_dose_stats_monthly` ;
	IF(res_years_count=plm_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_monthly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>plm_years_count)THEN
			SET test_detail=CONCAT(res_years_count-plm_years_count,' more year counts found in result table then pl_monthly table.');
		ELSE
			SET test_detail=CONCAT(plm_years_count-res_years_count,' more year counts found in pl_monthly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts5_tc7A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts5_tc7A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts5_tc7A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts FROM emihealth_final.`pl_anesthesia_dangerous_dose_stats_monthly` WHERE isactive='1';
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='pl_monthly_anesthesiaDangDose';
	
	SET required_rows = weightage*total_counts/100;
	
	IF(required_rows<100)THEN
		SET required_rows=100;
	END IF;
	
	
	 DROP TABLE IF EXISTS t_temp_27_ts5_tc7;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_27_ts5_tc7` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `month` TINYINT(2) ZEROFILL NOT NULL ,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) ZEROFILL DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(4) ZEROFILL NOT NULL,
	  `expec_no_of_days_wd_violations`INT(4) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_27_ts5_tc7; 
	
	
	INSERT INTO test_cases_2.t_temp_27_ts5_tc7(attend, MONTH,YEAR, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,MONTH,YEAR,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		FROM emihealth_final.`pl_anesthesia_dangerous_dose_stats_monthly` WHERE isactive=1 ORDER BY (CONCAT(MONTH,YEAR)) DESC LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_27_ts5_tc7;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts5_tc7B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts5_tc7B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts5_tc7B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_attend VARCHAR(50) DEFAULT "";
	DECLARE t_dos DATETIME DEFAULT NULL;
	DECLARE t_month TINYINT DEFAULT 0;
	DECLARE t_year INT DEFAULT 0;
	
	DECLARE temp_expec_procedure_count,temp_actual_procedure_count INT DEFAULT 0;
	DECLARE temp_expec_patient_count,temp_actual_patient_count INT DEFAULT 0;
	DECLARE temp_expec_income,temp_actual_income DOUBLE DEFAULT 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	DECLARE temp_expec_color_code,temp_actual_color_code ENUM('red', 'yellow','green') DEFAULT NULL;
	DECLARE temp_expec_no_of_violations,temp_actual_no_of_violations INT DEFAULT 0;
	DECLARE temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
	DECLARE temp_r_check ,temp_y_check, temp_g_check,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,MONTH,YEAR FROM test_cases_2.t_temp_27_ts5_tc7 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend, t_month, t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT  SUM(procedure_count) INTO temp_expec_procedure_count FROM emihealth_final.`results_anesthesia_dangerous_dose` WHERE   MONTH(results_anesthesia_dangerous_dose.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) INTO temp_expec_patient_count FROM emihealth_final.`results_anesthesia_dangerous_dose` WHERE  MONTH(results_anesthesia_dangerous_dose.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT ROUND(SUM(paid_money),2) INTO temp_expec_income FROM emihealth_final.results_anesthesia_dangerous_dose WHERE MONTH(results_anesthesia_dangerous_dose.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			SELECT ROUND(SUM(recovered_money),2) INTO temp_expec_recovered_money FROM emihealth_final.results_anesthesia_dangerous_dose WHERE  MONTH(results_anesthesia_dangerous_dose.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT COUNT(*) INTO temp_r_check FROM emihealth_final.results_anesthesia_dangerous_dose where  MONTH(results_anesthesia_dangerous_dose.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_anesthesia_dangerous_dose where MONTH(results_anesthesia_dangerous_dose.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_anesthesia_dangerous_dose WHERE  MONTH(results_anesthesia_dangerous_dose.date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			IF(temp_r_check != 0) THEN
				SET temp_expec_color_code='red';
			ELSE
				IF(temp_y_check !=0) THEN
					SET temp_expec_color_code='yellow';
				ELSE
					SET temp_expec_color_code='green';
				END IF;
			END IF;
	
			
			SET temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) INTO temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_anesthesia_dangerous_dose` 
			WHERE  MONTH(date_of_service)=t_month AND YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_27_ts5_tc7  WHERE attend=t_attend AND YEAR=t_year AND MONTH=t_month LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						ELSE
							IF(temp_actual_color_code != temp_expec_color_code)THEN
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							ELSE
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								ELSE
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								END IF;
							END IF;
							
						END IF;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_27_ts5_tc7 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend AND MONTH=t_month AND YEAR=t_year;
			
			
			
			
			SET t_attend='';
			SET t_year=0;
			SET t_month=0;
			SET temp_expec_procedure_count = temp_actual_procedure_count=0;
			SET temp_expec_patient_count = temp_actual_patient_count=0;
			SET temp_expec_income = temp_actual_income=0;
			SET temp_expec_recovered_money = temp_actual_recovered_money=0;
			SET temp_expec_color_code = temp_actual_color_code = NULL;
			SET temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			SET temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			SET temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_27_ts5_tc7;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_27_ts5_tc7 WHERE t_temp_27_ts5_tc7.test_status !=TRUE;
	
	
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_27_ts5_tc7;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_27_ts5_tc7) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_27_ts5_tc7 WHERE t_temp_27_ts5_tc7.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(temp_count,' records found with ambiguous data.');
		END IF;
	END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_TS6_PL_STATS_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_TS6_PL_STATS_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_TS6_PL_STATS_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts6_tc1_checkCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying result and pl_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts6_tc1_checkCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts6_tc2_checkPaidMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying paid money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts6_tc2_checkPaidMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts6_tc3_checkRecoveredMoneyResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying recovered money in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts6_tc3_checkRecoveredMoneyResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts6_tc4_checkEqualRedsResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying red counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts6_tc4_checkEqualRedsResNPlYearly ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts6_tc5_distinctYearsCountResNPlYearly`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying distinct years counts in result and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts6_tc5_distinctYearsCountResNPlYearly ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.pl_anesthesia_dangerous_dose_stats_yearly] by generating test table[test_cases_2.t_temp_27_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts6_tc6A_testTableGen/t_27_anesthesiaDangDose_ts6_tc6B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts6_tc1_checkCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts6_tc1_checkCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts6_tc1_checkCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_count INT DEFAULT 0;
	DECLARE ply_count INT DEFAULT 0;
	SELECT SUM(procedure_count) INTO res_count FROM  emihealth_final.`results_anesthesia_dangerous_dose`;
	SELECT SUM(procedure_count) INTO ply_count FROM emihealth_final.pl_anesthesia_dangerous_dose_stats_yearly;
	
	IF(res_count=ply_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal counts found in result and pl_yearly table (sum of proc_codes).';
	ELSE
		SET test_status=FALSE;
		IF(res_count>ply_count)THEN
			SET test_detail=CONCAT(res_count-ply_count,' more counts  found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_count-res_count,' more counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts6_tc2_checkPaidMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts6_tc2_checkPaidMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts6_tc2_checkPaidMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_paid_money INT DEFAULT 0;
	DECLARE ply_income INT DEFAULT 0;
	
	SELECT SUM(paid_money) INTO  res_paid_money FROM emihealth_final.`results_anesthesia_dangerous_dose`;
	SELECT SUM(income) INTO ply_income from emihealth_final.`pl_anesthesia_dangerous_dose_stats_yearly`;
	
	IF(res_paid_money=ply_income) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of paid money in result table is equal to sum of income in pl_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(res_paid_money>ply_income)THEN
			SET test_detail=CONCAT(res_paid_money-ply_income,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_income-res_paid_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts6_tc3_checkRecoveredMoneyResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts6_tc3_checkRecoveredMoneyResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts6_tc3_checkRecoveredMoneyResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN 	
	
	DECLARE res_rec_money INT DEFAULT 0;
	DECLARE ply_rec_money INT DEFAULT 0;
	
	SELECT SUM(recovered_money) INTO  res_rec_money FROM emihealth_final.`results_anesthesia_dangerous_dose`;
	SELECT SUM(recovered_money) INTO ply_rec_money from emihealth_final.`pl_anesthesia_dangerous_dose_stats_yearly`;
	
	IF(res_rec_money=ply_rec_money) THEN
		SET test_status=TRUE;
		SET test_detail='Sum of receovered money in result table is equal to sum of pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_rec_money>ply_rec_money)THEN
			SET test_detail=CONCAT(res_rec_money-ply_rec_money,' more money found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_rec_money-res_rec_money,' more money found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts6_tc4_checkEqualRedsResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts6_tc4_checkEqualRedsResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts6_tc4_checkEqualRedsResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE res_red_count INT DEFAULT 0;
	DECLARE ply_red_count INT DEFAULT 0;
	
	SELECT count(*) INTO res_red_count  FROM emihealth_final.`results_anesthesia_dangerous_dose` WHERE ryg_status='red' ;
	SELECT SUM(number_of_violations) INTO ply_red_count from emihealth_final.`pl_anesthesia_dangerous_dose_stats_yearly` ;
	
	
	
	
	
	
	
	IF(res_red_count=ply_red_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal red counts found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_red_count>ply_red_count)THEN
			SET test_detail=CONCAT(res_red_count-ply_red_count,' more red counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_red_count-res_red_count,' more red counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts6_tc5_distinctYearsCountResNPlYearly` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts6_tc5_distinctYearsCountResNPlYearly` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts6_tc5_distinctYearsCountResNPlYearly`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE res_years_count INT DEFAULT 0;
	DECLARE ply_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(YEAR(date_of_service))) into res_years_count FROM emihealth_final.`results_anesthesia_dangerous_dose` ;
        SELECT COUNT(DISTINCT(YEAR))  INTO ply_years_count from emihealth_final.`pl_anesthesia_dangerous_dose_stats_yearly` ;
	
	
	
        
	
	
	
	
	IF(res_years_count=ply_years_count) THEN
		SET test_status=TRUE;
		SET test_detail='Equal count of distinct years found in result table and pl_yearly.';
	ELSE
		SET test_status=FALSE;
		IF(res_years_count>ply_years_count)THEN
			SET test_detail=CONCAT(res_years_count-ply_years_count,' more year counts found in result table then pl_yearly table.');
		ELSE
			SET test_detail=CONCAT(ply_years_count-res_years_count,' more year counts found in pl_yearly table then result table.');
		END IF;
	END IF;
	SET success=TRUE;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts6_tc6A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts6_tc6A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts6_tc6A_testTableGen`(OUT success BOOL)
BEGIN
	declare required_rows int default null;
	Declare total_counts ,temp_count,res int default Null;
	Declare weightage decimal(4,2) Default 2;
	
	select count(*) into total_counts from emihealth_final.`pl_complex_perio_stats_yearly` where isactive='1';
	select var_value into weightage FROM test_cases_2.t_global_variables where var_key='pl_yearly_anesthesiaDangDose';
	
	set required_rows = weightage*total_counts/100;
	
	if(required_rows<100)then
		set required_rows=100;
	end if;
	
	
	 DROP TABLE IF EXISTS t_temp_27_ts6_tc6;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_27_ts6_tc6` (
	  
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `year` INT(4) ZEROFILL NOT NULL ,
	  
	  `actual_procedure_count` INT(6) zerofill NOT NULL,
	  `expec_procedure_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_patient_count` INT(6) zerofill NOT NULL,
	  `expec_patient_count` INT(6) zerofill DEFAULT NULL,
	  
	  `actual_income` DOUBLE precision(11,2) zerofill  NOT NULL,
	  `expec_income` DOUBLE precision (11,2) zerofill DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL,
	  `expec_recovered_money` DOUBLE (11,2) zerofill DEFAULT NULL, 
	   
	  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
	  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) NOT NULL,
	  `expec_number_of_violations`INT(6) DEFAULT NULL,
	  
	  `actual_no_of_days_wd_violations`INT(6) NOT NULL,
	  `expec_no_of_days_wd_violations`INT(6) DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_27_ts6_tc6; 
	
	
	insert into test_cases_2.t_temp_27_ts6_tc6(attend, year, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations,actual_no_of_days_wd_violations)
		                SELECT attend,year,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations,number_of_days_wd_violations
		from emihealth_final.`pl_anesthesia_dangerous_dose_stats_yearly` WHERE isactive=1 order by (year) desc LIMIT required_rows;
		
	SELECT COUNT(*) INTO temp_count FROM  t_temp_27_ts6_tc6;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts6_tc6B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts6_tc6B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts6_tc6B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	declare t_attend varchar(50) default "";
	declare t_dos datetime default NULL;
	declare t_year int default 0;
	
	declare temp_expec_procedure_count,temp_actual_procedure_count int default 0;
	declare temp_expec_patient_count,temp_actual_patient_count int default 0;
	declare temp_expec_income,temp_actual_income double default 0;
	DECLARE temp_expec_recovered_money,temp_actual_recovered_money DOUBLE DEFAULT 0;
	declare temp_expec_color_code,temp_actual_color_code enum('red', 'yellow','green') default NULL;
	declare temp_expec_no_of_violations,temp_actual_no_of_violations int default 0;
	declare temp_expec_no_days_wd_violations, temp_actual_no_days_wd_violations int default 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	declare temp_test_status bool default false;
	declare temp_r_check ,temp_y_check, temp_g_check,temp_count ,count_total_records,count_defective_records int default 0;
	
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT attend,year FROM test_cases_2.t_temp_27_ts6_tc6 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
        
        OPEN my_cursor ;
		get_test_row :LOOP
		
			FETCH my_cursor INTO  t_attend,  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			SELECT sum(procedure_count) into temp_expec_procedure_count FROM emihealth_final.`results_anesthesia_dangerous_dose` WHERE  YEAR(date_of_service)=t_year AND attend=t_attend;
			
			SELECT COUNT(DISTINCT(MID)) into temp_expec_patient_count FROM emihealth_final.`results_anesthesia_dangerous_dose` where  YEAR(date_of_service)=t_year AND attend=t_attend;
			
			select Round(sum(paid_money),2) into temp_expec_income FROM emihealth_final.results_anesthesia_dangerous_dose WHERE YEAR(date_of_service)=t_year AND attend=t_attend;
			
			
			
			select round(sum(recovered_money),2) into temp_expec_recovered_money FROM emihealth_final.results_anesthesia_dangerous_dose WHERE  YEAR(date_of_service)=t_year AND attend=t_attend and ryg_status='red';
			
			
			select count(*) into temp_r_check FROM emihealth_final.results_anesthesia_dangerous_dose WHERE  YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			SELECT COUNT(*) INTO temp_y_check FROM emihealth_final.results_anesthesia_dangerous_dose WHERE  YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='yellow';
			SELECT COUNT(*) INTO temp_g_check FROM emihealth_final.results_anesthesia_dangerous_dose WHERE  YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='green';
			
			if(temp_r_check != 0) then
				set temp_expec_color_code='red';
			else
				if(temp_y_check !=0) then
					SET temp_expec_color_code='yellow';
				else
					set temp_expec_color_code='green';
				end if;
			end if;
	
			
			set temp_expec_no_of_violations=temp_r_check;
			
			
			SELECT COUNT(DISTINCT(date_of_service)) into temp_expec_no_days_wd_violations 
			FROM emihealth_final.`results_anesthesia_dangerous_dose` 
			WHERE YEAR(date_of_service)=t_year AND attend=t_attend AND ryg_status='red';
			
			
			SELECT actual_procedure_count, actual_patient_count, actual_income, actual_recovered_money, actual_color_code, actual_number_of_violations, actual_no_of_days_wd_violations
			INTO   temp_actual_procedure_count, temp_actual_patient_count, temp_actual_income, temp_actual_recovered_money, temp_actual_color_code,temp_actual_no_of_violations, temp_actual_no_days_wd_violations
			FROM test_cases_2.t_temp_27_ts6_tc6  WHERE attend=t_attend AND year=t_year  LIMIT 1;
			
			
			IF(temp_actual_procedure_count != temp_expec_procedure_count) THEN
				SET temp_test_detail='Column(procedure_count)  values are not matched.';
				set temp_test_status=false;
			ELSE
				IF(temp_actual_patient_count != temp_expec_patient_count) THEN
					SET temp_test_detail='Column(patient_count)    values are not matched.';
					
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_actual_income != temp_expec_income) THEN
						SET temp_test_detail='Column(income)           values are not matched.';
						                     
						SET temp_test_status=FALSE;
					ELSE
						IF( Round(temp_actual_recovered_money,0) != Round(temp_expec_recovered_money,0) ) THEN
							SET temp_test_detail='Column(recovered_money)  values are not matched.';
									     
							SET temp_test_status=FALSE;
						else
							if(temp_actual_color_code != temp_expec_color_code)then
								SET temp_test_detail='Column(color_code)       values are not matched.';
								                     
								SET temp_test_status=FALSE;
							else
								IF(temp_actual_no_of_violations != temp_expec_no_of_violations)THEN
									SET temp_test_detail='Column(no_of_violations  values are not matched.';
									                     
									SET temp_test_status=FALSE;
								else
									IF(temp_expec_no_days_wd_violations != temp_actual_no_days_wd_violations) THEN
										 SET temp_test_detail='Column(no_of_day_wd_vol values are not matched.';
												    
									         SET temp_test_status=FALSE;
									ELSE
										SET temp_test_detail='Data      against    all    columns    is   ok.';
										SET temp_test_status=TRUE;
									END IF;
								end if;
							end if;
							
						end if;
					END IF;
				END IF;
			END IF;
			
			
			UPDATE test_cases_2.t_temp_27_ts6_tc6 
				 SET 
					expec_procedure_count=temp_expec_procedure_count,
					expec_patient_count=temp_expec_patient_count,
					expec_income= temp_expec_income ,
					expec_recovered_money = temp_expec_recovered_money,
					expec_color_code = temp_expec_color_code,
					expec_number_of_violations = temp_expec_no_of_violations,
					expec_no_of_days_wd_violations = temp_expec_no_days_wd_violations,
					test_detail=temp_test_detail,
					test_status=temp_test_status
			WHERE attend=t_attend  and year=t_year;
			
			
			
			
			set t_attend='';
			set t_year=0;
			set temp_expec_procedure_count = temp_actual_procedure_count=0;
			set temp_expec_patient_count = temp_actual_patient_count=0;
			set temp_expec_income = temp_actual_income=0;
			set temp_expec_recovered_money = temp_actual_recovered_money=0;
			set temp_expec_color_code = temp_actual_color_code = NULL;
			set temp_expec_no_of_violations = temp_actual_no_of_violations=0; 
			set temp_expec_no_days_wd_violations = temp_actual_no_days_wd_violations =0;
			set temp_test_detail='';
			set temp_test_status=0;
			set temp_r_check=temp_y_check=temp_g_check=0;
			
        	END LOOP ;
	CLOSE my_cursor ;
	
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_27_ts6_tc6;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_27_ts6_tc6 WHERE t_temp_27_ts6_tc6.test_status !=TRUE;
        
	
	set temp_count=0;
	select count(*) into temp_count FROM test_cases_2.t_temp_27_ts6_tc6;
	if(temp_count = 0) then
		set success=false;
		set test_status=false;
		set test_detail='Table(t_temp_27_ts6_tc6) is empty';
	else
		set temp_count=0;
		select count(*) into temp_count FROM test_cases_2.t_temp_27_ts6_tc6 where t_temp_27_ts6_tc6.test_status !=true;
		if(temp_count = 0) then
			set success= true;
			set test_status= true;
			set test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		else
			set success= true;
			set test_status=false;
			set test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		end if;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_TS7_DASHBOARD_MONTHLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_TS7_DASHBOARD_MONTHLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_TS7_DASHBOARD_MONTHLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts7_tc2_countDistinctYearsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying distinct year counts in pl_monthly and db_monthly',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts7_tc2_countDistinctYearsPlMNDbM ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts7_tc3_checkTotalCountPlMNdbm`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying total_count db_monthly  and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts7_tc3_checkTotalCountPlMNdbm ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts7_tc4_checkCountNoOfProvPlMNdbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying providers count in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts7_tc4_checkCountNoOfProvPlMNdbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts7_tc6_checkYellowCountsPlNDbTables`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying yellow counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts7_tc6_checkYellowCountsPlNDbTables ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts7_tc7_checkGreenCountsPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying green counts in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_27_anesthesiaDangDose_ts7_tc7_checkGreenCountsPlMNDbM');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying paid_money  in db_monthly and pl_monthly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_TS7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_TS7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_27_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_TS7_tc9A_testTableGen/t_27_anesthesiaDangDose_TS7_tc9B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts7_tc2_countDistinctYearsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts7_tc2_countDistinctYearsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts7_tc2_countDistinctYearsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_dist_years_count INT DEFAULT 0;
	DECLARE dbm_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into plm_dist_years_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dbm_dist_years_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=27;
	
	if(plm_dist_years_count = dbm_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_monthly table and  db_monthly.';
		set success = true;
	else
		set test_status=False;
		IF(plm_dist_years_count>dbm_dist_years_count)THEN
			SET test_detail=CONCAT(plm_dist_years_count-dbm_dist_years_count,' more counts for distinct years found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_dist_years_count-plm_dist_years_count,' more counts for distinct years found in db_monthly table then pl_monthly table.');
		END IF;
		SET success = TRUE;
	end if;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts7_tc3_checkTotalCountPlMNdbm` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts7_tc3_checkTotalCountPlMNdbm` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts7_tc3_checkTotalCountPlMNdbm`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(MONTH,YEAR)) INTO plm_total_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly WHERE isactive=1;
	SELECT count(*) INTO dbm_total_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=27;
	
	IF(plm_total_count = dbm_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_count,' more counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_count-plm_total_count,' more counts found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts7_tc4_checkCountNoOfProvPlMNdbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts7_tc4_checkCountNoOfProvPlMNdbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts7_tc4_checkCountNoOfProvPlMNdbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_count INT DEFAULT 0;
	DECLARE dbm_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_total_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dbm_total_prov_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=27;
	
	IF(plm_total_count = dbm_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_count>dbm_total_prov_count)THEN
			SET test_detail=CONCAT(plm_total_count-dbm_total_prov_count,' more providers counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_prov_count-plm_total_count,' more providers counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
	set success = true;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts7_tc6_checkYellowCountsPlNDbTables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts7_tc6_checkYellowCountsPlNDbTables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts7_tc6_checkYellowCountsPlNDbTables`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE pl_yellow_count INT DEFAULT 0;
	DECLARE db_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO pl_yellow_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) INTO db_yellow_count FROM emihealth_final.dashboard_daily_results WHERE isactive=1 AND TYPE=27;
	
	
	IF(pl_yellow_count = db_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_dialy table and  db_daily .';
	ELSE
		SET test_status=FALSE;
		IF(pl_yellow_count>db_yellow_count)THEN
			SET test_detail=CONCAT(pl_yellow_count-db_yellow_count,' more yellow counts found in pl_dialy table then db_daily table.');
		ELSE
			SET test_detail=CONCAT(db_yellow_count-pl_yellow_count,' more yellow counts found in db_daily table then pl_dialy table.');
		END IF;
	END IF;
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts7_tc7_checkGreenCountsPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts7_tc7_checkGreenCountsPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts7_tc7_checkGreenCountsPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_green_count INT DEFAULT 0;
	DECLARE dbm_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO plm_green_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dbm_green_count from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=27;
	
	IF(plm_green_count = dbm_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_green_count>dbm_green_count)THEN
			SET test_detail=CONCAT(plm_green_count-dbm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_green_count-plm_green_count,' more green counts found in pl_monthly table then db_monthly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts7_tc8_checkTotalPaidMoneyCountPlMNDbM`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE plm_total_paid_money INT DEFAULT 0;
	DECLARE dbm_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO plm_total_paid_money from emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dbm_total_paid_money from emihealth_final.dashboard_monthly_results WHERE isactive=1 AND TYPE=27;
	
	IF(plm_total_paid_money = dbm_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_monthly table and  db_monthly .';
	ELSE
		SET test_status=FALSE;
		IF(plm_total_paid_money>dbm_total_paid_money)THEN
			SET test_detail=CONCAT(plm_total_paid_money-dbm_total_paid_money,' more piad money found in pl_monthly table then db_monthly table.');
		ELSE
			SET test_detail=CONCAT(dbm_total_paid_money-plm_total_paid_money,' more paid money found in db_monthly table then pl_monthly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_TS7_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_TS7_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_TS7_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_monthly_results WHERE isactive=1 and type=27;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_monthly_anesthesiaDangDose';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_27_ts7_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_27_ts7_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  `month` INT(2) ZEROFILL NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_27_ts7_tc9; 
	
	
	insert into test_cases_2.t_temp_27_ts7_tc9(year,month ,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,month,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_monthly_results WHERE (isactive=1 and type=27) ORDER BY(concat(year,month)) desc LIMIT required_rows;
	select count(*)into temp_count FROM test_cases_2.t_temp_27_ts7_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_TS7_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_TS7_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_TS7_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_month INT(2) DEFAULT 0;
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT MONTH,YEAR FROM test_cases_2.t_temp_27_ts7_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_month,t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly WHERE month=t_month and year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.`pl_anesthesia_dangerous_dose_stats_monthly` WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly WHERE  MONTH=t_month AND YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_27_ts7_tc9
			WHERE YEAR=t_year and month=t_month LIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			
			UPDATE test_cases_2.t_temp_27_ts7_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year AND  month=t_month;
			
			
			set t_month=0;
			SET t_year=0;
			set temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			set temp_expec_total_red=temp_actual_total_red=0;
			set temp_expec_total_yellow=temp_actual_total_yellow=0; 
			set temp_expec_total_green=temp_actual_total_green=0;
			set temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
			
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_27_ts7_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_27_ts7_tc9 WHERE t_temp_27_ts7_tc9.test_status !=TRUE;
        
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_27_ts7_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_27_ts7_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_27_ts7_tc9 WHERE t_temp_27_ts7_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_TS8_DASHBOARD_YEARLY_TABLE` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_TS8_DASHBOARD_YEARLY_TABLE` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_TS8_DASHBOARD_YEARLY_TABLE`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts8_tc2_countDistinctYearsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying pl_yearly and db_yearly table distinct years',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts8_tc2_countDistinctYearsPlYNDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts8_tc3_checkTotalCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying pl_yearly and db_yearly table counts',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts8_tc3_checkTotalCountPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts8_tc4_checkCountNoOfProvPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying no. of providers in db_yearly  and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts8_tc4_checkCountNoOfProvPlYNDbY ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts8_tc5_checkTotalRedCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying red counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_27_anesthesiaDangDose_ts8_tc5_checkTotalRedCountsPlYNDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts8_tc6_checkTotalYellowCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying yellow counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report',' t_27_anesthesiaDangDose_ts8_tc6_checkTotalYellowCountsPlYNDbY');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts8_tc7_checkGreenCountsPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying green counts in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts8_tc7_checkGreenCountsPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying paid money money in db_yearly and pl_yearly table',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_4a_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report','t_27_anesthesiaDangDose_ts8_tc9A_testTableGent_27_anesthesiaDangDose_ts8_tc9B_columnValidation ');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts8_tc2_countDistinctYearsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts8_tc2_countDistinctYearsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts8_tc2_countDistinctYearsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_dist_years_count INT DEFAULT 0;
	DECLARE dby_dist_years_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT(year)) into ply_dist_years_count from emihealth_final.`pl_anesthesia_dangerous_dose_stats_yearly` WHERE isactive=1;
	SELECT COUNT(DISTINCT(Year)) into dby_dist_years_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=27;
	
	if(ply_dist_years_count = dby_dist_years_count) then
		set test_status=true;
		set test_detail ='Counts for distinct years are equal in pl_yearly table and  db_yearly.';
	else
		set test_status=False;
		IF(ply_dist_years_count>dby_dist_years_count)THEN
			SET test_detail=CONCAT(ply_dist_years_count-dby_dist_years_count,' more counts for distinct years found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_dist_years_count-ply_dist_years_count,' more counts for distinct years found in db_yearly table then pl_yearly table.');
		END IF;
	end if;
			
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts8_tc3_checkTotalCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts8_tc3_checkTotalCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts8_tc3_checkTotalCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_count INT DEFAULT 0;
	
	SELECT COUNT(DISTINCT CONCAT(YEAR)) INTO ply_total_count from emihealth_final.`pl_anesthesia_dangerous_dose_stats_yearly` WHERE isactive=1;
	SELECT count(*) INTO dby_total_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=27;
	
	IF(ply_total_count = dby_total_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_count,' more counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_count-ply_total_count,' more counts found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts8_tc4_checkCountNoOfProvPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts8_tc4_checkCountNoOfProvPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts8_tc4_checkCountNoOfProvPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_count INT DEFAULT 0;
	DECLARE dby_total_prov_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_total_count from emihealth_final.`pl_anesthesia_dangerous_dose_stats_yearly` WHERE isactive=1;
	SELECT SUM(number_of_providers) INTO dby_total_prov_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=27;
	
	IF(ply_total_count = dby_total_prov_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total providers counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_count>dby_total_prov_count)THEN
			SET test_detail=CONCAT(ply_total_count-dby_total_prov_count,' more providers counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_prov_count-ply_total_count,' more providers counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts8_tc5_checkTotalRedCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts8_tc5_checkTotalRedCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts8_tc5_checkTotalRedCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_red_count INT DEFAULT 0;
	DECLARE dby_red_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_red_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_yearly WHERE isactive=1 AND color_code='red';
	SELECT SUM(total_red) into dby_red_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=27;
	
	IF(ply_red_count = dby_red_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total red counts are equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_red_count>dby_red_count)THEN
			SET test_detail=CONCAT(ply_red_count-dby_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_red_count-ply_red_count,' more red counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts8_tc6_checkTotalYellowCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts8_tc6_checkTotalYellowCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts8_tc6_checkTotalYellowCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_yellow_count INT DEFAULT 0;
	DECLARE dby_yellow_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_yellow_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_yearly WHERE isactive=1 AND color_code='yellow';
	SELECT SUM(total_yellow) into dby_yellow_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=27;
	
	IF(ply_yellow_count = dby_yellow_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total yellow counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_yellow_count>dby_yellow_count)THEN
			SET test_detail=CONCAT(ply_yellow_count-dby_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_yellow_count-ply_yellow_count,' more yellow counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts8_tc7_checkGreenCountsPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts8_tc7_checkGreenCountsPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts8_tc7_checkGreenCountsPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_green_count INT DEFAULT 0;
	DECLARE dby_green_count INT DEFAULT 0;
	
	SELECT COUNT(*) INTO ply_green_count from emihealth_final.pl_anesthesia_dangerous_dose_stats_yearly WHERE isactive=1 AND color_code='green';
	SELECT SUM(total_green) into dby_green_count from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=27;
	
	IF(ply_green_count = dby_green_count) THEN
		SET test_status=TRUE;
		SET test_detail ='Total green counts are equal in pl_yearly table and  db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_green_count>dby_green_count)THEN
			SET test_detail=CONCAT(ply_green_count-dby_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_green_count-ply_green_count,' more green counts found in pl_yearly table then db_yearly table.');
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts8_tc8_checkTotalPaidMoneyCountPlYNDbY`(OUT success BOOL,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	DECLARE ply_total_paid_money INT DEFAULT 0;
	DECLARE dby_total_paid_money INT DEFAULT 0;
	
	SELECT SUM(income) INTO ply_total_paid_money from emihealth_final.pl_anesthesia_dangerous_dose_stats_yearly WHERE isactive=1;
	SELECT SUM(total_paid_money) INTO dby_total_paid_money from emihealth_final.dashboard_yearly_results WHERE isactive=1 AND TYPE=27;
	
	IF(ply_total_paid_money = dby_total_paid_money) THEN
		SET test_status=TRUE;
		SET test_detail ='Paid money is equal in pl_yearly table and db_yearly .';
	ELSE
		SET test_status=FALSE;
		IF(ply_total_paid_money>dby_total_paid_money)THEN
			SET test_detail=CONCAT(ply_total_paid_money-dby_total_paid_money,' more piad money found in pl_yearly table then db_yearly table.');
		ELSE
			SET test_detail=CONCAT(dby_total_paid_money-ply_total_paid_money,' more paid money found in db_yearly table then pl_yearly table.');
		END IF;
	END IF;
 END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts8_tc9A_testTableGen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts8_tc9A_testTableGen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts8_tc9A_testTableGen`(OUT success BOOL)
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE total_counts ,temp_count INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	SELECT COUNT(*) INTO total_counts from emihealth_final.dashboard_yearly_results WHERE isactive=1 and type=27;
	SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key='db_yearly_anesthesiaDangDose';
	
	SET required_rows = weightage*total_counts/100;
	
	if(required_rows<100) then
		set required_rows=100;
	end if;
	
	 DROP TABLE IF EXISTS t_temp_27_ts8_tc9;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_27_ts8_tc9` (
	  `id` INT(11) zerofill NOT NULL AUTO_INCREMENT,
	  `year` int(4) zerofill NOT NULL,
	  
	  `actual_no_of_providers` INT(11) zerofill NOT NULL,
	  `expec_no_of_providers` INT(11)  zerofill DEFAULT NULL,
	  
	  `actual_total_red` INT(11)zerofill  NOT NULL,
	  `expec_total_red` INT(11) zerofill DEFAULT NULL,
	  
	  `actual_total_yellow` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_yellow` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `actual_total_green` INT(11)ZEROFILL  NOT NULL,
	  `expec_total_green` INT(11) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	  
	   PRIMARY KEY (`id`) 
	   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
	TRUNCATE TABLE t_temp_27_ts8_tc9; 
	
	
	insert into test_cases_2.t_temp_27_ts8_tc9(year,actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green )
		                SELECT year,number_of_providers, total_red, total_yellow, total_green
	from emihealth_final.dashboard_yearly_results WHERE (isactive=1 and type=27) ORDER BY(year)desc LIMIT required_rows;
	
	select count(*)into temp_count FROM test_cases_2.t_temp_27_ts8_tc9;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_anesthesiaDangDose_ts8_tc9B_columnValidation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_anesthesiaDangDose_ts8_tc9B_columnValidation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_anesthesiaDangDose_ts8_tc9B_columnValidation`(OUT success BOOL ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
	
	DECLARE t_year INT(2) DEFAULT 0;
	
	DECLARE temp_expec_no_of_providers,temp_actual_no_of_providers ,temp_count,count_total_records,count_defective_records INT DEFAULT 0;
	
	DECLARE temp_expec_total_red,temp_actual_total_red INT DEFAULT 0;
	DECLARE temp_expec_total_yellow,temp_actual_total_yellow INT DEFAULT 0;
	DECLARE temp_expec_total_green,temp_actual_total_green INT DEFAULT 0;
	
	DECLARE temp_test_detail TINYTEXT DEFAULT NULL;
	DECLARE temp_test_status BOOL DEFAULT FALSE;
		
	
	DECLARE finished INTEGER DEFAULT 0 ;
	DECLARE my_cursor CURSOR FOR 
		    SELECT YEAR FROM test_cases_2.t_temp_27_ts8_tc9 ;		    
        DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
        
         
        OPEN my_cursor ;
		get_test_row :LOOP
			FETCH my_cursor INTO  t_year;
			IF(finished = 1) THEN 
				LEAVE get_test_row ;
			END IF ;
			
			
			SELECT COUNT(*) INTO temp_expec_no_of_providers from emihealth_final.pl_anesthesia_dangerous_dose_stats_yearly WHERE year=t_year AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_red  from emihealth_final.pl_anesthesia_dangerous_dose_stats_yearly WHERE YEAR=t_year  AND color_code='red' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_yellow  from emihealth_final.pl_anesthesia_dangerous_dose_stats_yearly WHERE YEAR=t_year  AND color_code='yellow' AND isactive='1';
			
			SELECT COUNT(*)INTO temp_expec_total_green  from emihealth_final.pl_anesthesia_dangerous_dose_stats_yearly WHERE  YEAR=t_year  AND color_code='green' AND isactive='1';
			
			
			SELECT actual_no_of_providers, actual_total_red, actual_total_yellow, actual_total_green
			INTO temp_actual_no_of_providers,temp_actual_total_red,temp_actual_total_yellow,temp_actual_total_green
			FROM test_cases_2.t_temp_27_ts8_tc9
			WHERE YEAR=t_year lIMIT 1;
			
			IF(temp_expec_no_of_providers != temp_actual_no_of_providers) THEN
				SET test_detail='Column(no_of_providers) values are not matched.';
				SET temp_test_status=FALSE;
			ELSE
				IF(temp_expec_total_red != temp_actual_total_red) THEN
					SET test_detail='Column(total_red)    values  are  not  matched.';
					SET temp_test_status=FALSE;
				ELSE
					IF(temp_expec_total_yellow != temp_actual_total_yellow) THEN
						SET test_detail='Column(total_yellow) values are  not   matched.';
						SET temp_test_status=FALSE;
					ELSE
						IF(temp_expec_total_green !=temp_actual_total_green) THEN
							SET test_detail='Column(total_green ) values   are  not matched.';
							SET temp_test_status=FALSE;
						ELSE
							SET test_detail='Data   in   against   all    columns   is   ok.';
							SET temp_test_status=TRUE;
						END IF;
					END IF;
				END IF;
						
			END IF;
			     
			
			UPDATE test_cases_2.t_temp_27_ts8_tc9 
				 SET 
					expec_no_of_providers = temp_expec_no_of_providers,
					expec_total_red =temp_expec_total_red,
					expec_total_yellow=temp_expec_total_yellow, 
					expec_total_green =temp_expec_total_green,
					test_status=temp_test_status,
					test_detail=test_detail
			WHERE YEAR=t_year ;
			
			SET t_year=0;
			SET temp_expec_no_of_providers=temp_actual_no_of_providers=0;
			SET temp_expec_total_red=temp_actual_total_red=0;
			SET temp_expec_total_yellow=temp_actual_total_yellow=0; 
			SET temp_expec_total_green=temp_actual_total_green=0;
			SET temp_test_status=0;
			SET temp_test_detail='';
			SET temp_test_status=0;
		END LOOP ;
        CLOSE my_cursor;
        
        SELECT COUNT(*) INTO count_total_records FROM test_cases_2.t_temp_27_ts8_tc9;
        SELECT COUNT(*) INTO count_defective_records FROM test_cases_2.t_temp_27_ts8_tc9 WHERE t_temp_27_ts8_tc9.test_status !=TRUE;
        
        SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_27_ts8_tc9;
	IF(temp_count = 0) THEN
		SET success=FALSE;
		SET test_status=FALSE;
		SET test_detail='Table(t_temp_27_ts8_tc9) is empty';
	ELSE
		SET temp_count=0;
		SELECT COUNT(*) INTO temp_count FROM test_cases_2.t_temp_27_ts8_tc9 WHERE t_temp_27_ts8_tc9.test_status !=TRUE;
		IF(temp_count = 0) THEN
			SET success= TRUE;
			SET test_status= TRUE;
			SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
		ELSE
			SET success= TRUE;
			SET test_status=FALSE;
			SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
		END IF;
	END IF;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_27_________________` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_27_________________` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_27_________________`()
BEGIN
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_31_result_validation` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_31_result_validation` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_31_result_validation`(OUT success INT ,OUT test_status BOOL,OUT test_detail TINYTEXT)
BEGIN
  
  /* Below Variables are used for holding cursor data*/
  DECLARE t_id BIGINT(20) DEFAULT 0;
  DECLARE t_res_id BIGINT(20) DEFAULT 0;
  DECLARE t_attend VARCHAR(20) DEFAULT NULL;
  DECLARE t_mid VARCHAR(50) DEFAULT NULL;
  DECLARE t_claim_id VARCHAR(60) DEFAULT NULL;
  DECLARE t_dos DATETIME DEFAULT NULL;
  DECLARE t_proc_code VARCHAR(50) DEFAULT NULL;
  DECLARE tooth INT DEFAULT 0;
  DECLARE temp_count,count_total_records,count_defective_records INT DEFAULT 0;
  
  /*Below variables are used in calculation*/
  DECLARE has_D0120_or_D0150_or_D0180 INT DEFAULT 0;
  DECLARE has_D110 INT DEFAULT 0;
  DECLARE has_D4xxx INT DEFAULT 0;
  DECLARE has_D4355 INT DEFAULT 0;
  DECLARE has_another_D4346 INT DEFAULT 0;
  DECLARE has_another_D4346_on_same_dos INT DEFAULT 0;
  DECLARE has_more_than_one_inst_same_dos INT DEFAULT 0;
  DECLARE max_id INT DEFAULT 0;
  DECLARE has_another_D4346_after_2_years INT DEFAULT 0; 
  
 /*Below variables are declared for cursor*/ 
  DECLARE finished INTEGER DEFAULT 0;
  DECLARE test_row_cursor CURSOR FOR 
	SELECT id,res_id,proc_code ,attend,MID,claim_id,date_of_service FROM test_cases_2.t_temp_31_result_test_table ;	
		    
  DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
  
 
  OPEN test_row_cursor ;
  
  get_test_row :
	LOOP
		SET t_id=0;  SET t_proc_code='';  SET t_attend='';  SET t_mid=''; 
		
		FETCH test_row_cursor INTO  t_id,t_res_id,t_proc_code, t_attend, t_mid,t_claim_id,t_dos;
		IF(finished = 1) THEN 
			LEAVE get_test_row ;
		END IF ;
		    
		 
		IF (	(t_dos = '') OR (t_dos IS NULL) OR (t_attend ='') OR (t_mid ='') -- [1]
		        OR (t_proc_code ='') OR (t_attend IS NULL) OR (t_mid IS NULL) 
			OR (t_proc_code IS NULL)  ) THEN
			
			/* Mark claim as invalid*/
			UPDATE 	t_temp_31_result_test_table
			SET 	exp_reason_level = -1,
				exp_ryg_status = 'N/A',
				test_detail = 'Important fields are empty'
			WHERE 	id=t_id;
		ELSE
			SELECT 	COUNT(*) 
			INTO 	has_D0120_or_D0150_or_D0180
			FROM 	emihealth_final.`src_d4346_usage`
			WHERE 	proc_code IN ('D0120','D0150','D0180')
				AND MID = t_mid
				AND (date_of_service BETWEEN DATE_SUB(t_dos,INTERVAL 180 DAY) AND t_dos)
					;
			
			IF(has_D0120_or_D0150_or_D0180 IS NULL OR has_D0120_or_D0150_or_D0180 = 0)THEN -- [2] 
				UPDATE 	test_cases_2.t_temp_31_result_test_table
				SET 	exp_reason_level = 4
					,exp_status = 'D4346 is Downcoded to D1110'
				WHERE 	id = t_id
					;
			ELSE
				SELECT 	COUNT(*) 
				INTO 	has_D110
				FROM 	emihealth_final.`src_d4346_usage`
				WHERE 	proc_code IN ('D1110')
					AND MID = t_mid
					AND (date_of_service BETWEEN DATE_SUB(t_dos,INTERVAL 180 DAY) AND t_dos)
						;
				
				IF(has_D110 > 0)THEN -- [3] 
					UPDATE 	test_cases_2.t_temp_31_result_test_table
					SET 	exp_reason_level = 1
						,exp_status = 'D4346 is downcoded to D1110'
					WHERE 	id = t_id
						;
				ELSE
					SELECT 	COUNT(*) 
					INTO 	has_D4xxx
					FROM 	emihealth_final.`src_d4346_usage`
					WHERE 	proc_code !='D4355'
						AND proc_code !='D4346'
						AND proc_code LIKE 'D4%'
						AND MID = t_mid
						AND date_of_service <= t_dos
							;
					IF(has_D4xxx > 0)THEN -- [4]
						UPDATE 	test_cases_2.t_temp_31_result_test_table
						SET 	exp_reason_level = 2
							,exp_status = 'D4346 is downcoded to D1110'
						WHERE 	id = t_id
							;
					ELSE
						SELECT 	COUNT(*) 
						INTO 	has_D4355
						FROM 	emihealth_final.`src_d4346_usage`
						WHERE 	proc_code = 'D4355'
							AND MID = t_mid
							AND (date_of_service BETWEEN DATE_SUB(t_dos,INTERVAL 7 DAY) AND t_dos )
							;
							
						IF(has_D4355 > 0)THEN -- [5]
							UPDATE 	test_cases_2.t_temp_31_result_test_table
							SET 	exp_reason_level = 3
								,exp_status = 'D4346 is downcoded to D1110'
							WHERE 	id = t_id
								;
						ELSE
							SELECT 	COUNT(*) 
							INTO 	has_another_D4346
							FROM 	emihealth_final.`src_d4346_usage`
							WHERE 	proc_code = 'D4346'
								AND MID = t_mid
								AND date_of_service < t_dos
								AND (date_of_service BETWEEN DATE_SUB(t_dos,INTERVAL 730 DAY) AND t_dos )
								;
							SELECT 	COUNT(*) 
							INTO 	has_another_D4346_on_same_dos
							FROM 	emihealth_final.`src_d4346_usage`
							WHERE 	proc_code = 'D4346'
								AND MID = t_mid
								AND date_of_service = t_dos
								;
							IF( has_another_D4346 > 0 -- [6]
									)THEN
								UPDATE 	test_cases_2.t_temp_31_result_test_table
								SET 	exp_reason_level = 5
									,exp_status = 'D4346 is downcoded to D1110'
								WHERE 	id = t_id
									;
							ELSE
								SELECT 	COUNT(*) 
								INTO 	has_more_than_one_inst_same_dos
								FROM 	emihealth_final.`src_d4346_usage`
								WHERE 	proc_code = 'D4346'
									AND 	MID = t_mid
									AND 	date_of_service = t_dos
										;
								IF(has_more_than_one_inst_same_dos > 1)THEN -- [7]
									SELECT  MAX(id) 
									INTO	max_id 
									FROM 	emihealth_final.`results_d4346_usage`
									WHERE 	proc_code = 'D4346'
										AND 	MID = t_mid
										AND 	date_of_service = t_dos
										;
									IF(t_res_id = max_id) THEN -- [8] 
										UPDATE 	test_cases_2.t_temp_31_result_test_table
										SET 	exp_reason_level = 6
											,exp_status = 'D4346 is allowed'
										WHERE 	id = t_id
											;
									ELSE 
										UPDATE 	test_cases_2.t_temp_31_result_test_table
										SET 	exp_reason_level = 8
											,exp_status = 'Only one instance of D4346 is allowed per claim. All others are disallowed'
										WHERE 	id = t_id
											;
									END IF; -- [8]
								ELSE
									
									SELECT 	COUNT(*) 
									INTO 	has_another_D4346_after_2_years
									FROM 	emihealth_final.`src_d4346_usage`
									WHERE 	proc_code = 'D4346'
										AND 	MID = t_mid
										AND 	(date_of_service <= DATE_SUB(t_dos,INTERVAL 730 DAY))
										;
									IF(has_another_D4346_after_2_years > 0) THEN -- [8]
										UPDATE 	test_cases_2.t_temp_31_result_test_table
										SET 	exp_reason_level = 7
											,exp_status = 'D4346 is allowed'
										WHERE 	id = t_id
											;
									ELSE
										UPDATE 	test_cases_2.t_temp_31_result_test_table
										SET 	exp_reason_level = 6
											,exp_status = 'D4346 is allowed'
										WHERE 	id = t_id
											;
									END IF;
								END IF; -- [7]
							END IF; -- [6]
						END IF; -- [5]
					END IF; -- [4]
				END IF; -- [3] 
					
			END IF; -- [2]
			
		END IF; -- [1]
		
	END LOOP ;
  CLOSE test_row_cursor ;
  
 
  
  UPDATE t_temp_31_result_test_table SET test_status=TRUE WHERE act_reason_level=exp_reason_level;
  UPDATE t_temp_31_result_test_table SET test_status=FALSE WHERE act_reason_level!=exp_reason_level;
  
  
  SELECT COUNT(*) INTO count_total_records FROM t_temp_31_result_test_table;
  SELECT COUNT(*) INTO count_defective_records FROM t_temp_31_result_test_table WHERE  act_reason_level != exp_reason_level;
	
  SET temp_count=0;
  SELECT COUNT(*) INTO temp_count FROM t_temp_31_result_test_table WHERE exp_reason_level IS NULL;
  IF(temp_count>0) THEN
	SET success=FALSE;
  ELSE
	SET success=TRUE;
	SET temp_count=0;
	SELECT COUNT(*) INTO temp_count FROM t_temp_31_result_test_table WHERE act_reason_level != exp_reason_level;
	IF(temp_count=0) THEN
		SET test_status=TRUE;
		SET test_detail=CONCAT(count_total_records,' records are tested.No ambiguous record found.');
	ELSE
		SET test_status=FALSE;
		SET test_detail=CONCAT(count_defective_records,' ambiguous records found out of ',count_total_records);
	END IF;
  END IF;
 
  
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_31_test_table_gen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_31_test_table_gen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_31_test_table_gen`(out success Bool)
BEGIN
	declare reason_percent decimal(4,2);
	DECLARE reason_total_count ,temp_count INT;
        DECLARE reason_sample_count INT;
        Declare selected_reason INT;
        Declare iterator int;
        
        drop table if exists t_temp_31_result_test_table;
	  CREATE TABLE IF NOT EXISTS test_cases_2.`t_temp_31_result_test_table` (
	  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `res_id` BIGINT(10) ZEROFILL NOT NULL,
	  `proc_code` VARCHAR(50) DEFAULT NULL,
	  `attend` varchar(20) Default Null,
	  `mid` VARCHAR(50) DEFAULT NULL,
	  `date_of_service` datetime default Null,
	  
	  `claim_id` VARCHAR(60) DEFAULT NULL,
	  
	  `act_reason_level` int(2) default Null,
	  `exp_reason_level` INT(2) DEFAULT NULL,
	  
	  `act_ryg_status` VARCHAR(30) DEFAULT NULL,
	  `exp_ryg_status` VARCHAR(30) DEFAULT NULL,
	  `act_status` VARCHAR(250) DEFAULT NULL,
	  `exp_status` VARCHAR(250) DEFAULT NULL,
	  
	  `test_status` bool Default Null,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`),
	   KEY `mid` (`mid`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1;  
        TRUNCATE TABLE t_temp_31_result_test_table;
        
        set iterator = 1;
        while(iterator < 9) Do
		SET selected_reason= iterator;
		select reason_weight INTO reason_percent FROM test_cases_2.t_global_reasons_ratio  where algo_id=23 and reason_level=selected_reason;
		SET reason_total_count=0;
		SET reason_sample_count=0;
		
		
		SELECT COUNT(*) into reason_total_count FROM  emihealth_final.`results_d4346_usage` where reason_level=selected_reason;
		
		SET reason_sample_count=(reason_total_count*reason_percent)/100;
		
		
		IF(reason_sample_count < 100) then
			set reason_sample_count= 50;
		END IF;
		
		insert into test_cases_2.t_temp_31_result_test_table 
			(res_id,proc_code,attend,mid,date_of_service ,claim_id
			,act_reason_level,act_ryg_status,act_status) 
		select  id,proc_code,attend,mid,date_of_service ,claim_id
			,reason_level,ryg_status,status
		FROM emihealth_final.results_d4346_usage 
		where reason_level=selected_reason and isactive=1 ORDER BY RAND() limit reason_sample_count;
		
		
		SET iterator = iterator + 1;
	END WHILE;
	
	SELECT COUNT(*) INTO temp_count FROM  t_temp_31_result_test_table;
	IF(temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_check_recovered_money` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_check_recovered_money` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_check_recovered_money`(in t_table_name varchar(200),out out_count bigint)
BEGIN
	if(t_table_name = 'results_third_molar')then
		
		SET @q=
		CONCAT(
			"SELECT 	COUNT(*)
			INTO @out_count
			FROM
			(
				SELECT 	
					 r.recovered_money
					 ,(CASE 
						WHEN r.status LIKE 'Down%' AND r.`ryg_status` = 'red'THEN
							IF(	(r.`paid_money` - a.avg_paid_money)>0
								,ROUND(r.`paid_money` - a.avg_paid_money,2)
								,0
							   ) 
						WHEN r.status LIKE 'Dis%' AND r.`ryg_status` = 'red'THEN
							r.`paid_money`
						ELSE
							0
					  END
					  ) AS exp_recovered_money
				FROM 	emihealth_final.",t_table_name,"  AS r
					LEFT JOIN
					emihealth_final.algos_base_code_avg_money AS a
					ON 	a.`proc_code` = 'D7210'
						AND YEAR(r.`date_of_service`) = a.`YEAR`
				HAVING  r.recovered_money != exp_recovered_money
			)AS myTab"
		       );
		     
		      PREPARE t FROM @q;
		      EXECUTE t;
		      SET out_count = @out_count;
	elseif(t_table_name = 'pic_doctor_stats_daily' or t_table_name = 'dwp_doctor_stats_daily')then
		set @q =
		concat(
			"select count(*)
			INTO @out_count
			from (
				SELECT 
					recovered_money
					,CASE
						WHEN(color_code = 'green')
						THEN
							0
						ELSE
							ROUND(income * excess_time_ratio,2)
					 END as exp_recovered_money
				FROM 	emihealth_final.",t_table_name," 
				HAVING 	recovered_money != exp_recovered_money
			     ) as myTab "
		     );	
		     PREPARE t FROM @q;
		     EXECUTE t;
		     SET out_count = @out_count;
		
	else
		set @q=
		concat(
			"SELECT 	COUNT(*)
			INTO @out_count
			FROM
			(
				SELECT 	
					 r.recovered_money
					 ,(CASE 
						WHEN r.status LIKE 'Down%' AND r.`ryg_status` = 'red'THEN
							IF(	(r.`paid_money` - a.avg_paid_money)>0
								,ROUND(r.`paid_money` - a.avg_paid_money,2)
								,0
							   ) 
						WHEN r.status LIKE 'Dis%' AND r.`ryg_status` = 'red'THEN
							r.`paid_money`
						ELSE
							0
					  END
					  ) AS exp_recovered_money
				FROM 	emihealth_final.",t_table_name,"  AS r
					LEFT JOIN
					emihealth_final.algos_base_code_avg_money AS a
					ON 	a.`proc_code` = RIGHT(r.STATUS,5)
						AND YEAR(r.`date_of_service`) = a.`YEAR`
				HAVING  r.recovered_money != exp_recovered_money
			)AS myTab"
		       );
		     
		      prepare t from @q;
		      execute t;
		      set out_count = @out_count;
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_check_table_status` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_check_table_status` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_check_table_status`()
BEGIN
	
	DECLARE finished INTEGER DEFAULT 0;
	declare t_id int default 0;
	declare t_table_name varchar(100) default 100;
	
	
	declare tab_status_cursor cursor for
				select algo_id,table_name from test_cases_2.`t_globlal_check_table_status`;
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
	
	update	t_globlal_check_table_status
	set 	table_exists = 0,
		table_populated = 0,
		total_records = 0;
		
	open tab_status_cursor;
	get_table_name: loop
				FETCH tab_status_cursor INTO  t_id, t_table_name;
				if(finished=1)then
					leave get_table_name;
				end if;	
				
				
				set  @q=concat("Select count(*),table_rows INTO @_table_exists,@_total_records FROM information_schema.tables WHERE table_schema = 'emihealth_final'",
				              " AND table_name = '",t_table_name,"' LIMIT 1 ;");	
				prepare st from @q;
				execute st;
				
				if(@_table_exists=0)then
					update	t_globlal_check_table_status
					set	table_exists = 0,
						table_populated = 0,
						total_records = 0
					where	algo_id = t_id and table_name = t_table_name;
				else
					if(@_total_records != 0)then
						UPDATE	t_globlal_check_table_status
						SET	table_exists = 1,
							table_populated = 1,
							total_records = @_total_records
						WHERE	algo_id = t_id AND table_name = t_table_name;
					else
						UPDATE	t_globlal_check_table_status
						SET	table_exists = 1,
							table_populated = 0,
							total_records = 0
						WHERE	algo_id = t_id AND table_name = t_table_name;
					end if;
				end if;
			end loop;		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_Delete_All_Temp_tables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_Delete_All_Temp_tables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_Delete_All_Temp_tables`()
BEGIN
	-- >> 00 anethesia time , fiilup time , multisite time
	DROP TABLE IF EXISTS test_cases_2.`t_temp_pic_dwp_anesthesia_mini_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_pic_dwp_ProPerf`;
	
	DROP TABLE IF EXISTS test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_temp_multisite_test_table;
	
	
	
	
	
	-- >> 1 pic
	DROP TABLE IF EXISTS test_cases_2.t_temp_pic_daily;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_01_pic_plmonthly_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_01_pic_plyearly_test_table`;
	
	DROP TABLE IF EXISTS test_cases_2.t_temp_01_pic_dbdaily_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_temp_01_pic_dbMonthly_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_temp_01_pic_dbYearly_test_table;
	
	
	
	
	
	-- >> 2 dwp
	DROP TABLE IF EXISTS test_cases_2.`t_temp_dwp_daily`;
	
	DROP TABLE IF EXISTS test_cases_2.`t_temp_dwp_daily`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_02_dwp_plmonthly_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_02_dwp_plyearly_test_table`;
	
	DROP TABLE IF EXISTS test_cases_2.`t_temp_02_dwp_dbdaily_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_02_dwp_dbMonthly_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_02_dwp_dbYearly_test_table`;
	
	
	
	
	-- >> 4 imp age
	drop table if exists test_cases_2.`t_temp_04_impAge_result_test_table`;
	
	DROP TABLE IF EXISTS test_cases_2.`t_temp_04_impAge_pldaily_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_04_impAge_plmonthly_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_04_impAge_plyearly_test_table`;
	
	DROP TABLE IF EXISTS test_cases_2.`t_temp_04_impAge_dbdaily_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_04_impAge_dbMonthly_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_04_impAge_dbYearly_test_table`;
	
	
	
	
	-- >> 7 multi doctor
	DROP TABLE IF EXISTS test_cases_2.t_temp_multidoctor_ts1_tc5;
	
	DROP TABLE IF EXISTS test_cases_2.t_07_pl_temp;
	DROP TABLE IF EXISTS test_cases_2.t_07_dashboard_temp;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_07_ts5_tc7`;
	
	DROP TABLE IF EXISTS test_cases_2.`t_temp_07_ts6_tc6`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_07_ts7_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_07_ts9_tc9`;
	
	
	-- >> 08
	DROP TABLE IF EXISTS test_cases_2.`t_temp_08_overactiveInactive_result_pp_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_08_overactiveInactive_result_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_08_overactiveInactiveAxio_mini_table_for_result`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_08_ts3_tc6`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_08_ts4_tc9`;
	
	
	
	
	-- >> 11
	DROP TABLE IF EXISTS test_cases_2.t_temp_11_primToothExt_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_11_pl_temp;
	DROP TABLE IF EXISTS test_cases_2.t_11_dashboard_temp;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_11_ts7_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_11_ts6_tc6`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_11_ts5_tc7`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_11_ts9_tc9`;
	
	
	
	
	-- >> 12
	DROP TABLE IF EXISTS test_cases_2.t_temp_thirdmolar_ts1_tc5;
	DROP TABLE IF EXISTS test_cases_2.t_12_pl_temp;
	DROP TABLE IF EXISTS test_cases_2.t_12_dashboard_temp;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_12_ts5_tc7`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_12_ts6_tc6`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_12_ts7_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_12_ts9_tc9`;
	
	
	
	
	-- >> 13
	DROP TABLE IF EXISTS test_cases_2.t_temp_13_simpleProphy4a_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_13_pl_temp;
	DROP TABLE IF EXISTS test_cases_2.t_13_dashboard_temp;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_4a_ts5_tc7`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_4a_ts6_tc6`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_13_ts7_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_4a_ts8_tc9`;
	
	
	
	
	-- >> 14
	DROP TABLE IF EXISTS test_cases_2.t_temp_4b_ts1_tc5;
	DROP TABLE IF EXISTS test_cases_2.t_temp_4b_ts2_tc7;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_4b_ts3_tc7`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_4b_ts4_tc7`;
	DROP TABLE IF EXISTS test_cases_2.t_temp_4b_ts5_tc8;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_4b_ts7_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_4b_ts9_tc9`;
	
	
	
	
	-- >> 15
	DROP TABLE IF EXISTS test_cases_2.t_temp_15_unJustFMX_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_15_pl_temp;
	DROP TABLE IF EXISTS test_cases_2.t_15_dashboard_temp;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_15_ts5_tc7`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_15_ts6_tc6`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_15_ts9_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_15_ts7_tc9`;
	
	
	
	
	
	-- >> 16
	DROP TABLE IF EXISTS test_cases_2.t_temp_16_complex_perio_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_16_pl_temp;
	DROP TABLE IF EXISTS test_cases_2.t_16_dashboard_temp;	
	DROP TABLE IF EXISTS test_cases_2.`t_temp_16_ts7_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_16_ts6_tc6`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_16_ts5_tc7`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_16_ts9_tc9`;
	
	
	
	
	
	
	-- >> 17
	DROP TABLE IF EXISTS test_cases_2.t_temp_simpCompExtCodeDist_src_table;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_17_simpCompCodeDist_test_table`;
	DROP TABLE IF EXISTS test_cases_2.t_temp_17_simpCompExtCodeDist_meansd_test_table ;
	DROP TABLE IF EXISTS test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4;
	
	drop table if exists t_temp_17_simpCompExtCodeDist_dbYearly_test_table;
	
	
	
	
	-- >> 18
	DROP TABLE IF EXISTS test_cases_2.t_temp_18_ext_upcode_procedure_performed_final;
	DROP TABLE IF EXISTS test_cases_2.t_temp_18_extUpcodeAxomatic_test_table;
	
	DROP TABLE IF EXISTS test_cases_2.t_18_pl_temp;
	drop table IF EXISTS test_cases_2.`t_18_dashboard_temp`;
	-- DROP TABLE IF EXISTS test_cases_2.t_temp_18_ts4_tc7;
	DROP TABLE IF EXISTS test_cases_2.t_temp_18_ts5_tc7;
	DROP TABLE IF EXISTS test_cases_2.t_temp_18_ts6_tc6;
	DROP TABLE IF EXISTS test_cases_2.t_temp_18_ts7_tc9;
	DROP TABLE IF EXISTS test_cases_2.t_temp_18_ts8_tc9;
	
	
	
	-- >> 19
	drop table if exists test_cases_2.`t_temp_19_overactiveInactive_result_test_table`;
	drop table if exists t_temp_19_overactInactCodeDist_dbYearly_test_table;
	
	-- >> 20
	DROP TABLE IF EXISTS`t_temp_20_adjFillingCodeDist_source_test_table`;
	drop table if exists `t_temp_20_adjFillingCodeDist_result_week_test_table`;
	
	
	-- >> 21
	DROP TABLE IF EXISTS test_cases_2.t_temp_21_overuseOfBorL_test_table;
	DROP TABLE IF EXISTS test_cases_2.`t_21_dashboard_temp`;
	DROP TABLE IF EXISTS test_cases_2.`t_21_pl_temp`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_21_ts5_tc7`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_21_ts6_tc6`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_21_ts7_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_21_ts9_tc9`;
	
	
	-- >> 22
	DROP TABLE IF EXISTS test_cases_2.t_temp_22_sealant_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_22_pl_temp;
	DROP TABLE IF EXISTS test_cases_2.t_22_dashboard_temp;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_22_ts5_tc7`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_22_ts6_tc6`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_22_ts7_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_22_ts9_tc9`;
	
	
	
	
	
	-- >> 20
	DROP TABLE IF EXISTS test_cases_2.`t_temp_20_adjFillingCodeDist_result_week_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_20_adjFillingCodeDist_source_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_20_ts7_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_20_ts8_tc9`;
	
	
	-- >> 23
	DROP TABLE IF EXISTS test_cases_2.t_temp_23_cbu_test_table;
	DROP TABLE IF EXISTS test_cases_2.`t_23_dashboard_temp`;
	DROP TABLE IF EXISTS test_cases_2.`t_23_pl_temp`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_23_ts4_tc7`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_23_ts7_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_23_ts8_tc9`;
	
	
	
	
	-- >> 24
	
	DROP TABLE IF EXISTS test_cases_2.t_temp_24_denyPulpOnAdult_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_24_pl_temp_1;
	DROP TABLE IF EXISTS test_cases_2.t_24_dashboard_temp;
	DROP TABLE IF EXISTS test_cases_2.t_temp_24_ts5_tc7;
	DROP TABLE IF EXISTS test_cases_2.t_temp_24_ts6_tc6;
	DROP TABLE IF EXISTS test_cases_2.t_temp_24_ts7_tc9;
	DROP TABLE IF EXISTS test_cases_2.t_temp_24_ts8_tc9;
	
	
	
	
	-- >> 25
	DROP TABLE IF EXISTS test_cases_2.t_temp_25_denyOtherXray_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_25_pl_temp;
	DROP TABLE IF EXISTS test_cases_2.t_25_dashboard_temp;
	DROP TABLE IF EXISTS test_cases_2.t_temp_25_ts5_tc7;
	DROP TABLE IF EXISTS test_cases_2.t_temp_25_ts6_tc6;
	DROP TABLE IF EXISTS test_cases_2.t_temp_25_ts7_tc9;
	DROP TABLE IF EXISTS test_cases_2.t_temp_25_ts8_tc9;
	
	
	
	
	-- >>26
	DROP TABLE IF EXISTS test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table;
	DROP TABLE IF EXISTS test_cases_2.t_26_pl_temp;
	DROP TABLE IF EXISTS test_cases_2.t_26_dashboard_temp;
	DROP TABLE IF EXISTS test_cases_2.t_temp_26_ts5_tc7;
	DROP TABLE IF EXISTS test_cases_2.t_temp_26_ts6_tc7;
	DROP TABLE IF EXISTS test_cases_2.t_temp_26_ts7_tc9;
	DROP TABLE IF EXISTS test_cases_2.t_temp_26_ts8_tc9;
	
	
	
	
	-- >>27
	DROP TABLE IF EXISTS test_cases_2.`t_temp_src_anesthesia_dangerous_dose`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_27_anesthesiaDangDose_test_table`;
	DROP TABLE IF EXISTS test_cases_2.`t_27_dashboard_temp`;
	DROP TABLE IF EXISTS test_cases_2.`t_27_pl_temp`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_27_ts5_tc7`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_27_ts6_tc6`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_27_ts7_tc9`;
	DROP TABLE IF EXISTS test_cases_2.`t_temp_27_ts8_tc9`;
		
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_drop_all_tables_like` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_drop_all_tables_like` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_drop_all_tables_like`(in tables_like varchar(200))
BEGIN
	-- This SP drops the tables from database[test_cases_2] on the basis of
	-- parameter[tables_like] passed with '%' sign
	declare t_table_name varchar(64) default '';
	DECLARE finished INTEGER DEFAULT 0;
	DECLARE get_table_name CURSOR FOR 
		    SELECT table_name 
		    FROM information_schema.tables
		    where table_name like tables_like
			and table_schema = 'test_cases_2';		    
	DECLARE CONTINUE HANDLER FOR NOT FOUND SET finished = 1 ;
	
	
	
	open get_table_name;
	get_table_name_loop : loop
		fetch get_table_name into t_table_name;
		
		set @q=concat(
				'DROP TABLE IF EXISTS '
				,'test_cases_2.'
				,t_table_name
			     ); 
		
		prepare stmt from @q;
		execute stmt;
		deallocate prepare stmt;
		
		IF(finished = 1)then
			leave get_table_name_loop;
		end if;
	end loop;
	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_dynamic` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_dynamic` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_dynamic`(OUT success BOOL,IN global_var_name VARCHAR(255),IN tab_name VARCHAR(255), In gen_tab_name VARCHAR(255)  )
BEGIN
	DECLARE required_rows, temp_count INT DEFAULT NULL;
	DECLARE total_counts ,res INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	
	
	SET @t0 =CONCAT ( 'SELECT COUNT(*) INTO @total_counts FROM ' ,tab_name , ' WHERE isactive=1');
	PREPARE stmt0 FROM @t0;
	EXECUTE stmt0;
	set total_counts=@total_counts;
	DEALLOCATE PREPARE stmt0;
	
	
	
	SELECT var_value INTO weightage FROM t_global_variables WHERE var_key=global_var_name;
	SET required_rows = weightage*total_counts/100;
	SET res=required_rows;
	
	
	SET @t1 =CONCAT ( 'DROP TABLE IF EXISTS ' , gen_tab_name );
	PREPARE stmt1 FROM @t1;
	EXECUTE stmt1;
	DEALLOCATE PREPARE stmt1;
	
	
	
	 SET @t2 =CONCAT (  'CREATE TABLE IF NOT EXISTS ' , gen_tab_name , '(
	   `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	  `attend` VARCHAR(250) NOT NULL,
	  `date_of_service` DATETIME NOT NULL,
	  
	  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
	  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
	  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
	  
	  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
	  
	  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
	  `expec_recovered_money` DOUBLE PRECISION(11,2) DEFAULT NULL, 
	   
	  `actual_color_code` ENUM("red","green","yellow") NOT NULL,
	  `expec_color_code` ENUM("red","green","yellow") DEFAULT NULL,
	  
	  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
	  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
	  
	  `test_status` BOOL DEFAULT NULL,
	  `test_detail` TINYTEXT DEFAULT NULL,
	   PRIMARY KEY (`id`)
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1');  
	
	PREPARE stmt2 FROM @t2;
	 EXECUTE stmt2;
	DEALLOCATE PREPARE stmt2;
	
	
	
	
	 SET @t3 =CONCAT( 'TRUNCATE TABLE ', gen_tab_name); 
	PREPARE stmt3 FROM @t3;
	 EXECUTE stmt3;
	DEALLOCATE PREPARE stmt3;
	
	
	
	
	 SET @t4 =CONCAT('INSERT INTO ' , gen_tab_name , '(attend, date_of_service, actual_procedure_count, actual_patient_count,actual_income,actual_recovered_money,actual_color_code,actual_number_of_violations)
		                SELECT attend,date_of_service,procedure_count,patient_count,income,recovered_money,color_code,number_of_violations
		FROM ' ,  tab_name , ' WHERE isactive = 1 ORDER BY date_of_service  DESC LIMIT ', required_rows) ;
	 PREPARE stmt4 FROM @t4;
	 EXECUTE stmt4;
	DEALLOCATE PREPARE stmt4;
	
	
	
	SET @t5 = CONCAT('SELECT  count(*) INTO @temp_count FROM ' ,tab_name) ;
	PREPARE stmt5 FROM @t5;
	IF(@temp_count > 0 ) THEN
		SET success=TRUE;
	ELSE 
		SET success=FALSE;
        END IF;
        
	EXECUTE stmt5;
	set temp_count=@temp_count;
	DEALLOCATE PREPARE stmt5;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_dynamic_pl_test_table_gen` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_dynamic_pl_test_table_gen` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_dynamic_pl_test_table_gen`(in table_name varchar(200), in test_table_name varchar(200), in weight_name varchar(200))
BEGIN
	DECLARE required_rows INT DEFAULT NULL;
	DECLARE weightage DECIMAL(4,2) DEFAULT 2;
	
	if table_name like '%daily%'then
		-- >>  Calculating total counts for table [table_name] into variable [@total_counts]
		set @query
		= concat ( "SELECT COUNT(*) INTO @total_counts FROM emihealth_final.",table_name," WHERE isactive='1'"
		         );
		prepare exe_query from @query;
		execute  exe_query;
		deallocate prepare exe_query;
		
		-- >> Calculating required rows into variable [required_rows] for limit sample data
		SELECT var_value INTO weightage FROM test_cases_2.t_global_variables WHERE var_key=weight_name;
		SET required_rows = weightage*@total_counts/100;
		
	        -- >> Dropping table[test_table_name] if exists
	        set @query
	        = CONCAT('DROP TABLE IF EXISTS ',test_table_name,';');
	        prepare exe_query from @query;
	        execute exe_query;
	        deallocate prepare exe_query;
	        
	        -- >> Creating Table Structure
		set @query
		= concat(
		  'CREATE TABLE IF NOT EXISTS test_cases_2.',test_table_name,"(
		  `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
		  `attend` VARCHAR(250) NOT NULL,
		  `date_of_service` DATETIME NOT NULL,
		  
		  `actual_procedure_count` INT(6) ZEROFILL NOT NULL,
		  `expec_procedure_count` INT(6) ZEROFILL DEFAULT NULL,
		  
		  `actual_patient_count` INT(6)ZEROFILL NOT NULL,
		  `expec_patient_count` INT(6) ZEROFILL DEFAULT NULL,
		  
		  `actual_income` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
		  `expec_income` DOUBLE PRECISION (11,2) ZEROFILL DEFAULT NULL,
		  
		  `actual_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  NOT NULL,
		  `expec_recovered_money` DOUBLE PRECISION(11,2) ZEROFILL  DEFAULT NULL, 
		   
		  `actual_color_code` ENUM('red','green','yellow') NOT NULL,
		  `expec_color_code` ENUM('red','green','yellow') DEFAULT NULL,
		  
		  `actual_number_of_violations`INT(6) ZEROFILL NOT NULL,
		  `expec_number_of_violations`INT(6) ZEROFILL DEFAULT NULL,
		  
		  `test_status` BOOL DEFAULT NULL,
		  `test_detail` TINYTEXT DEFAULT NULL,
		   PRIMARY KEY (`id`)
		) ENGINE=MYISAM DEFAULT CHARSET=latin1;" 
		); 
		PREPARE exe_query FROM @query;
		EXECUTE exe_query;
		DEALLOCATE PREPARE exe_query;
		
		-- >> Truncating table[test_table_name]
		set @query
		= concat('TRUNCATE TABLE test_cases_2.',test_table_name);
		PREPARE exe_query FROM @query;
		execute exe_query;
		deallocate prepare exe_query;
		
		-- >> 
		set @query
		= concat("INSERT INTO test_cases_2.",test_table_name,
			        "(attend, 
				date_of_service, 
				actual_procedure_count, 
				actual_patient_count,
				actual_income,
				actual_recovered_money,
				actual_color_code,
				actual_number_of_violations)
			 SELECT attend,
				date_of_service,
				procedure_count,
				patient_count,
				income,
				recovered_money,
				color_code,
				number_of_violations
			FROM emihealth_final.",table_name,"
			WHERE isactive=1 ORDER BY date_of_service DESC LIMIT ", required_rows
			);
		prepare exe_query from @query;
		execute exe_query;
		deallocate prepare exe_query;
		
	end if;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_generate_csvs_for_all_tables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_generate_csvs_for_all_tables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_generate_csvs_for_all_tables`()
BEGIN
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_pic_dwp_anesthesia_ByPatient_test_table');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_pic_dwp_fillup_ByPatient_test_table');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_multisite_test_table');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_pic_daily');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_dwp_daily');
	
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_multidoctor_ts1_tc5');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_07_pl_temp');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_07_dashboard_temp');
	
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_11_primToothExt_test_table');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_11_pl_temp');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_11_dashboard_temp');
	
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_thirdmolar_ts1_tc5');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_12_pl_temp');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_12_dashboard_temp');
	
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_13_simpleProphy4a_test_table');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_13_pl_temp');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_13_dashboard_temp');
	
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_4b_ts1_tc5');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_4b_ts2_tc7');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_4b_ts5_tc8');
	
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_15_unJustFMX_test_table');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_15_pl_temp');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_15_dashboard_temp');
	
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_16_complex_perio_test_table');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_16_pl_temp');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_16_dashboard_temp');
	
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_22_sealant_test_table');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_22_pl_temp');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_22_dashboard_temp');
	
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_24_denyPulpOnAdult_test_table');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_24_pl_temp_1');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_24_dashboard_temp');
	
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_25_denyOtherXray_test_table');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_25_pl_temp');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_25_dashboard_temp');
	
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_temp_26_denyPulpOnAdultEndo_test_table');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_26_pl_temp');
	CALL test_cases_2.`t_generate_csv_from_table_name_fn`('t_26_dashboard_temp');
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_generate_csv_from_table_name_fn` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_generate_csv_from_table_name_fn` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_generate_csv_from_table_name_fn`()
BEGIN
	CALL test_cases_2.t_generate_csv_from_table_name_fn('t_temp_pic_dwp_anesthesia_ByPatient_test_table');
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_pic_dwp_anesthesia_mini_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_pic_dwp_ProPerf');
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_multisite_test_table');
	
	
	
	
	
	-- >> 1 pic
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_pic_daily');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_01_pic_plmonthly_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_01_pic_plyearly_test_table');
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_01_pic_dbdaily_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_01_pic_dbMonthly_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_01_pic_dbYearly_test_table');
	
	
	
	
	
	-- >> 2 dwp
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_dwp_daily');
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_dwp_daily');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_02_dwp_plmonthly_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_02_dwp_plyearly_test_table');
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_02_dwp_dbdaily_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_02_dwp_dbMonthly_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_02_dwp_dbYearly_test_table');
	
	
	
	
	-- >> 4 imp age
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_04_impAge_result_test_table');
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_04_impAge_pldaily_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_04_impAge_plmonthly_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_04_impAge_plyearly_test_table');
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_04_impAge_dbdaily_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_04_impAge_dbMonthly_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_04_impAge_dbYearly_test_table');
	
	
	
	
	-- >> 7 multi doctor
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_multidoctor_ts1_tc5');
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_07_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_07_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_07_ts5_tc7');
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_07_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_07_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_07_ts9_tc9');
	
	
	-- >> 08
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_08_overactiveInactive_result_pp_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_08_overactiveInactive_result_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_08_overactiveInactiveAxio_mini_table_for_result');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_08_ts3_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_08_ts4_tc9');
	
	
	
	
	-- >> 11
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_11_primToothExt_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_11_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_11_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_11_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_11_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_11_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_11_ts9_tc9');
	
	
	
	
	-- >> 12
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_thirdmolar_ts1_tc5');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_12_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_12_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_12_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_12_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_12_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_12_ts9_tc9');
	
	
	
	
	-- >> 13
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_13_simpleProphy4a_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_13_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_13_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_4a_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_4a_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_13_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_4a_ts8_tc9');
	
	
	
	
	-- >> 14
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_4b_ts1_tc5');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_4b_ts2_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_4b_ts3_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_4b_ts4_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_4b_ts5_tc8');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_4b_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_4b_ts9_tc9');
	
	
	
	
	-- >> 15
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_15_unJustFMX_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_15_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_15_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_15_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_15_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_15_ts9_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_15_ts7_tc9');
	
	
	
	
	
	-- >> 16
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_16_complex_perio_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_16_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_16_dashboard_temp');	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_16_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_16_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_16_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_16_ts9_tc9');
	
	
	
	
	
	
	-- >> 17
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_simpCompExtCodeDist_src_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_17_simpCompCodeDist_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_17_simpCompExtCodeDist_meansd_test_table ');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_17_simpCompExtCodeDist_test_table_4');
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('t_temp_17_simpCompExtCodeDist_dbYearly_test_table');
	
	
	
	
	-- >> 18
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_18_ext_upcode_procedure_performed_final');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_18_extUpcodeAxomatic_test_table');
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_18_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_18_dashboard_temp');
	-- CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_18_ts4_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_18_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_18_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_18_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_18_ts8_tc9');
	
	
	
	-- >> 19
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_19_overactiveInactive_result_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('t_temp_19_overactInactCodeDist_dbYearly_test_table');
	
	-- >> 20
	CALL test_cases_2.t_generate_csv_from_table_name_fn('t_temp_20_adjFillingCodeDist_source_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('t_temp_20_adjFillingCodeDist_result_week_test_table');
	
	
	-- >> 21
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_21_overuseOfBorL_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_21_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_21_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_21_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_21_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_21_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_21_ts9_tc9');
	
	
	-- >> 22
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_22_sealant_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_22_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_22_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_22_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_22_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_22_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_22_ts9_tc9');
	
	
	
	
	
	-- >> 20
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_20_adjFillingCodeDist_result_week_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_20_adjFillingCodeDist_source_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_20_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_20_ts8_tc9');
	
	
	-- >> 23
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_23_cbu_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_23_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_23_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_23_ts4_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_23_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_23_ts8_tc9');
	
	
	
	
	-- >> 24
	
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_24_denyPulpOnAdult_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_24_pl_temp_1');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_24_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_24_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_24_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_24_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_24_ts8_tc9');
	
	
	
	
	-- >> 25
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_25_denyOtherXray_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_25_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_25_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_25_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_25_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_25_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_25_ts8_tc9');
	
	
	
	
	-- >>26
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_26_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_26_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_26_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_26_ts6_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_26_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_26_ts8_tc9');
	
	
	
	
	-- >>27
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_src_anesthesia_dangerous_dose');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_27_anesthesiaDangDose_test_table');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_27_dashboard_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_27_pl_temp');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_27_ts5_tc7');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_27_ts6_tc6');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_27_ts7_tc9');
	CALL test_cases_2.t_generate_csv_from_table_name_fn('test_cases_2.t_temp_27_ts8_tc9');
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_generate_reportNsummary_table_schema` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_generate_reportNsummary_table_schema` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_generate_reportNsummary_table_schema`()
BEGIN
	DROP TABLE IF EXISTS t_report;
	CREATE TABLE t_report
	(
		id INT(3) NOT NULL AUTO_INCREMENT,
		algo_id INT(2) ZEROFILL DEFAULT 00,
		
		test_case_name tinytext default null,
		test_case_sp_name TINYTEXT DEFAULT NULL,
		test_case_status INT(1) DEFAULT 0,
		test_case_detail tinytext default null, 
		execution_time time default null,
		
		PRIMARY KEY (id)
	);
	
	/*
	DROP TABLE IF EXISTS t_report_result;
	CREATE TABLE t_report_result
	(
		id INT(3) NOT NULL AUTO_INCREMENT,
		algo_id INT(2) ZEROFILL DEFAULT 00,
		test_case_name TINYTEXT DEFAULT NULL,
		test_case_status INT(1) DEFAULT 0,
		test_case_detail TINYTEXT DEFAULT NULL, 
		execution_time TIME DEFAULT NULL,
		PRIMARY KEY (id)
	);
	*/
	/*
	DROP TABLE IF EXISTS t_report_plstats;
	CREATE TABLE t_report_plstats
	(
		id INT(3) NOT NULL AUTO_INCREMENT,
		algo_id INT(2) ZEROFILL DEFAULT 00,
		test_case_name TINYTEXT DEFAULT NULL,
		test_case_status INT(1) DEFAULT 0,
		test_case_detail TINYTEXT DEFAULT NULL, 
		execution_time TIME DEFAULT NULL,
		PRIMARY KEY (id)
	);
	*/
	
	/*
	DROP TABLE IF EXISTS t_report_dbstats;
	CREATE TABLE t_report_dbstats
	(
		id INT(3) NOT NULL AUTO_INCREMENT,
		algo_id INT(2) ZEROFILL DEFAULT 00,
		test_case_name TINYTEXT DEFAULT NULL,
		test_case_status INT(1) DEFAULT 0,
		test_case_detail TINYTEXT DEFAULT NULL, 
		execution_time TIME DEFAULT NULL,
		PRIMARY KEY (id)
	);
	*/
	
	-- -----------------------
	
	DROP TABLE IF EXISTS t_summary;
	
	
	CREATE TABLE t_summary
		(
		id INT(3) NOT NULL AUTO_INCREMENT,
		algo_id INT(2) ZEROFILL DEFAULT 00,
		algo_name VARCHAR(100) DEFAULT 'No Name',
		total_test_cases_2 INT(2) ZEROFILL DEFAULT 00,
		passed_test_cases_2 INT(2) ZEROFILL DEFAULT 00,
		failed_test_cases_2 INT(2) ZEROFILL DEFAULT 00,
		total_execution_time TIME DEFAULT NULL,
		PRIMARY KEY(id)	
		);
	INSERT INTO test_cases_2.t_summary(algo_id,algo_name) SELECT algo_id,NAME FROM emihealth_final.algos_db_info;
	
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_generate_summary_file` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_generate_summary_file` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_generate_summary_file`()
BEGIN
	-- DECLARE css,summary_start,summary_rows_header,summary_end TEXT;
	SET @css="<style>pre {font-size : 115%;} </style>";
	SET @summary_start=CONCAT("<pre><b>Summary Of All Test Cases</b>\rTime      : ",CURRENT_TIMESTAMP(),"\r\r");
	SET @summary_rows_header=CONCAT('<b>Algo_ID</b>','   ','<b>Total_test_cases_2</b>','   ','<b>Passed_test_cases_2</b>','   ','<b>Failed_test_cases_2</b>','  ','<b>Execution_Time</b>','  ','<b>Algo_Name</b>');
	SET @summary_end='</pre>';
	
	select var_value into @file_path from t_global_variables where var_key ='output_files_path';
	SET @file_path_full=CONCAT("'",@file_path,"summary-",DATE_FORMAT(CURRENT_TIMESTAMP(), '%d-%b-%Y_%T'),".html'");
	set @file_path_full=REPLACE(@file_path_full, ":", "-");
	
	
  set @q=concat("SELECT @css
	UNION
	SELECT @summary_start
	UNION
	SELECT @summary_rows_header 
	UNION                                                                                                                                                     
	SELECT CONCAT('   ',algo_id,'            ',total_test_cases_2,'                  ',passed_test_cases_2,'                  ',failed_test_cases_2,'            ',total_execution_time,'     ',algo_name) FROM test_cases_2.t_summary  WHERE total_test_cases_2 != 0
	UNION
	SELECT @summary_end
	INTO OUTFILE ",@file_path_full);
	
	PREPARE stmt FROM @q;
	EXECUTE stmt;
	
	deallocate prepare stmt;
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_INITIATE_ALL_TCS` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_INITIATE_ALL_TCS` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_INITIATE_ALL_TCS`(in reasons_tab_weight double, in variables_tab_weight double)
BEGIN
	/*
	-- -------------------------------------------------------------------------------------------
	-- SETTING WEIFHTS IN [test_cases_2.t_global_reasons_ratio] AND [test_cases_2.t_global_variables]
	-- -------------------------------------------------------------------------------------------
	call `t_update_weight_global_reasonsNvariables_tables`(reasons_tab_weight,variables_tab_weight);
	
	
	-- -------------------------------------------------------------------------------------------
	-- GENERATING REPORT AND SUMMARY TABLES SCHEMA 
	-- -------------------------------------------------------------------------------------------
	CALL `t_generate_reportNsummary_table_schema`();
	
	-- -------------------------------------------------------------------------------------------
	-- CALLING SMOKE TEST CASES
	-- -------------------------------------------------------------------------------------------
	
	-- -------------------------------------------------------------------------------------------
	-- CALLING MAIN TEST CASES
	-- -------------------------------------------------------------------------------------------
	CALL `t_01_pic_MAIN`();
	CALL `t_02_dwp_MAIN`();
	
	CALL `t_07_multidoctor_MAIN`();
	*/
	CALL `t_11_primToothExt_MAIN`();
	CALL `t_12_thirdmolar_MAIN`();
	CALL `t_13_simpleProphy4a_MAIN`();
	CALL `t_14_simpleProphy4b_MAIN`();
	CALL `t_15_unJustFMX_MAIN`();
	CALL `t_16_complexPerio_MAIN`();
	CALL `t_17_simpCompExtCodeDist_MAIN`();
	CALL `t_18_extUpcodeAxomatic_MAIN`();
	CALL `t_19_overactInactCodeDist_MAIN`();
	CALL `t_20_adjFillingCodeDist_MAIN`();
	CALL `t_21_overuseOfBorL_MAIN`();
	CALL `t_22_sealantInsteadOfFill_MAIN`();
	CALL `t_23_cbu_MAIN`();
	CALL `t_24_denyPulpOnAdult_MAIN`();
	CALL `t_25_denyOtherXray_MAIN`();
	CALL `t_26_denyPulpOnAdultEndo_MAIN`();
	CALL `t_27_anesthesiaDangDose_MAIN`();
	
	
	CALL `t_04_impAge_MAIN`();
	CALL `t_08_overactiveInactiveAxio_MAIN`();
	
	-- ------------------------------------------------------------------------------------
	-- POPULATING [t_summary table] FROM [t_report table]
	-- ------------------------------------------------------------------------------------
	CALL test_cases_2.`t_make_summaryTable_from_reportTable`();
	
	
	-- ------------------------------------------------------------------------------------
	-- GENERATING  SUMMARY FILE FROM [t_summary table]
	-- ------------------------------------------------------------------------------------
	-- call `t_generate_summary_file`();
	
	-- ------------------------------------------------------------------------------------
	-- GENERATING CSV FILES 
	-- ------------------------------------------------------------------------------------
	-- call `t_generate_csvs_for_all_tables`();
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_INITIATE_ALL_TCS_RESULT` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_INITIATE_ALL_TCS_RESULT` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_INITIATE_ALL_TCS_RESULT`(IN reasons_tab_weight DOUBLE, IN variables_tab_weight DOUBLE)
BEGIN
	/*
	-- -------------------------------------------------------------------------------------------
	-- SETTING WEIFHTS IN [test_cases_2.t_global_reasons_ratio] AND [test_cases_2.t_global_variables]
	-- -------------------------------------------------------------------------------------------
	CALL `t_update_weight_global_reasonsNvariables_tables`(reasons_tab_weight,variables_tab_weight);
	
	
	-- -------------------------------------------------------------------------------------------
	-- GENERATING REPORT AND SUMMARY TABLES SCHEMA 
	-- -------------------------------------------------------------------------------------------
	CALL `t_generate_reportNsummary_table_schema`();
	
	-- -------------------------------------------------------------------------------------------
	-- CALLING MAIN TEST CASES
	-- -------------------------------------------------------------------------------------------
	call `t_00_pic_dwp_MAIN`();
	call `t_04_impAge_TS2_RESULT_TABLE`();
	call `t_07_multidoctor_TS2_RESULT_TABLE`();
	
	call `t_11_primToothExt_TS2_RESULT_TABLE`();
	call `t_12_thirdmolar_TS2_RESULT_TABLE`();
	call `t_13_simpleProphy4a_TS2_RESULT_TABLE`();
	call `t_14_simpleProphy4b_TS1_RESULT_TABLE`();
	call `t_15_unJustFMX_TS2_RESULT_TABLE`();
	call `t_16_complexPerio_TS2_RESULT_TABLE`();
	call `t_17_simpCompExtCodeDist_RESULT_TABLE`();
	call `t_18_extUpcodeAxomatic_TS2_RESULT_TABLE`();
	*/
	CALL `t_19_overactInactCodeDist_TS2_RESULT_TABLE`();
	CALL `t_20_adjFillingCodeDist_TS2_RESULT_TABLE`();
	CALL `t_21_overuseOfBorL_TS2_RESULT_TABLE`();
	CALL `t_22_sealantInsteadOfFill_TS2_RESULT_TABLE`();
	CALL `t_23_cbu_TS2_RESULT_TABLE`();
	CALL `t_24_denyPulpOnAdult_TS2_RESULT_TABLE`();
	CALL `t_25_denyOtherXray_TS2_RESULT_TABLE`();
	CALL `t_26_denyPulpOnAdultEndo_TS2_RESULT_TABLE`();
	CALL `t_27_anesthesiaDangDose_TS2_RESULT_TABLE`();
	
	CALL `t_08_overactiveInactiveAxio_TS2_RESULT_TABLE`();
	
	-- ------------------------------------------------------------------------------------
	-- POPULATING [t_summary table] FROM [t_report table]
	-- ------------------------------------------------------------------------------------
	CALL test_cases_2.`t_make_summaryTable_from_reportTable`();
	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_INITIATE_TEST_TAB_GEN_TCS_DBSTATS` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_INITIATE_TEST_TAB_GEN_TCS_DBSTATS` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_INITIATE_TEST_TAB_GEN_TCS_DBSTATS`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	DROP TABLE IF EXISTS t_report_dbstats;
	CREATE TABLE t_report_dbstats
	(
		id INT(3) NOT NULL AUTO_INCREMENT,
		algo_id INT(2) ZEROFILL DEFAULT 00,
		test_case_name TINYTEXT DEFAULT NULL,
        test_case_sp_name TINYTEXT DEFAULT NULL,
		test_case_status INT(1) DEFAULT 0,
		test_case_detail TINYTEXT DEFAULT NULL, 
		execution_time TIME DEFAULT NULL,
		PRIMARY KEY (id)
	);
	
	
##################################### 	ALGO NO. 1        #############################################
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts6_tc1A_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_01_pic_ts6_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(01,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_07_dashboard_temp]'
    ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_01_pic_ts6_tc1A_dashboardTestTable /t_01_pic_ts6_tc1B_dashboardDailyValidation ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts7_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_01_pic_ts7_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(01
		,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_01_pic_dbMonthly_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_01_pic_ts7_tc1A_testTableGen /t_01_pic_ts7_tc1B_columnValidation ');
        
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts8_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_01_pic_ts8_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_01_pic_dbYearly_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_01_pic_ts8_tc1A_testTableGen / t_01_pic_ts8_tc1B_columnValidation'
		);
		
##################################### 	ALGO NO. 2        #############################################
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts6_tc1A_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_02_dwp_ts6_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(02,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_temp_02_dwp_dbdaily_test_table]'
    ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_02_dwp_ts6_tc1A_dashboardTestTable / t_02_dwp_ts6_tc1B_dashboardDailyValidation');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts7_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_02_dwp_ts7_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(02
		,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_02_dwp_dbMonthly_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_02_dwp_ts7_tc1A_testTableGen / t_02_dwp_ts7_tc1B_columnValidation');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts8_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_02_dwp_ts8_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(02,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_04_impAge_dbYearly_test_table]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_02_dwp_ts8_tc1A_testTableGen / t_02_dwp_ts8_tc1B_columnValidation');
	
	
	
	##################################### 	ALGO NO. 4       #############################################
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts6_tc1A_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_04_impAge_ts6_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(04,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_temp_04_impAge_dbdaily_test_table]'
    ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_04_impAge_ts6_tc1A_dashboardTestTable / t_04_impAge_ts6_tc1B_dashboardDailyValidation ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts7_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts7_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(04
		,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_04_impAge_dbMonthly_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_04_impAge_ts7_tc1A_testTableGen / t_04_impAge_ts7_tc1B_columnValidation ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts8_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts8_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(04,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_02_dwp_dbYearly_test_table]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_04_impAge_ts8_tc1A_testTableGen / t_04_impAge_ts8_tc1B_columnValidation');
	##################################### 	ALGO NO. 7       #############################################
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(07,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_07_dashboard_temp]',tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
    ,'t_report_dbstats',' t_07_multidoctor_ts4_tc2_dashboardTestTable/t_07_multidoctor_ts4_tc1_dashboardDailyValidation ');
    
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(07,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_07_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_07_multidoctor_ts7_tc9A_testTableGen / t_07_multidoctor_ts7_tc9B_columnValidation ');	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(07,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_07_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_07_multidoctor_ts9_tc9A_testTableGen / t_07_multidoctor_ts9_tc9B_columnValidation ');
	##################################### 	ALGO NO. 8       #############################################
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts4_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts4_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(08,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_08_ts4_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_08_overactiveInactiveAxio_ts4_tc9A_testTableGen / t_08_overactiveInactiveAxio_ts4_tc9B_columnValidation');
	##################################### 	ALGO NO.  11       #############################################
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(11,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_11_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_11_primToothExt_ts4_tc2_dashboardTestTable / t_11_primToothExt_ts4_tc1_dashboardDailyValidation');
					
					
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(11,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_11_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_11_primToothExt_ts7_tc9A_testTableGen / t_11_primToothExt_ts7_tc9B_columnValidation');
					
					
					
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(11,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_11_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_11_primToothExt_ts9_tc9A_testTableGen / t_11_primToothExt_ts9_tc9B_columnValidation');				
	##################################### 	ALGO NO.  12       #############################################
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(12,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_12_dashboard_temp]'
    ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_12_thirdmolar_ts4_tc2_dashboardTestTable / t_12_thirdmolar_ts4_tc1_dashboardDailyValidation');
	
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(12,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_temp_12_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats',' / ');
					
					
					
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(12,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_temp_12_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_12_thirdmolar_ts9_tc9A_testTableGen / t_12_thirdmolar_ts9_tc9B_columnValidation');				
			
			
			
	##################################### 	ALGO NO.  13       #############################################
	
		
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(13,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_13_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_13_simpleProphy4a_ts4_tc2_dashboardTestTable / t_13_simpleProphy4a_ts4_tc1_dashboardDailyValidation');
	
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_TS7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_TS7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(13,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_4a_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_13_simpleProphy4a_TS7_tc9A_testTableGen / t_13_simpleProphy4a_TS7_tc9B_columnValidation');	
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_TS8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_TS8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(13,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_4a_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_13_simpleProphy4a_TS8_tc9A_testTableGen / t_13_simpleProphy4a_TS8_tc9B_columnValidation');
				
				
				
	##################################### 	ALGO NO.  14       #############################################
			
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts5_tc8A_testTableGen`(@suc);
	CALL test_cases_2.`t_14_simpleProphy4b_ts5_tc8B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(14,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_temp_4b_ts5_tc8]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_14_simpleProphy4b_ts5_tc8A_testTableGen / t_14_simpleProphy4b_ts5_tc8B_columnValidation');		
					
					
					
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_14_simpleProphy4b_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(14,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_4b_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_14_simpleProphy4b_ts7_tc9A_testTableGen / t_14_simpleProphy4b_ts7_tc9B_columnValidation');			
					
					
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_14_simpleProphy4b_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(14,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_4b_ts9_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_14_simpleProphy4b_ts9_tc9A_testTableGen / t_14_simpleProphy4b_ts9_tc9B_columnValidation');				
					
		##################################### 	ALGO NO.  15       #############################################
				
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_15_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_15_unJustFMX_ts4_tc2_dashboardTestTable / t_15_unJustFMX_ts4_tc1_dashboardDailyValidation');				
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_15_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats',' t_15_unJustFMX_ts7_tc9A_testTableGen / t_15_unJustFMX_ts7_tc9B_columnValidation');	
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_15_ts9_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats',' t_15_unJustFMX_ts9_tc9A_testTableGen/ t_15_unJustFMX_ts9_tc9B_columnValidation');
					
	##################################### 	ALGO NO.  16       #############################################
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_16_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_16_complexPerio_ts4_tc2_dashboardTestTable / t_16_complexPerio_ts4_tc1_dashboardDailyValidation');							
									
								
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_16_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_16_complexPerio_ts7_tc9A_testTableGen / t_16_complexPerio_ts7_tc9B_columnValidation');								
									
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_16_ts9_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_16_complexPerio_ts9_tc9A_testTableGen / t_16_complexPerio_ts9_tc9B_columnValidation');		
					
					
	##################################### 	ALGO NO.  17      #############################################
					
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_ts8_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_17_simpCompExtCodeDist_ts8_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_17_simpCompExtCodeDist_dbYearly_test_table]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_17_simpCompExtCodeDist_ts8_tc1A_testTableGen / t_17_simpCompExtCodeDist_ts8_tc1B_columnValidation');
					
					
	##################################### 	ALGO NO.  18      #############################################
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_18_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_18_extUpcodeAxomatic_ts4_tc2_dashboardTestTable / t_18_extUpcodeAxomatic_ts4_tc1_dashboardDailyValidation');
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_18_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_18_extUpcodeAxomatic_ts7_tc9A_testTableGen / t_18_extUpcodeAxomatic_ts7_tc9B_columnValidation');					
					
		
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_18_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_18_extUpcodeAxomatic_ts8_tc9A_testTableGen / t_18_extUpcodeAxomatic_ts8_tc9B_columnValidation');			
					
					
					
		##################################### 	ALGO NO.  19    #############################################
					
	SET start_time = NOW();
	CALL test_cases_2.`t_19_overactInactCodeDist_ts8_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_19_overactInactCodeDist_ts8_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(19,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_19_overactInactCodeDist_dbYearly_test_table]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_19_overactInactCodeDist_ts8_tc1A_testTableGen / t_19_overactInactCodeDist_ts8_tc1B_columnValidation');
		
		
		
		
		##################################### 	ALGO NO.  20    #############################################
			
		
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_20_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_20_adjFillingCodeDist_ts7_tc9A_testTableGen / t_20_adjFillingCodeDist_ts7_tc9B_columnValidation');	
			
					
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_20_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_20_adjFillingCodeDist_ts8_tc9A_testTableGen / t_20_adjFillingCodeDist_ts8_tc9B_columnValidation');				
					
		##################################### 	ALGO NO.  21    #############################################
			
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_21_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_21_overuseOfBorL_ts4_tc2_dashboardTestTable / t_21_overuseOfBorL_ts4_tc1_dashboardDailyValidation');
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_21_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats',' t_21_overuseOfBorL_ts7_tc9A_testTableGen/t_21_overuseOfBorL_ts7_tc9B_columnValidation ');
	
	
			
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_21_ts9_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_21_overuseOfBorL_ts9_tc9A_testTableGen / t_21_overuseOfBorL_ts9_tc9B_columnValidation');		
					
					
		##################################### 	ALGO NO.  22    #############################################
					
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_22_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_22_sealantInsteadOfFill_ts4_tc2_dashboardTestTable / t_22_sealantInsteadOfFill_ts4_tc1_dashboardDailyValidation');		
		
				
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_22_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats',' t_22_sealantInsteadOfFill_ts7_tc9A_testTableGen/t_22_sealantInsteadOfFill_ts7_tc9B_columnValidation ');				
					
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts9_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts9_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_22_ts9_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_22_sealantInsteadOfFill_ts9_tc9A_testTableGen / t_22_sealantInsteadOfFill_ts9_tc9B_columnValidation');	
					
					
						
		##################################### 	ALGO NO.  23    #############################################
						
			
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_23_cbu_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_23_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats',' t_23_cbu_ts4_tc2_dashboardTestTable/t_23_cbu_ts4_tc1_dashboardDailyValidation ');
							
		
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_23_cbu_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_23_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_23_cbu_ts7_tc9A_testTableGen /t_23_cbu_ts7_tc9B_columnValidation ');
					
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_23_cbu_ts8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_23_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_23_cbu_ts8_tc9A_testTableGen / t_23_cbu_ts8_tc9B_columnValidation');											
	
	
	
	##################################### 	ALGO NO.  24    #############################################
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts4_tc1A_dashboardTestTable`(@a);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts4_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,
	    'Verifying Dashboard daily stats table[emihealth_final.dashboard_daily_results] using test table[test_cases_2.t_24_dashboard_temp]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_24_denyPulpOnAdult_ts4_tc1A_dashboardTestTable / t_24_denyPulpOnAdult_ts4_tc1B_dashboardDailyValidation');
	     
	     
	     
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_24_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_24_denyPulpOnAdult_ts7_tc9A_testTableGen / t_24_denyPulpOnAdult_ts7_tc9B_columnValidation');
					
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_TS8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_24_denyPulpOnAdult_TS8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_24_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_24_denyPulpOnAdult_TS8_tc9A_testTableGen / t_24_denyPulpOnAdult_TS8_tc9B_columnValidation');				
					
					
		##################################### 	ALGO NO.  25    #############################################
	
		      
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts4_tc1A_dashboardTestTable`(@a);
	CALL test_cases_2.`t_25_denyOtherXray_ts4_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,
	    'Verifying Dashboard table[emihealth_final.dashboard_daily_results] using test table[test_cases_2.t_25_dashboard_temp]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_25_denyOtherXray_ts4_tc1A_dashboardTestTable / t_25_denyOtherXray_ts4_tc1B_dashboardDailyValidation');
	     
	     
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_TS7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_25_denyOtherXray_TS7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_25_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_25_denyOtherXray_TS7_tc9A_testTableGen / t_25_denyOtherXray_TS7_tc9B_columnValidation');     
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_TS8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_25_denyOtherXray_TS8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_25_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_25_denyOtherXray_TS8_tc9B_columnValidation /t_25_denyOtherXray_TS8_tc9B_columnValidation ');
	
	
	##################################### 	ALGO NO.  26    #############################################
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts4_tc1A_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts4_tc1B_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,
	    'Verifying db daily table[emihealth_final.dashboard_daily_results] using test table[test_cases_2.t_26_dashboard_temp]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_26_denyPulpOnAdultEndo_ts4_tc1A_dashboardTestTable / t_26_denyPulpOnAdultEndo_ts4_tc1B_dashboardDailyValidation');
	     
	     
	  SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_26_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_26_denyPulpOnAdultEndo_ts7_tc9A_testTableGen / t_26_denyPulpOnAdultEndo_ts7_tc9B_columnValidation');
											
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_26_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_26_denyPulpOnAdultEndo_ts8_tc9A_testTableGen / t_26_denyPulpOnAdultEndo_ts8_tc9B_columnValidation');								
	
	
	
		##################################### 	ALGO NO.  27    #############################################
	
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts4_tc2_dashboardTestTable`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts4_tc1_dashboardDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.dashboard_daily_results] by generating test table[test_cases_2.t_27_dashboard_temp]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_27_anesthesiaDangDose_ts4_tc2_dashboardTestTable / t_27_anesthesiaDangDose_ts4_tc1_dashboardDailyValidation');
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_TS7_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_TS7_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.dashboard_monthly_results] by generating test table[test_cases_2.t_temp_27_ts7_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats',' t_27_anesthesiaDangDose_TS7_tc9A_testTableGen/ t_27_anesthesiaDangDose_TS7_tc9B_columnValidation');		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts8_tc9A_testTableGen`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts8_tc9B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.dashboard_yearly_results] by generating test table[test_cases_2.t_temp_4a_ts8_tc9]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_dbstats','t_27_anesthesiaDangDose_ts8_tc9A_testTableGen / t_27_anesthesiaDangDose_ts8_tc9B_columnValidation');											
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_INITIATE_TEST_TAB_GEN_TCS_PLSTATS` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_INITIATE_TEST_TAB_GEN_TCS_PLSTATS` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_INITIATE_TEST_TAB_GEN_TCS_PLSTATS`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	
	
	
	DROP TABLE IF EXISTS t_report_plstats;
	CREATE TABLE t_report_plstats (
    id INT(3) NOT NULL AUTO_INCREMENT,
    algo_id INT(2) ZEROFILL DEFAULT 00,
    test_case_name TINYTEXT DEFAULT NULL,
    test_case_sp_name TINYTEXT DEFAULT NULL,
    test_case_status INT(1) DEFAULT 0,
    test_case_detail TINYTEXT DEFAULT NULL,
    execution_time TIME DEFAULT NULL,
    PRIMARY KEY (id)
);
	
	######################################	ALOG NO. 1	################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts3_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_01_pic_ts3_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
		01
		,'Verifying table[emihealth_final.pic_doctor_stats_daily] by generating test table[test_cases_2.t_temp_pic_daily]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
		,'t_report_plstats','t_01_pic_ts3_tc1A_testTableGen / t_01_pic_ts3_tc1B_columnValidation '
		);
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts4_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_01_pic_ts4_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying table[emihealth_final.pic_doctor_stats_monthly] by generating test table[test_cases_2.t_temp_01_pic_plmonthly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report_plstats','t_01_pic_ts4_tc1A_testTableGen /t_01_pic_ts4_tc1B_columnValidation '
		);
		
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_01_pic_ts5_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_01_pic_ts5_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			01
			,'Verifying table[emihealth_final.pic_doctor_stats_yearly] by generating test table[test_cases_2.t_temp_01_pic_plyearly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time)
			,'t_report_plstats','t_01_pic_ts5_tc1A_testTableGen / t_01_pic_ts5_tc1B_columnValidation'
		);
		
		
		
	######################################	ALOG NO. 2	################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts3_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_02_dwp_ts3_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		02
		,'Verifying table[emihealth_final.dwp_doctor_stats_daily] by generating test table[test_cases_2.t_temp_dwp_daily]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_02_dwp_ts3_tc1A_testTableGen /t_02_dwp_ts3_tc1B_columnValidation '
	);
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts4_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_02_dwp_ts4_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying table[emihealth_final.dwp_doctor_stats_monthly] by generating test table[test_cases_2.t_temp_02_dwp_plmonthly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_02_dwp_ts4_tc1A_testTableGen /t_02_dwp_ts4_tc1B_columnValidation '
		);
		
	
		
	SET start_time = NOW();
	CALL test_cases_2.`t_02_dwp_ts5_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_02_dwp_ts5_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			02
			,'Verifying table[emihealth_final.dwp_doctor_stats_yearly] by generating test table[test_cases_2.t_temp_02_dwp_plyearly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_02_dwp_ts5_tc1A_testTableGen /t_02_dwp_ts5_tc1B_columnValidation '
		);
			
	
	######################################	ALOG NO. 4	  ################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts3_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts3_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		04
		,'Verifying table[emihealth_final.impossible_age_daily] by generating test table[test_cases_2.t_temp_04_impAge_pldaily_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_04_impAge_ts3_tc1A_testTableGen /t_04_impAge_ts3_tc1B_columnValidation '
	);
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts4_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts4_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying table[emihealth_final.impossible_age_monthly] by generating test table[test_cases_2.t_temp_04_impAge_plmonthly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_04_impAge_ts4_tc1A_testTableGen / t_04_impAge_ts4_tc1B_columnValidation'
		);
		
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts5_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts5_tc1B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
		(
			04
			,'Verifying table[emihealth_final.impossible_age_yearly] by generating test table[test_cases_2.t_temp_04_impAge_plyearly_test_table]'
			,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_04_impAge_ts5_tc1A_testTableGen / t_04_impAge_ts5_tc1B_columnValidation '
		);
	
		
	######################################	ALOG NO. 7  	################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(07,'Verifying table[emihealth_final.pl_multi_doctor_stats_daily] by generating test table[test_cases_2.t_07_pl_temp]',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_07_multidoctor_ts3_tc2_plTestTable / t_07_multidoctor_ts3_tc1_plDailyValidation');
    
    
    	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(07,'Verifying table[emihealth_final.pl_multi_doctor_stats_monthly] by generating test table[test_cases_2.t_temp_07_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats',' t_07_multidoctor_ts5_tc7A_testTableGen/t_07_multidoctor_ts5_tc7B_columnValidation ');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(07,'Verifying table[emihealth_final.pl_multi_doctor_stats_yearly] by generating test table[test_cases_2.t_temp_07_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats',' t_07_multidoctor_ts6_tc6A_testTableGen/ t_07_multidoctor_ts6_tc6B_columnValidation');
	
    
   
    
	######################################	ALOG NO. 8	 ################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts3_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts3_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(08,'Verifying table[emihealth_final.overactive_inactive_yearly] by generating test table[test_cases_2.t_temp_08_ts3_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_08_overactiveInactiveAxio_ts3_tc6A_testTableGen / t_08_overactiveInactiveAxio_ts3_tc6B_columnValidation ');
	
	
	
	
	######################################	ALOG NO. 11 	################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(11,'Verifying table[emihealth_final.pl_primary_tooth_stats_daily] by generating test table[test_cases_2.t_11_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_11_primToothExt_ts3_tc2_plTestTable / t_11_primToothExt_ts3_tc1_plDailyValidation');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(11,'Verifying table[emihealth_final.pl_prim_tooth_ext_monthly] by generating test table[test_cases_2.t_11_ts4_tc7]'
				,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_11_primToothExt_ts5_tc7A_testTableGen / t_11_primToothExt_ts5_tc7B_columnValidation ');
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(11,'Verifying table[emihealth_final.pl_primary_tooth_stats_yearly] by generating test table[test_cases_2.t_temp_11_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_11_primToothExt_ts6_tc6A_testTableGen / t_11_primToothExt_ts6_tc6B_columnValidation');
	
	
	
	######################################	ALOG NO. 12	    ################################################	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(12,'Verifying table[emihealth_final.pl_third_molar_stats_daily] by generating test table[test_cases_2.t_12_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_12_thirdmolar_ts3_tc2_plTestTable / t_12_thirdmolar_ts3_tc1_plDailyValidation');
    
    
    	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(12,'Verifying table[emihealth_final.pl_third_molar_stats_monthly] by generating test table[test_cases_2.t_temp_12_ts5_tc7]',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_12_thirdmolar_ts5_tc7A_testTableGen / t_12_thirdmolar_ts5_tc7B_columnValidation');
   
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(12,'Verifying table[emihealth_final.pl_third_molar_stats_yearly] by generating
	 test table[test_cases_2.t_temp_12_ts6_tc6]',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_12_thirdmolar_ts6_tc6A_testTableGen / t_12_thirdmolar_ts6_tc6B_columnValidation');
	
	
	
	
	######################################	ALOG NO. 13  	################################################	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(13,'Verifying table[emihealth_final.pl_perio_scaling_stats_daily] by generating test table[test_cases_2.t_13_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_13_simpleProphy4a_ts3_tc2_plTestTable / t_13_simpleProphy4a_ts3_tc1_plDailyValidation');
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(13,'Verifying table[emihealth_final.pl_perio_scaling_stats_monthly] by generating test table[test_cases_2.t_temp_4a_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_13_simpleProphy4a_ts5_tc7A_testTableGen /t_13_simpleProphy4a_ts5_tc7B_columnValidation ');
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(13,'Verifying table[emihealth_final.pl_perio_scaling_stats_yearly] by generating test table[test_cases_2.t_temp_4a_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_13_simpleProphy4a_ts6_tc6A_testTableGen /t_13_simpleProphy4a_ts6_tc6B_columnValidation ');
	
	
	
	
	######################################	ALOG NO. 14   	################################################		
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,
    'Verifying table[emihealth_final.pl_full_mouth_xrays_daily] by generating test table[test_cases_2.t_15_pl_temp].'
    ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_15_unJustFMX_ts3_tc2_plTestTable / t_15_unJustFMX_ts3_tc1_plDailyValidation');
    
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.pl_full_mouth_xrays_stats_monthly] by generating test table[test_cases_2.t_temp_15_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_15_unJustFMX_ts5_tc7A_testTableGen /t_15_unJustFMX_ts5_tc7B_columnValidation ');
									
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.pl_full_mouth_xrays_stats_yearly] by generating test table[test_cases_2.t_temp_15_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_15_unJustFMX_ts6_tc6A_testTableGen / t_15_unJustFMX_ts6_tc6B_columnValidation');				
	
	
	######################################	ALOG NO. 15 	################################################	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.pl_full_mouth_xrays_daily] by generating test table[test_cases_2.t_15_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_15_unJustFMX_ts3_tc2_plTestTable / t_15_unJustFMX_ts3_tc1_plDailyValidation');
    
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.pl_full_mouth_xrays_stats_monthly] by generating test table[test_cases_2.t_temp_15_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_15_unJustFMX_ts5_tc7A_testTableGen / t_15_unJustFMX_ts5_tc7B_columnValidation');
   
    	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15,'Verifying table[emihealth_final.pl_full_mouth_xrays_stats_yearly] by generating test table[test_cases_2.t_temp_15_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_15_unJustFMX_ts6_tc6A_testTableGen / t_15_unJustFMX_ts6_tc6B_columnValidation');
    
    
    
    	######################################	ALOG NO. 16 	################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.pl_complex_perio_stats_daily] by generating test table[test_cases_2.t_16_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_16_complexPerio_ts3_tc2_plTestTable /t_16_complexPerio_ts3_tc1_plDailyValidation ');
    
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.pl_complex_perio_stats_monthly] by generating test table[test_cases_2.t_temp_16_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_16_complexPerio_ts5_tc7A_testTableGen /t_16_complexPerio_ts5_tc7B_columnValidation ');
					
					
					
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16,'Verifying table[emihealth_final.pl_complex_perio_stats_yearly] by generating test table[test_cases_2.t_temp_16_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_16_complexPerio_ts6_tc6A_testTableGen / t_16_complexPerio_ts6_tc6B_columnValidation');
		
		
	    
    	######################################	ALOG NO. 17 	################################################
		
	######################################	ALOG NO. 18	################################################	
        SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.pl_ext_upcode_axiomatic_stats_daily] by generating test table[test_cases_2.t_13_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_18_extUpcodeAxomatic_ts3_tc2_plTestTable / t_18_extUpcodeAxomatic_ts3_tc1_plDailyValidation');
			
		
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.pl_ext_upcode_axiomatic_stats_monthly] by generating test table[test_cases_2.t_temp_18_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_18_extUpcodeAxomatic_ts5_tc7A_testTableGen /t_18_extUpcodeAxomatic_ts5_tc7B_columnValidation ');		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,'Verifying table[emihealth_final.pl_ext_upcode_axiomatic_stats_yearly] by generating test table[test_cases_2.t_temp_18_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_18_extUpcodeAxomatic_ts6_tc6A_testTableGen / t_18_extUpcodeAxomatic_ts6_tc6B_columnValidation');	
					
			
	######################################	ALOG NO. 19  	################################################
											
	######################################	ALOG NO. 20 	################################################
	
	
				
	######################################	ALOG NO. 21	 ################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.pl_over_use_of_b_or_l_filling_stats_daily] by generating test table[test_cases_2.t_21_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_21_overuseOfBorL_ts3_tc2_plTestTable / t_21_overuseOfBorL_ts3_tc1_plDailyValidation');
   
   
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.pl_over_use_of_b_or_l_filling_stats_monthly] by generating test table[test_cases_2.t_temp_21_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_21_overuseOfBorL_ts5_tc7A_testTableGen / t_21_overuseOfBorL_ts5_tc7B_columnValidation');	
					
	 SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying table[emihealth_final.pl_over_use_of_b_or_l_filling_stats_yearly] by generating test table[test_cases_2.t_temp_21_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_21_overuseOfBorL_ts6_tc6A_testTableGen / t_21_overuseOfBorL_ts6_tc6B_columnValidation ');							
	
	
	
	######################################	ALOG NO. 22          ################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.pl_sealants_instead_of_filling_stats_daily] by generating test table[test_cases_2.t_22_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_22_sealantInsteadOfFill_ts3_tc2_plTestTable /t_22_sealantInsteadOfFill_ts3_tc1_plDailyValidation ');
		
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.pl_sealants_instead_of_filling_stats_monthly] by generating test table[test_cases_2.t_temp_22_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_22_sealantInsteadOfFill_ts5_tc7A_testTableGen / t_22_sealantInsteadOfFill_ts5_tc7B_columnValidation');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying table[emihealth_final.pl_sealants_instead_of_filling_stats_yearly] by generating test table[test_cases_2.t_temp_22_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_22_sealantInsteadOfFill_ts6_tc6A_testTableGen / t_22_sealantInsteadOfFill_ts6_tc6B_columnValidation ');
	
	
	
	
	######################################	ALOG NO. 23          ################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_23_cbu_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying table[emihealth_final.pl_cbu_daily] by generating test table[test_cases_2.t_23_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats',' t_23_cbu_ts3_tc2_plTestTable/t_23_cbu_ts3_tc1_plDailyValidation ');
  
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts6_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_23_cbu_ts6_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying table[emihealth_final.pl_cbu_stats_monthly] by generating test table[test_cases_2.t_temp_23_ts4_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats',' t_23_cbu_ts6_tc7A_testTableGen/ t_23_cbu_ts6_tc7B_columnValidation');
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts6_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_23_cbu_ts6_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying table[emihealth_final.pl_cbu_stats_yearly] by generating test table[test_cases_2.t_temp_23_ts4_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_23_cbu_ts6_tc7A_testTableGen / t_23_cbu_ts6_tc7B_columnValidation');
	
	
	
		
	######################################	ALOG NO. 24         ################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts3_tc1A_plTestTable`(@a);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts3_tc1B_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,
	    'Verifying PL daily stats table[emihealth_final.pl_deny_pulp_on_adult_stats_daily] using test table[test_cases_2.t_24_pl_temp_1]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_24_denyPulpOnAdult_ts3_tc1A_plTestTable / t_24_denyPulpOnAdult_ts3_tc1B_plDailyValidation');	
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying table[emihealth_final.pl_deny_pulp_on_adult_stats_monthly] by generating test table[test_cases_2.t_temp_24_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_24_denyPulpOnAdult_ts5_tc7A_testTableGen / t_24_denyPulpOnAdult_ts5_tc7B_columnValidation');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,'Verifying table[emihealth_final.pl_deny_pulp_on_adult_stats_yearly] by generating test table[test_cases_2.t_temp_24_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_24_denyPulpOnAdult_ts6_tc6A_testTableGen / t_24_denyPulpOnAdult_ts6_tc6B_columnValidation');
	
	
	
	######################################	ALOG NO. 25		      ################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts3_tc1A_plTestTable`(@a);
	CALL test_cases_2.`t_25_denyOtherXray_ts3_tc1B_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,
	    'Verifying PL daily table[emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_daily] using test table[test_cases_2.t_25_pl_temp]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_25_denyOtherXray_ts3_tc1A_plTestTable / t_25_denyOtherXray_ts3_tc1B_plDailyValidation');
			
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_25_denyOtherXray_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying table[emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_monthly] by generating test table[test_cases_2.t_temp_25_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_25_denyOtherXray_ts5_tc7A_testTableGen / t_25_denyOtherXray_ts5_tc7B_columnValidation');	
			
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_25_denyOtherXray_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,'Verifying table[emihealth_final.pl_deny_otherxrays_if_fmx_done_stats_yearly] by generating test table[test_cases_2.t_temp_25_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_25_denyOtherXray_ts6_tc6A_testTableGen / t_25_denyOtherXray_ts6_tc6B_columnValidation');	
		
	
	
		
	######################################	ALOG NO. 26  	      ################################################	
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts3_tc1A_plTestTable`(@a);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts3_tc1B_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,
	    'Verifying pl dsily table[emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_daily] using test table[test_cases_2.t_26_pl_temp]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_26_denyPulpOnAdultEndo_ts3_tc1A_plTestTable / t_26_denyPulpOnAdultEndo_ts3_tc1B_plDailyValidation ');
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying table[emihealth_final.pl_deny_pulp_on_adult_full_endo_stats_monthly] by generating test table[test_cases_2.t_temp_26_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_26_denyPulpOnAdultEndo_ts5_tc7A_testTableGen /t_26_denyPulpOnAdultEndo_ts5_tc7B_columnValidation ');
		
		
		
		
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts6_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts6_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,'Verifying table[emihealth_final.results_deny_pulpotomy_on_adult] by generating test table[test_cases_2.t_temp_26_ts4_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_26_denyPulpOnAdultEndo_ts6_tc7A_testTableGen / t_26_denyPulpOnAdultEndo_ts6_tc7B_columnValidation');
		
		
		
	######################################	ALOG NO. 27  	      ################################################				
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts3_tc2_plTestTable`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts3_tc1_plDailyValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.pl_anesthesia_dangerous_dose_stats_daily] by generating test table[test_cases_2.t_27_pl_temp].',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_27_anesthesiaDangDose_ts3_tc2_plTestTable / t_27_anesthesiaDangDose_ts3_tc1_plDailyValidation');
    			
			
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts5_tc7A_testTableGen`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts5_tc7B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.pl_anesthesia_dangerous_dose_stats_monthly] by generating test table[test_cases_2.t_temp_27_ts5_tc7]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_27_anesthesiaDangDose_ts5_tc7A_testTableGen / t_27_anesthesiaDangDose_ts5_tc7B_columnValidation');			
				
							
	SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts6_tc6A_testTableGen`(@suc);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts6_tc6B_columnValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,'Verifying table[emihealth_final.pl_anesthesia_dangerous_dose_stats_yearly] by generating test table[test_cases_2.t_temp_27_ts6_tc6]'
					,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_plstats','t_27_anesthesiaDangDose_ts6_tc6A_testTableGen / t_27_anesthesiaDangDose_ts6_tc6B_columnValidation');
					
				
					
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_INITIATE_TEST_TAB_GEN_TCS_RESULT` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_INITIATE_TEST_TAB_GEN_TCS_RESULT` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_INITIATE_TEST_TAB_GEN_TCS_RESULT`()
BEGIN
	DECLARE tc_success INT(1) DEFAULT 0;
	DECLARE tc_status INT(1) DEFAULT 0;
	DECLARE tc_detail VARCHAR(100) DEFAULT 'No detail';
	DECLARE start_time DATETIME DEFAULT NULL ;
	
	DROP TABLE IF EXISTS t_report_result;
	CREATE TABLE t_report_result
	(
		id INT(3) NOT NULL AUTO_INCREMENT,
		algo_id INT(2) ZEROFILL DEFAULT 00,
		test_case_name TINYTEXT DEFAULT NULL,
        test_case_sp_name TINYTEXT DEFAULT NULL,
		test_case_status INT(1) DEFAULT 0,
		test_case_detail TINYTEXT DEFAULT NULL, 
		execution_time TIME DEFAULT NULL,
		PRIMARY KEY (id)
	);
	
	
	######################################	ALOG NO. 00	################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_00_pic_dwp_ProPerf_table_gen`(@suc);
	CALL test_cases_2.`t_00_pic_dwp_anesthesia_ByPatient_test_table_gen`(@suc);
	CALL test_cases_2.`t_00_pic_dwp_anesthesia_ByPatient_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(00
		,'Verifying anesthesia time in table[emihealth_final.pic_dwp_anesthesia_adjustments] by generating test table[test_cases_2.t_temp_pic_dwp_anesthesia_ByPatient_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_00_pic_dwp_ProPerf_table_gen/t_00_pic_dwp_anesthesia_ByPatient_test_table_gen/t_00_pic_dwp_anesthesia_ByPatient_validation ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_00_pic_dwp_fillup_ByPatient_test_table_gen`(@suc);
	CALL test_cases_2.`t_00_pic_dwp_fillup_ByPatient_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(00
		,'Verifying fillup time in table[emihealth_final.pic_dwp_fillup_time_by_mid] by generating test table[test_cases_2.t_temp_pic_dwp_fillup_ByPatient_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_00_pic_dwp_fillup_ByPatient_test_table_gen/t_00_pic_dwp_fillup_ByPatient_validation ');
	
	SET start_time = NOW();
	CALL test_cases_2.`t_00_pic_dwp_multisite_table_gen`(@suc);
	CALL test_cases_2.`t_00_pic_dwp_multisite_by_patient_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(00
		,'Verifying multisite time in table[emihealth_final.pic_dwp_multisites_adjustments] by generating test table[test_cases_2.t_temp_multisite_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_00_pic_dwp_multisite_table_gen/t_00_pic_dwp_multisite_by_patient_validation ');
		
	
	
	
	######################################	ALOG NO. 7	################################################
	seT start_time = NOW();
	CALL test_cases_2.`t_07_multidoctor_ts2_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_07_multidoctor_ts2_tc1B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(07
		,'Verifying result table [emihealth_final.results_multi_doctor] by using test table [test_cases_2.t_temp_multidoctor_ts1_tc5].'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_07_multidoctor_ts2_tc1A_testTableGen/t_07_multidoctor_ts2_tc1B_resReasonsValidation ');
		
	######################################	ALOG NO. 8	################################################
	-- called at end
	
	
	
	
	
	######################################	ALOG NO. 11	################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_11_primToothExt_ts2_tc5A_testTableGen`(@suc);
	CALL test_cases_2.`t_11_primToothExt_ts2_tc5B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(11,'Verifying Columns for result table[emihealth_final.primtoothExt] by generating test table[test_cases_2.t_temp_11_test_table]'
    ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_11_primToothExt_ts2_tc5A_testTableGen/t_11_primToothExt_ts2_tc5B_resReasonsValidation ');
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_12_thirdmolar_ts2_tc3A_testTableGen`(@suc);
	CALL test_cases_2.`t_12_thirdmolar_ts2_tc3B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(12,'Verifying Columns for result table[emihealth_final.results_third_molar] by generating test table[test_cases_2.t_temp_thirdmolar_ts1_tc5]'
    ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_12_thirdmolar_ts2_tc3A_testTableGen/t_12_thirdmolar_ts2_tc3B_resReasonsValidation ');
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_13_simpleProphy4a_ts2_tc5A_testTableGen`(@suc);
	CALL test_cases_2.`t_13_simpleProphy4a_ts2_tc5B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(13,'Verifying Columns for result table[emihealth_final.results_perio_scaling_4a] by generating test table[test_cases_2.t_temp_13_simpleProphy4a_test_table]'
    ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result',' t_13_simpleProphy4a_ts2_tc5A_testTableGen/t_13_simpleProphy4a_ts2_tc5B_resReasonsValidation');
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_14_simpleProphy4b_ts1_tc5A_testTableGen`(@suc);
	CALL test_cases_2.`t_14_simpleProphy4b_ts1_tc5B_reasons`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(14
		,'Verifying Columns for result table[emihealth_final.results_simple_prophy_4b] by generating test table[test_cases_2.t_temp_4b_ts1_tc5]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_14_simpleProphy4b_ts1_tc5A_testTableGen/t_14_simpleProphy4b_ts1_tc5B_reasons ');
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_15_unJustFMX_ts2_tc5A_testTableGen`(@suc);
	CALL test_cases_2.`t_15_unJustFMX_ts2_tc5B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(15
		,'Verifying Columns for result table[emihealth_final.results_full_mouth_xrays] by generating test table[test_cases_2.t_temp_15_unJustFMX_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_15_unJustFMX_ts2_tc5B_resReasonsValidation');
	
	
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_16_complexPerio_ts2_tc2A_testTableGen`(@suc);
	CALL test_cases_2.`t_16_complexPerio_ts2_tc2B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(16
		,'Verifying Columns for result table[emihealth_final.results_complex_perio] by generating test table[test_cases_2.t_temp_16_complex_perio_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_16_complexPerio_ts2_tc2A_testTableGen/t_16_complexPerio_ts2_tc2B_resReasonsValidation '); 
	
	
	
	
	######################################	ALOG NO. 17	################################################
	
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step1_src_table_gen`();
	
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step2_test_table_gen`(@a);
	
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step2_validation`(tc_success,tc_status,tc_detail);
	
	
	CALL t_update_report_table_fn(17
		,'Verifying source table[emihealth_final.`results_ext_code_distribution`] using test table[test_cases_2.`t_temp_17_simpCompCodeDist_test_table`]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_17_simpCompExtCodeDist_step1_src_table_gen/ 
        t_17_simpCompExtCodeDist_step2_test_table_gen/t_17_simpCompExtCodeDist_step2_validation'); 
	    
	
	
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step3_meansd_test_table_gen`(@a);
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step3_meansd_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,
	     'Verifying all mean table[emihealth_final.`results_ext_code_distribution_all_meansd`] using test table[test_cases_2.`t_temp_17_simpCompExtCodeDist_meansd_test_table`]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_17_simpCompExtCodeDist_step3_meansd_test_table_gen/t_17_simpCompExtCodeDist_step3_meansd_validation ');
	     
	SET start_time = NOW();
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step4_test_table_gen`(@a);
	CALL test_cases_2.`t_17_simpCompExtCodeDist_step4_validation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(17,
	     'Verifying results table[emihealth_final.`results_ext_code_distribution`] using test table[test_cases_2.`t_temp_17_simpCompExtCodeDist_test_table_4`]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_17_simpCompExtCodeDist_step4_test_table_gen/t_17_simpCompExtCodeDist_step4_validation ');
	     
	
	
	
	######################################	ALOG NO. 18	################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts2_tc1A_srcTableGen`();
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts2_tc1B_testTableGen`(@a);
	CALL test_cases_2.`t_18_extUpcodeAxomatic_ts2_tc1C_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(18,
	     'Verifying result table[emihealth_final.surg_ext_final_results] using test table[test_cases_2.`t_temp_18_extUpcodeAxomatic_test_table`]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_18_extUpcodeAxomatic_ts2_tc1A_srcTableGen/t_18_extUpcodeAxomatic_ts2_tc1B_testTableGen/t_18_extUpcodeAxomatic_ts2_tc1C_resReasonsValidation ');
	     
	     
	     
	######################################	ALOG NO. 19	################################################     
	SET start_time = NOW();
	CALL test_cases_2.`t_19_overactInactCodeDist_ts2_tc5A_testTableGen`(@a);
	CALL test_cases_2.`t_19_overactInactCodeDist_ts2_tc5B_reasons`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(19,
	     'Verifying result table[emihealth_final.overactive_code_distribution_yearly_by_attend] using test table[test_cases_2.`t_temp_19_overactiveInactive_result_test_table`]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_19_overactInactCodeDist_ts2_tc5A_testTableGen/ t_19_overactInactCodeDist_ts2_tc5B_reasons');
	     
	     
	     
	     
	######################################	ALOG NO. 20	################################################     	
	SET start_time = NOW();
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts2_tc1A_resultWeekTestTableGen`(@a);
	CALL test_cases_2.`t_20_adjFillingCodeDist_ts2_tc1B_resultWeekTableValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(20,
	     'Verifying weekly result table[emihealth_final.results_adjacent_filling_each_attend_weekly] using test table[test_cases_2.`t_temp_20_adjFillingCodeDist_result_week_test_table`]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result',' t_20_adjFillingCodeDist_ts2_tc1A_resultWeekTestTableGen/t_20_adjFillingCodeDist_ts2_tc1B_resultWeekTableValidation');
	     
	     
	     
	######################################	ALOG NO. 21	################################################     
	SET start_time = NOW();
	CALL test_cases_2.`t_21_overuseOfBorL_ts2_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_21_overuseOfBorL_ts2_tc1B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(21,'Verifying Columns for result table[emihealth_final.results_over_use_of_b_or_l_filling] by generating test table[test_cases_2.t_temp_21_overuseOfBorL_test_table]',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result'
    ,'t_21_overuseOfBorL_ts2_tc1A_testTableGen/t_21_overuseOfBorL_ts2_tc1B_resReasonsValidation ');
  
  
  
	######################################	ALOG NO. 22	################################################
  	SET start_time = NOW();
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts2_tc2A_testTableGen`(@suc);
	CALL test_cases_2.`t_22_sealantInsteadOfFill_ts2_tc2B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(22,'Verifying Columns for result table[emihealth_final.results_sealants_instead_of_filling] by generating test table[test_cases_2.t_temp_22_sealant_test_table]',tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result'
    ,'t_22_sealantInsteadOfFill_ts2_tc2A_testTableGen/t_22_sealantInsteadOfFill_ts2_tc2B_resReasonsValidation ');
	
	 
	######################################	ALOG NO. 23	################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_23_cbu_ts2_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_23_cbu_ts2_tc1B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(23,'Verifying Columns for result table[emihealth_final.results_cbu] by generating test table[test_cases_2.t_temp_23_cbu_test_table]'
    ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_23_cbu_ts2_tc1A_testTableGen/t_23_cbu_ts2_tc1B_resReasonsValidation ');
	
	
	######################################	ALOG NO. 24	################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts2_tc5A_testTableGen`(@a);
	CALL test_cases_2.`t_24_denyPulpOnAdult_ts2_tc5B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(24,
	    'Verifying weekly result table[emihealth_final.results_deny_pulpotomy_on_adult] using test table[test_cases_2.t_temp_24_denyPulpOnAdult_test_table]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_24_denyPulpOnAdult_ts2_tc5A_testTableGen/t_24_denyPulpOnAdult_ts2_tc5B_resReasonsValidation ');
	
	
	######################################	ALOG NO. 25	################################################
	SET start_time = NOW();
	CALL test_cases_2.`t_25_denyOtherXray_ts2_tc2A_testTableGen`(@a);
	CALL test_cases_2.`t_25_denyOtherXray_ts2_tc2B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(25,
	    'Verifying result table[emihealth_final.results_deny_otherxrays_if_fmx_done] using test table[test_cases_2.t_temp_25_denyOtherXray_test_table]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result',' t_25_denyOtherXray_ts2_tc2A_testTableGen/t_25_denyOtherXray_ts2_tc2B_resReasonsValidation');
	     
	     
	     
	######################################	ALOG NO. 26	################################################     
	SET start_time = NOW();
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts2_tc5A_testTableGen`(@a);
	CALL test_cases_2.`t_26_denyPulpOnAdultEndo_ts2_tc5B_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(26,
	    'Verifying result table[emihealth_final.results_deny_pulp_on_adult_full_endo] using test table[test_cases_2.t_temp_26_denyPulpOnAdultEndo_test_table]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result',' t_26_denyPulpOnAdultEndo_ts2_tc5A_testTableGen/t_26_denyPulpOnAdultEndo_ts2_tc5B_resReasonsValidation');
	   
	   
	     
	######################################	ALOG NO. 27	################################################
	 SET start_time = NOW();
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts2_tc1A_srcTableGen`(@a);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts2_tc1B_testTableGen`(@a);
	CALL test_cases_2.`t_27_anesthesiaDangDose_ts2_tc1C_resReasonsValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(27,
	    'Verifying result table[emihealth_final.results_anesthesia_dangerous_dose] using test table[test_cases_2.t_temp_27_anesthesiaDangDose_test_table]'
	     ,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result','t_27_anesthesiaDangDose_ts2_tc1A_srcTableGen/t_27_anesthesiaDangDose_ts2_tc1B_testTableGen/t_27_anesthesiaDangDose_ts2_tc1C_resReasonsValidation '); 
	
	
	
	######################################	ALOG NO. 8	################################################
	
	SET start_time = NOW();
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts2_tc5A_testTableGen`(@suc);
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts2_tc5B_ppTableGen`(@suc);
	CALL test_cases_2.`t_08_overactiveInactiveAxio_ts2_tc5C_reasons`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn(08
	,'Verifying Columns for result table[emihealth_final.overactive_inactive] by generating test table[test_cases_2.t_temp_08_overactiveInactive_result_test_table]'
	,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result',' t_08_overactiveInactiveAxio_ts2_tc5A_testTableGen/t_08_overactiveInactiveAxio_ts2_tc5B_ppTableGen/t_08_overactiveInactiveAxio_ts2_tc5C_reasons');
	
	
	
	
	
	
	######################################	ALOG NO. 4	################################################
	
	SET start_time = NOW();
	CALL test_cases_2.`t_04_impAge_ts2_tc1A_testTableGen`(@suc);
	CALL test_cases_2.`t_04_impAge_ts2_tc1B_resReasonValidation`(tc_success,tc_status,tc_detail);
	CALL t_update_report_table_fn
	(
		04
		,'Verifying table[emihealth_final.procedure_performed] column[impossible_age_status] by generating test table[test_cases_2.t_temp_04_impAge_result_test_table]'
		,tc_status,tc_detail,TIMEDIFF(NOW(),start_time),'t_report_result',' t_04_impAge_ts2_tc1A_testTableGen/t_04_impAge_ts2_tc1B_resReasonValidation'
	);
	     
    END */$$
DELIMITER ;

/* Procedure structure for procedure `t_make_summaryTable_from_reportTable` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_make_summaryTable_from_reportTable` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_make_summaryTable_from_reportTable`()
BEGIN
	declare x_algo_id int(2) default 1;
	declare x_total_test_cases_2 int(2) default 0;
	declare x_passed_test_cases_2 int(2) default 0;
	declare x_failed_test_cases_2 int(2) default 0;
	-- declare x_total_execution_time time default null;
	declare x_total_execution_time int default 0;
	
	while (x_algo_id <= 27) do
	
		select count(distinct(test_case_name)) into x_total_test_cases_2
		FROM test_cases_2.t_report where algo_id=x_algo_id;
		
		select count(DISTINCT(test_case_name)) into x_passed_test_cases_2 
		FROM test_cases_2.t_report where algo_id=x_algo_id and test_case_status=1;
		
		set x_failed_test_cases_2 = x_total_test_cases_2 - x_passed_test_cases_2;
		-- execution_time
		SELECT SEC_TO_TIME(SUM(TIME_TO_SEC(execution_time))) INTO x_total_execution_time 
		FROM test_cases_2.t_report WHERE algo_id=x_algo_id ;
		
		UPDATE test_cases_2.t_summary 
		set total_test_cases_2 = x_total_test_cases_2,
		    passed_test_cases_2 = x_passed_test_cases_2,
		    failed_test_cases_2 = x_failed_test_cases_2,
		    total_execution_time = x_total_execution_time
		where algo_id = x_algo_id;
		
		SET x_algo_id = x_algo_id +1;
	END WHILE;
	
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_update_report_table_fn` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_update_report_table_fn` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_update_report_table_fn`( 
								in i_algo_id int
								,IN i_test_case_name VARCHAR(200)
								,IN i_test_case_status INT(1)
                                                                ,in i_test_case_detail varchar(200)
                                                                ,In i_exe_time Time
                                                                ,in report_tab_name varchar(500)
                                                                ,IN i_test_case_sp_name VARCHAR(500)
									)
BEGIN
	
	
	if (i_test_case_status is null )then
		set i_test_case_status = -1;
	end if;
	IF (i_test_case_detail IS NULL )THEN
		SET i_test_case_detail = 'Null Detail is thrown by test case';
	END IF;
	
	
	set @q= 
	concat (
	"INSERT INTO test_cases_2.",report_tab_name
	,"(algo_id,test_case_name,test_case_status,test_case_detail,execution_time,test_case_sp_name) 
	SELECT ",i_algo_id,",'",i_test_case_name,"',",i_test_case_status,",'",i_test_case_detail,"','",i_exe_time,"','",i_test_case_sp_name,"'"
	);
	
	
	PREPARE stmt2 FROM @q;
	execute stmt2;
		
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_update_weight_global_reasonsNvariables_tables` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_update_weight_global_reasonsNvariables_tables` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_update_weight_global_reasonsNvariables_tables`(in reasons_tab_weight double, in variables_tab_weight double)
BEGIN
	if(reasons_tab_weight > 99.9)then
		set reasons_tab_weight = 99.9;
	else
		if(reasons_tab_weight <= 0)then
			set reasons_tab_weight = 1;
		end if;
	end if;
	
	IF(variables_tab_weight > 99.9)THEN
		SET variables_tab_weight = 99.9;
	ELSE
		IF(variables_tab_weight <= 0)THEN
			SET variables_tab_weight = 1;
		END IF;
	END IF;
	
	
	UPDATE 	test_cases_2.`t_global_reasons_ratio`
	SET 	reason_weight = reasons_tab_weight
	where 	algo_id not in (4,8);
	
	-- pl_daily_impAge make it more less
	-- pl_monthly_impAge make it to 10 %
	-- pl_daily_denyOtherXray
	-- pl_dialy_anesthesiaDangDose
	-- 
	UPDATE 	test_cases_2.`t_global_variables`
	SET 	var_value = variables_tab_weight
	WHERE 	id NOT IN (1,2,3)
		and var_key not in 
			(
				'pl_daily_impAge'
				,'pl_monthly_impAge'
				,'pl_daily_dwp'
				,'pl_daily_pic'
				,'pl_daily_denyOtherXray'
				,'pl_dialy_anesthesiaDangDose'
			)
		;
	
END */$$
DELIMITER ;

/* Procedure structure for procedure `t_verify_pivot_stats` */

/*!50003 DROP PROCEDURE IF EXISTS  `t_verify_pivot_stats` */;

DELIMITER $$

/*!50003 CREATE PROCEDURE `t_verify_pivot_stats`( )
BEGIN	
	DECLARE `table_name` varchar(100) DEFAULT NULL;
	
	SET @datetime= DATE_FORMAT(CURRENT_TIMESTAMP(), '%d_%b_%Y__%H_%i_%S') ;
	set @table_name= Concat('test_cases_2.t_temp_pivot_',@datetime);
	SET table_name=@table_name;
	SET @t1 =CONCAT ( 'DROP TABLE IF EXISTS ' , table_name );
	PREPARE stmt1 FROM @t1;
	EXECUTE stmt1;
	DEALLOCATE PREPARE stmt1;
	 SET @t2 =CONCAT (  'CREATE TABLE IF NOT EXISTS ' , table_name , ' (
	 
	   `id` BIGINT(20) NOT NULL AUTO_INCREMENT,
	   algo_id INT(3)  DEFAULT NULL,
	   algo_name VARCHAR(100) DEFAULT "No Name",	  
	   total_claim INT(50)  DEFAULT NULL,
	   total_attend INT(50)  DEFAULT NULL,
	   total_mid INT(50)  DEFAULT NULL,
	   total_dos INT(50)  DEFAULT NULL,
	   total_tooth INT(50)  DEFAULT NULL,
	   total_red INT(50)  DEFAULT NULL,
	   total_yellow INT(50)  DEFAULT NULL,
	   total_green INT(50)  DEFAULT NULL,
	   total_paid_money INT(50)  DEFAULT NULL,
	   total_recovered_money INT(50)  DEFAULT NULL,
	   total_reason_levels INT(50)  DEFAULT NULL,
	   recovered_money_issue int(11) DEFAULT NULL,
	   PRIMARY KEY (`id`)   
        ) ENGINE=MYISAM DEFAULT CHARSET=latin1');  
	
	 PREPARE stmt2 FROM @t2;
	 EXECUTE stmt2;
	 DEALLOCATE PREPARE stmt2;
	
		CALL t_check_recovered_money('pic_doctor_stats_daily',@a);
		set @t3 =
		concat
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend,total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels,recovered_money_issue) '
				,'SELECT '
				,' "01", '
				,' "emihealth_final.pic_doctor_stats_daily", '
				,' NULL, '
				,'count(distinct(attend)), '	
				,'count(distinct(date_of_service)), '
				,'NULL, '
				, 'SUM(CASE WHEN color_code="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN color_code="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN color_code="green" THEN 1 ELSE 0 END), '
				,'SUM(income), '
				,'SUM(recovered_money), '
				,'NULL ,'
				,@a,' '
				,'FROM '
				,'emihealth_final.pic_doctor_stats_daily '
				,'Where isactive = "1" '
			
			);
 	 PREPARE stmt3 FROM @t3;
 	 EXECUTE stmt3;
	 DEALLOCATE PREPARE stmt3;	
	
	
	CALL t_check_recovered_money('dwp_doctor_stats_daily',@a);
	
		SET @t4 =
		CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend ,total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels,recovered_money_issue) '
				,'SELECT '
				,' "02", '
				,' "emihealth_final.dwp_doctor_stats_daily", '
				,' NULL, '
				,'count(distinct(attend)), '
				,'count(distinct(date_of_service)), '
				,'NULL, '
				, 'SUM(CASE WHEN color_code="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN color_code="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN color_code="green" THEN 1 ELSE 0 END), '
				,'SUM(income), '
				,'SUM(recovered_money), '
				,'NULL '
				,',',@a,' '
				,'FROM '
				,'emihealth_final.dwp_doctor_stats_daily '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt4 FROM @t4;
 	 EXECUTE stmt4;
	 DEALLOCATE PREPARE stmt4;	
	
	
	
		SET @t5 =
		CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid ,total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "07", '
				,' "emihealth_final.results_multi_doctor", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN color_code="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN color_code="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN color_code="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)) '
				,'FROM '
				,'emihealth_final.results_multi_doctor '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt5 FROM @t5;
 	 EXECUTE stmt5;
	 DEALLOCATE PREPARE stmt5;	
	
	
	
	
	
	
		SET @t6 =
		CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "08", '
				,' "emihealth_final.overactive_inactive", '
				,'NULL, '
				,'count(distinct(attend)), '
				,'count(distinct(mid)), '
				,'NULL, '
				,'NULL, '
				, 'SUM(CASE WHEN color_code="red"       THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN color_code="yellow"   THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN color_code="green"    THEN 1 ELSE 0 END), '
				,'SUM(total_amount), '
				,'NULL, '
				,'NULL '
				,'FROM '
				,'emihealth_final.overactive_inactive '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt6 FROM @t6;
 	 EXECUTE stmt6;
	 DEALLOCATE PREPARE stmt6;	
	
		CALL t_check_recovered_money('results_primary_tooth_ext',@a);
	
		SET @t7 =
		CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels,recovered_money_issue) '
				,'SELECT '
				,' "11", '
				,' "emihealth_final.results_primary_tooth_ext", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)), '
				,@a,' '
				,'FROM '
				,'emihealth_final.results_primary_tooth_ext '
				,'Where isactive = "1" '
			);
	
 	 PREPARE stmt7 FROM @t7;
 	 EXECUTE stmt7;
	 DEALLOCATE PREPARE stmt7;	
		
		
		
		
		SET @t8 =
		CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "12", '
				,' "emihealth_final.results_third_molar", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)) '
				,'FROM '
				,'emihealth_final.results_third_molar '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt8 FROM @t8;
 	 EXECUTE stmt8;
	 DEALLOCATE PREPARE stmt8;	
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 		SET @t9 =
			CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "13", '
				,' "emihealth_final.results_perio_scaling_4a", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)) '
				,'FROM '
				,'emihealth_final.results_perio_scaling_4a '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt9 FROM @t9;
 	 EXECUTE stmt9;
	 DEALLOCATE PREPARE stmt9;	
	 
	 
	 
	 
	 
		CALL t_check_recovered_money('results_simple_prophy_4b',@a);
	 	SET @t10 =
		CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels,recovered_money_issue) '
				,'SELECT '
				,' "14", '
				,' "emihealth_final.results_simple_prophy_4b", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)), '
				,@a, ' '
				,'FROM '
				,'emihealth_final.results_simple_prophy_4b '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt10 FROM @t10;
 	 EXECUTE stmt10;
	 DEALLOCATE PREPARE stmt10;	
	 
	 
	 
	 
	 
	 
	 
	 
	 	SET @t11 =
		CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "15", '
				,' "emihealth_final.results_full_mouth_xrays", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)) '
				,'FROM '
				,'emihealth_final.results_full_mouth_xrays '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt11 FROM @t11;
 	 EXECUTE stmt11;
	 DEALLOCATE PREPARE stmt11;	
	 
	 
	 
	 
	 
	 
	 
			CALL t_check_recovered_money('results_complex_perio',@a);
	 	 	SET @t12 =
			CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels,recovered_money_issue) '
				,'SELECT '
				,' "16", '
				,' "emihealth_final.results_complex_perio", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)), '
				,@a, ' '
				,'FROM '
				,'emihealth_final.results_complex_perio '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt12 FROM @t12;
 	 EXECUTE stmt12;
	 DEALLOCATE PREPARE stmt12;	
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 	 	 	SET @t13 =
			CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "17", '
				,' "emihealth_final.results_ext_code_distribution", '
				,'NULL, '
				,'count(distinct(attend)), '
				, 'NULL, '
				,'NULL, '
				,'NULL, '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'NULL, '
				,'NULL '
				,'FROM '
				,'emihealth_final.results_ext_code_distribution '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt13 FROM @t13;
 	 EXECUTE stmt13;
	 DEALLOCATE PREPARE stmt13;	
	 
	 
	 
	 
	
	 
	 CALL t_check_recovered_money('surg_ext_final_results',@a);
	 	 	SET @t14 =
			CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels,recovered_money_issue) '
				,'SELECT '
				,' "18", '
				,' "emihealth_final.surg_ext_final_results", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)), '
				,@a, ' ' 
				,'FROM '
				,'emihealth_final.surg_ext_final_results '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt14 FROM @t14;
 	 EXECUTE stmt14;
	 DEALLOCATE PREPARE stmt14;	
	 
	 
	 
	 
	 
	 
	 	 	SET @t15 =
			CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend,total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "19", '
				,' "emihealth_final.overactive_code_distribution_yearly_by_attend", '
				,' NULL, '
				,'count(distinct(attend)), '	
				,'NULL, '
				,'NULL, '
				, 'SUM(CASE WHEN color_code="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN color_code="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN color_code="green" THEN 1 ELSE 0 END), '
				,'NULL, '
				,'NULL, '
				,'NULL '
				,'FROM '
				,'emihealth_final.overactive_code_distribution_yearly_by_attend '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt15 FROM @t15;
 	 EXECUTE stmt15;
	 DEALLOCATE PREPARE stmt15;	
	 
	 
	 
	 
	 
	 
	 
	 
			SET @t16 =
			CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "20", '
				,' "emihealth_final.results_adjacent_filling_each_attend_weekly", '
				,'NULL, '
				,'count(distinct(attend)), '
				, 'NULL, '
				,'NULL, '
				,'NULL, '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'NULL '
				,'FROM '
				,'emihealth_final.results_adjacent_filling_each_attend_weekly '
				
			);
 	 PREPARE stmt16 FROM @t16;
 	 EXECUTE stmt16;
	 DEALLOCATE PREPARE stmt16;	
	  
	 
	 
	 
	 	 	 	SET @t17 =
				CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "21", '
				,' "emihealth_final.results_over_use_of_b_or_l_filling", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)) '
				,'FROM '
				,'emihealth_final.results_over_use_of_b_or_l_filling '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt17 FROM @t17;
 	 EXECUTE stmt17;
	 DEALLOCATE PREPARE stmt17;	
	 
	 
	 
	 
		SET @t18 =
		CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "22", '
				,' "emihealth_final.results_sealants_instead_of_filling", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)) '
				,'FROM '
				,'emihealth_final.results_sealants_instead_of_filling '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt18 FROM @t18;
 	 EXECUTE stmt18;
	 DEALLOCATE PREPARE stmt18;	
	 
	 
	 	 SET @t19 =
		 CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "23", '
				,' "emihealth_final.results_cbu", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)) '
				,'FROM '
				,'emihealth_final.results_cbu '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt19 FROM @t19;
 	 EXECUTE stmt19;
	 DEALLOCATE PREPARE stmt19;	
	 
	 
	 
	
	 
	 	SET @t20 =
			CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "24", '
				,' "emihealth_final.results_deny_pulpotomy_on_adult", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)) '
				,'FROM '
				,'emihealth_final.results_deny_pulpotomy_on_adult '
				,'Where isactive = "1" '
			);
			
 	 PREPARE stmt20 FROM @t20;
 	 EXECUTE stmt20;
	 DEALLOCATE PREPARE stmt20;	
	 
	 
	 
	 
	 
	 	 	 SET @t21 =
		CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "25", '
				,' "emihealth_final.results_deny_otherxrays_if_fmx_done", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'NULL, '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)) '
				,'FROM '
				,'emihealth_final.results_deny_otherxrays_if_fmx_done '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt21 FROM @t21;
 	 EXECUTE stmt21;
	 DEALLOCATE PREPARE stmt21;	
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 	 	 	 SET @t22 =
		CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "26", '
				,' "emihealth_final.results_deny_pulp_on_adult_full_endo", '
				,'count(distinct(claim_id)), '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'count(tooth_no), '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)) '
				,'FROM '
				,'emihealth_final.results_deny_pulp_on_adult_full_endo '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt22 FROM @t22;
 	 EXECUTE stmt22;
	 DEALLOCATE PREPARE stmt22;	
	 
	 
	 
	 	SET @t23 =
		CONCAT
			(
				'INSERT INTO '
				,table_name
				,'(algo_id, algo_name, total_claim, total_attend, total_mid, total_dos,total_tooth,total_red,total_yellow,total_green,total_paid_money,total_recovered_money,total_reason_levels) '
				,'SELECT '
				,' "27", '
				,' "emihealth_final.results_anesthesia_dangerous_dose", '
				,'NULL, '
				,'count(distinct(attend)), '
				, 'count(distinct(mid)), '
				,'count(distinct(date_of_service)), '
				,'NULL, '
				, 'SUM(CASE WHEN ryg_status="red"     THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="yellow" THEN 1 ELSE 0 END), '
				, 'SUM(CASE WHEN ryg_status="green" THEN 1 ELSE 0 END), '
				,'SUM(paid_money), '
				,'SUM(recovered_money), '
				,'count(distinct(reason_level)) '
				,'FROM '
				,'emihealth_final.results_anesthesia_dangerous_dose '
				,'Where isactive = "1" '
			);
 	 PREPARE stmt23 FROM @t23;
 	 EXECUTE stmt23;
	 DEALLOCATE PREPARE stmt23;	
	 
	 
	
	
	
	-- Recovered_money is calculated for following tables
	/*
	CALL t_check_recovered_money('results_primary_tooth_ext',@a);
	CALL t_check_recovered_money('results_complex_perio',@a);
	CALL t_check_recovered_money('surg_ext_final_results',@a);
	CALL t_check_recovered_money('dwp_doctor_stats_daily',@a);
	CALL t_check_recovered_money('pic_doctor_stats_daily',@a);
	CALL t_check_recovered_money('results_simple_prophy_4b',@a);	
	*/
	
END */$$
DELIMITER ;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;
